/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@toruslabs";
exports.ids = ["vendor-chunks/@toruslabs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ACCOUNT_CATEGORY: () => (/* binding */ ACCOUNT_CATEGORY),\n/* harmony export */   ACTIVITY_ACTION: () => (/* binding */ ACTIVITY_ACTION),\n/* harmony export */   ACTIVITY_ACTION_ALL: () => (/* binding */ ACTIVITY_ACTION_ALL),\n/* harmony export */   ACTIVITY_ACTION_BURN: () => (/* binding */ ACTIVITY_ACTION_BURN),\n/* harmony export */   ACTIVITY_ACTION_RECEIVE: () => (/* binding */ ACTIVITY_ACTION_RECEIVE),\n/* harmony export */   ACTIVITY_ACTION_SEND: () => (/* binding */ ACTIVITY_ACTION_SEND),\n/* harmony export */   ACTIVITY_ACTION_TOPUP: () => (/* binding */ ACTIVITY_ACTION_TOPUP),\n/* harmony export */   ACTIVITY_PERIOD_ALL: () => (/* binding */ ACTIVITY_PERIOD_ALL),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_ONE: () => (/* binding */ ACTIVITY_PERIOD_MONTH_ONE),\n/* harmony export */   ACTIVITY_PERIOD_MONTH_SIX: () => (/* binding */ ACTIVITY_PERIOD_MONTH_SIX),\n/* harmony export */   ACTIVITY_PERIOD_WEEK_ONE: () => (/* binding */ ACTIVITY_PERIOD_WEEK_ONE),\n/* harmony export */   ACTIVITY_STATUS_CANCELLED: () => (/* binding */ ACTIVITY_STATUS_CANCELLED),\n/* harmony export */   ACTIVITY_STATUS_CANCELLING: () => (/* binding */ ACTIVITY_STATUS_CANCELLING),\n/* harmony export */   ACTIVITY_STATUS_PENDING: () => (/* binding */ ACTIVITY_STATUS_PENDING),\n/* harmony export */   ACTIVITY_STATUS_SUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_SUCCESSFUL),\n/* harmony export */   ACTIVITY_STATUS_UNSUCCESSFUL: () => (/* binding */ ACTIVITY_STATUS_UNSUCCESSFUL),\n/* harmony export */   BROADCAST_CHANNELS: () => (/* binding */ BROADCAST_CHANNELS),\n/* harmony export */   BROADCAST_CHANNELS_MSGS: () => (/* binding */ BROADCAST_CHANNELS_MSGS),\n/* harmony export */   BaseBlockTracker: () => (/* binding */ BaseBlockTracker),\n/* harmony export */   BaseController: () => (/* binding */ BaseController),\n/* harmony export */   BaseCurrencyController: () => (/* binding */ BaseCurrencyController),\n/* harmony export */   BaseEmbedController: () => (/* binding */ BaseEmbedController),\n/* harmony export */   BaseKeyringController: () => (/* binding */ BaseKeyringController),\n/* harmony export */   BasePreferencesController: () => (/* binding */ BasePreferencesController),\n/* harmony export */   BaseTransactionStateManager: () => (/* binding */ BaseTransactionStateManager),\n/* harmony export */   BroadcastChannelHandler: () => (/* binding */ BroadcastChannelHandler),\n/* harmony export */   COMMUNICATION_JRPC_METHODS: () => (/* binding */ COMMUNICATION_JRPC_METHODS),\n/* harmony export */   COMMUNICATION_NOTIFICATIONS: () => (/* binding */ COMMUNICATION_NOTIFICATIONS),\n/* harmony export */   CommunicationWindowManager: () => (/* binding */ CommunicationWindowManager),\n/* harmony export */   DEFAULT_PREFERENCES: () => (/* binding */ DEFAULT_PREFERENCES),\n/* harmony export */   FEATURES_CONFIRM_WINDOW: () => (/* binding */ FEATURES_CONFIRM_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_POPUP_WINDOW: () => (/* binding */ FEATURES_DEFAULT_POPUP_WINDOW),\n/* harmony export */   FEATURES_DEFAULT_WALLET_WINDOW: () => (/* binding */ FEATURES_DEFAULT_WALLET_WINDOW),\n/* harmony export */   FEATURES_PROVIDER_CHANGE_WINDOW: () => (/* binding */ FEATURES_PROVIDER_CHANGE_WINDOW),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   PAYMENT_PROVIDER: () => (/* binding */ PAYMENT_PROVIDER),\n/* harmony export */   POPUP_LOADED: () => (/* binding */ POPUP_LOADED),\n/* harmony export */   POPUP_RESULT: () => (/* binding */ POPUP_RESULT),\n/* harmony export */   PROVIDER_JRPC_METHODS: () => (/* binding */ PROVIDER_JRPC_METHODS),\n/* harmony export */   PROVIDER_NOTIFICATIONS: () => (/* binding */ PROVIDER_NOTIFICATIONS),\n/* harmony export */   PopupHandler: () => (/* binding */ PopupHandler),\n/* harmony export */   PopupStoreChannel: () => (/* binding */ PopupStoreChannel),\n/* harmony export */   PopupWithBcHandler: () => (/* binding */ PopupWithBcHandler),\n/* harmony export */   RedirectHandler: () => (/* binding */ RedirectHandler),\n/* harmony export */   SETUP_COMPLETE: () => (/* binding */ SETUP_COMPLETE),\n/* harmony export */   StreamWindow: () => (/* binding */ StreamWindow),\n/* harmony export */   TRANSACTION_TYPES: () => (/* binding */ TRANSACTION_TYPES),\n/* harmony export */   TX_EVENTS: () => (/* binding */ TX_EVENTS),\n/* harmony export */   TransactionStatus: () => (/* binding */ TransactionStatus),\n/* harmony export */   UserError: () => (/* binding */ UserError),\n/* harmony export */   addressSlicer: () => (/* binding */ addressSlicer),\n/* harmony export */   broadcastChannelOptions: () => (/* binding */ broadcastChannelOptions),\n/* harmony export */   concatSig: () => (/* binding */ concatSig),\n/* harmony export */   createChangeProviderMiddlewareMiddleware: () => (/* binding */ createChangeProviderMiddlewareMiddleware),\n/* harmony export */   createCommunicationMiddleware: () => (/* binding */ createCommunicationMiddleware),\n/* harmony export */   createEventEmitterProxy: () => (/* binding */ createEventEmitterProxy),\n/* harmony export */   createFetchConfigFromReq: () => (/* binding */ createFetchConfigFromReq),\n/* harmony export */   createFetchMiddleware: () => (/* binding */ createFetchMiddleware),\n/* harmony export */   createGenericJRPCMiddleware: () => (/* binding */ createGenericJRPCMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createOriginMiddleware: () => (/* binding */ createOriginMiddleware),\n/* harmony export */   createRandomId: () => (/* binding */ createRandomId),\n/* harmony export */   createSwappableProxy: () => (/* binding */ createSwappableProxy),\n/* harmony export */   createTopupMiddleware: () => (/* binding */ createTopupMiddleware),\n/* harmony export */   formatDate: () => (/* binding */ formatDate),\n/* harmony export */   formatSmallNumbers: () => (/* binding */ formatSmallNumbers),\n/* harmony export */   formatTime: () => (/* binding */ formatTime),\n/* harmony export */   getCustomDeviceInfo: () => (/* binding */ getCustomDeviceInfo),\n/* harmony export */   getHeaders: () => (/* binding */ getHeaders),\n/* harmony export */   getPopupFeatures: () => (/* binding */ getPopupFeatures),\n/* harmony export */   getTxStatusText: () => (/* binding */ getTxStatusText),\n/* harmony export */   handleRedirectParameters: () => (/* binding */ handleRedirectParameters),\n/* harmony export */   hashMessage: () => (/* binding */ hashMessage),\n/* harmony export */   intToHex: () => (/* binding */ intToHex),\n/* harmony export */   padWithZeroes: () => (/* binding */ padWithZeroes),\n/* harmony export */   providerAsMiddleware: () => (/* binding */ providerAsMiddleware),\n/* harmony export */   providerFromEngine: () => (/* binding */ providerFromEngine),\n/* harmony export */   providerFromMiddleware: () => (/* binding */ providerFromMiddleware),\n/* harmony export */   randomId: () => (/* binding */ randomId),\n/* harmony export */   signMessage: () => (/* binding */ signMessage),\n/* harmony export */   significantDigits: () => (/* binding */ significantDigits),\n/* harmony export */   sleep: () => (/* binding */ sleep),\n/* harmony export */   timeout: () => (/* binding */ timeout$1),\n/* harmony export */   transactionMatchesNetwork: () => (/* binding */ transactionMatchesNetwork)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! eth-rpc-errors */ \"(ssr)/./node_modules/eth-rpc-errors/dist/index.js\");\n/* harmony import */ var json_rpc_random_id__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! json-rpc-random-id */ \"(ssr)/./node_modules/json-rpc-random-id/index.js\");\n/* harmony import */ var json_rpc_random_id__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(json_rpc_random_id__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @ethereumjs/util */ \"(ssr)/./node_modules/@ethereumjs/util/dist/index.js\");\n/* harmony import */ var _ethereumjs_util__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var bignumber_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! bignumber.js */ \"(ssr)/./node_modules/bignumber.js/bignumber.mjs\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @toruslabs/broadcast-channel */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! lodash/cloneDeep */ \"(ssr)/./node_modules/lodash/cloneDeep.js\");\n/* harmony import */ var lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9__);\n/* harmony import */ var lodash_pickBy__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! lodash/pickBy */ \"(ssr)/./node_modules/lodash/pickBy.js\");\n/* harmony import */ var lodash_pickBy__WEBPACK_IMPORTED_MODULE_10___default = /*#__PURE__*/__webpack_require__.n(lodash_pickBy__WEBPACK_IMPORTED_MODULE_10__);\n/* harmony import */ var lodash_omitBy__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! lodash/omitBy */ \"(ssr)/./node_modules/lodash/omitBy.js\");\n/* harmony import */ var lodash_omitBy__WEBPACK_IMPORTED_MODULE_11___default = /*#__PURE__*/__webpack_require__.n(lodash_omitBy__WEBPACK_IMPORTED_MODULE_11__);\n\n\n\n\n\n\n\n\n\n\n\n\n\nfunction ownKeys$3(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$3(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys$3(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$3(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n/**\n * Controller class that provides configuration, state management, and subscriptions\n */ class BaseController extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.SafeEventEmitter {\n    /**\n   * Creates a BaseController instance. Both initial state and initial\n   * configuration options are merged with defaults upon initialization.\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */ constructor(_ref){\n        let { config = {}, state = {} } = _ref;\n        super();\n        // Use assign since generics can't be spread: https://git.io/vpRhY\n        /**\n     * Default options used to configure this controller\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"defaultConfig\", {});\n        /**\n     * Default state set on this controller\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"defaultState\", {});\n        /**\n     * Determines if listeners are notified of state changes\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"disabled\", false);\n        /**\n     * Name of this controller used during composition\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"name\", \"BaseController\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"initialConfig\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"initialState\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"internalConfig\", this.defaultConfig);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"internalState\", this.defaultState);\n        this.initialState = state;\n        this.initialConfig = config;\n    }\n    /**\n   * Retrieves current controller configuration options\n   *\n   * @returns - Current configuration\n   */ get config() {\n        return this.internalConfig;\n    }\n    /**\n   * Retrieves current controller state\n   *\n   * @returns - Current state\n   */ get state() {\n        return this.internalState;\n    }\n    /**\n   * Updates controller configuration\n   *\n   * @param config - New configuration options\n   * @param overwrite - Overwrite config instead of merging\n   * @param fullUpdate - Boolean that defines if the update is partial or not\n   */ configure(config) {\n        let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        let fullUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n        if (fullUpdate) {\n            this.internalConfig = overwrite ? config : Object.assign(this.internalConfig, config);\n            for(const key in this.internalConfig){\n                if (typeof this.internalConfig[key] !== \"undefined\") {\n                    this[key] = this.internalConfig[key];\n                }\n            }\n        } else {\n            for(const key in config){\n                /* istanbul ignore else */ if (typeof this.internalConfig[key] !== \"undefined\") {\n                    this.internalConfig[key] = config[key];\n                    this[key] = config[key];\n                }\n            }\n        }\n    }\n    /**\n   * Updates controller state\n   *\n   * @param state - New state\n   * @param overwrite - Overwrite state instead of merging\n   */ update(state) {\n        let overwrite = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        this.internalState = overwrite ? _objectSpread$3({}, state) : _objectSpread$3(_objectSpread$3({}, this.internalState), state);\n        this.emit(\"store\", this.internalState);\n    }\n    /**\n   * Enables the controller. This sets each config option as a member\n   * variable on this instance and triggers any defined setters. This\n   * also sets initial state and triggers any listeners.\n   *\n   * @returns - This controller instance\n   */ initialize() {\n        this.internalState = this.defaultState;\n        this.internalConfig = this.defaultConfig;\n        this.configure(this.initialConfig);\n        this.update(this.initialState);\n        return this;\n    }\n}\nconst sec = 1000;\nconst calculateSum = (accumulator, currentValue)=>accumulator + currentValue;\nconst blockTrackerEvents = [\n    \"sync\",\n    \"latest\"\n];\nclass BaseBlockTracker extends BaseController {\n    constructor(_ref){\n        let { config = {}, state = {} } = _ref;\n        super({\n            config,\n            state\n        });\n        // config\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"name\", \"BaseBlockTracker\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_blockResetTimeout\", void 0);\n        this.defaultState = {\n            _currentBlock: {\n                idempotencyKey: \"\"\n            },\n            _isRunning: false\n        };\n        this.defaultConfig = {\n            blockResetDuration: 20 * sec\n        };\n        this.initialize();\n        // bind functions for internal use\n        this._onNewListener = this._onNewListener.bind(this);\n        this._onRemoveListener = this._onRemoveListener.bind(this);\n        this._resetCurrentBlock = this._resetCurrentBlock.bind(this);\n        // listen for handler changes\n        this._setupInternalEvents();\n    }\n    isRunning() {\n        return this.state._isRunning;\n    }\n    getCurrentBlock() {\n        return this.state._currentBlock;\n    }\n    async getLatestBlock() {\n        // return if available\n        if (this.state._currentBlock) {\n            return this.state._currentBlock;\n        }\n        // wait for a new latest block\n        const latestBlock = await new Promise((resolve)=>{\n            this.once(\"latest\", (newState)=>{\n                if (newState._currentBlock) {\n                    resolve(newState._currentBlock);\n                }\n            });\n        });\n        // return newly set current block\n        return latestBlock;\n    }\n    // dont allow module consumer to remove our internal event listeners\n    removeAllListeners(eventName) {\n        if (eventName) {\n            super.removeAllListeners(eventName);\n        } else {\n            super.removeAllListeners();\n        }\n        // re-add internal events\n        this._setupInternalEvents();\n        // trigger stop check just in case\n        this._onRemoveListener();\n        return this;\n    }\n    /**\n   * To be implemented in subclass.\n   */ _start() {\n    // default behavior is noop\n    }\n    /**\n   * To be implemented in subclass.\n   */ _end() {\n    // default behavior is noop\n    }\n    _newPotentialLatest(newBlock) {\n        const currentBlock = this.state._currentBlock;\n        // only update if blok number is higher\n        if (currentBlock && newBlock.idempotencyKey === currentBlock.idempotencyKey) {\n            return;\n        }\n        this._setCurrentBlock(newBlock);\n    }\n    _setupInternalEvents() {\n        // first remove listeners for idempotency\n        this.removeListener(\"newListener\", this._onNewListener);\n        this.removeListener(\"removeListener\", this._onRemoveListener);\n        // then add them\n        this.on(\"removeListener\", this._onRemoveListener);\n        this.on(\"newListener\", this._onNewListener);\n    }\n    _onNewListener() {\n        this._maybeStart();\n    }\n    _onRemoveListener() {\n        // `removeListener` is called *after* the listener is removed\n        if (this._getBlockTrackerEventCount() > 0) {\n            return;\n        }\n        this._maybeEnd();\n    }\n    _maybeStart() {\n        if (this.state._isRunning) {\n            return;\n        }\n        this.state._isRunning = true;\n        // cancel setting latest block to stale\n        this._cancelBlockResetTimeout();\n        this._start();\n    }\n    _maybeEnd() {\n        if (!this.state._isRunning) {\n            return;\n        }\n        this.state._isRunning = false;\n        this._setupBlockResetTimeout();\n        this._end();\n    }\n    _getBlockTrackerEventCount() {\n        return blockTrackerEvents.map((eventName)=>this.listenerCount(eventName)).reduce(calculateSum);\n    }\n    _setCurrentBlock(newBlock) {\n        const oldBlock = this.state._currentBlock;\n        this.update({\n            _currentBlock: newBlock\n        });\n        this.emit(\"latest\", newBlock);\n        this.emit(\"sync\", {\n            oldBlock,\n            newBlock\n        });\n    }\n    _setupBlockResetTimeout() {\n        // clear any existing timeout\n        this._cancelBlockResetTimeout();\n        // clear latest block when stale\n        this._blockResetTimeout = setTimeout(this._resetCurrentBlock, this.config.blockResetDuration);\n        // nodejs - dont hold process open\n        if (this._blockResetTimeout.unref) {\n            this._blockResetTimeout.unref();\n        }\n    }\n    _cancelBlockResetTimeout() {\n        if (this._blockResetTimeout) {\n            clearTimeout(this._blockResetTimeout);\n        }\n    }\n    _resetCurrentBlock() {\n        this.update({\n            _currentBlock: {\n                idempotencyKey: \"\"\n            }\n        });\n    }\n}\nconst filterNoop = ()=>true;\nconst internalEvents = [\n    \"newListener\",\n    \"removeListener\"\n];\nconst externalEventFilter = (name)=>!internalEvents.includes(name);\nfunction getRawListeners(eventEmitter, name) {\n    // prefer native\n    return typeof eventEmitter.rawListeners !== \"undefined\" ? eventEmitter.rawListeners(name) : eventEmitter.listeners(name);\n}\nfunction createEventEmitterProxy(initialTarget, opts) {\n    // parse options\n    const finalOpts = opts || {};\n    let eventFilter = finalOpts.eventFilter || filterNoop;\n    if (typeof eventFilter === \"string\" && eventFilter === \"skipInternal\") eventFilter = externalEventFilter;\n    if (typeof eventFilter !== \"function\") throw new Error(\"createEventEmitterProxy - Invalid eventFilter\");\n    let target = initialTarget;\n    let setTarget = (newTarget)=>{\n        const oldTarget = target;\n        target = newTarget;\n        oldTarget.eventNames().filter(eventFilter).forEach((name)=>{\n            getRawListeners(oldTarget, name).forEach((handler)=>newTarget.on(name, handler));\n        });\n        // remove old listeners\n        oldTarget.removeAllListeners();\n    };\n    const proxy = new Proxy({}, {\n        get: (_, name)=>{\n            // override `setTarget` access\n            if (name === \"setTarget\") return setTarget;\n            return target[name];\n        },\n        set: (_, name, value)=>{\n            // allow `setTarget` overrides\n            if (name === \"setTarget\") {\n                setTarget = value;\n                return true;\n            }\n            target[name] = value;\n            return true;\n        }\n    });\n    return proxy;\n}\nfunction createSwappableProxy(initialTarget) {\n    let target = initialTarget;\n    let setTarget = (newTarget)=>{\n        target = newTarget;\n    };\n    const proxy = new Proxy({}, {\n        get: (_, name)=>{\n            // override `setTarget` access\n            if (name === \"setTarget\") return setTarget;\n            return target[name];\n        },\n        set: (_, name, value)=>{\n            // allow `setTarget` overrides\n            if (name === \"setTarget\") {\n                setTarget = value;\n                return true;\n            }\n            target[name] = value;\n            return true;\n        }\n    });\n    return proxy;\n}\n// every ten minutes\nconst POLLING_INTERVAL = 600000;\nclass BaseCurrencyController extends BaseController {\n    constructor(_ref){\n        let { config = {}, state } = _ref;\n        super({\n            config,\n            state\n        });\n        this.defaultState = {\n            currentCurrency: \"usd\",\n            conversionRate: 0,\n            conversionDate: \"N/A\",\n            nativeCurrency: \"ETH\"\n        };\n        this.defaultConfig = {\n            pollInterval: POLLING_INTERVAL\n        };\n        this.initialize();\n    }\n    //\n    // PUBLIC METHODS\n    //\n    getNativeCurrency() {\n        return this.state.nativeCurrency;\n    }\n    setNativeCurrency(nativeCurrency) {\n        this.update({\n            nativeCurrency,\n            ticker: nativeCurrency\n        });\n    }\n    getCurrentCurrency() {\n        return this.state.currentCurrency;\n    }\n    setCurrentCurrency(currentCurrency) {\n        this.update({\n            currentCurrency\n        });\n    }\n    /**\n   * A getter for the conversionRate property\n   *\n   * @returns The conversion rate from ETH to the selected currency.\n   *\n   */ getConversionRate() {\n        return this.state.conversionRate;\n    }\n    setConversionRate(conversionRate) {\n        this.update({\n            conversionRate\n        });\n    }\n    /**\n   * A getter for the conversionDate property\n   *\n   * @returns The date at which the conversion rate was set. Expressed in milliseconds since midnight of\n   * January 1, 1970\n   *\n   */ getConversionDate() {\n        return this.state.conversionDate;\n    }\n    setConversionDate(conversionDate) {\n        this.update({\n            conversionDate\n        });\n    }\n}\nfunction ownKeys$2(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys$2(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nconst createRandomId = json_rpc_random_id__WEBPACK_IMPORTED_MODULE_3___default()();\nfunction providerFromEngine(engine) {\n    const provider = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.SafeEventEmitter();\n    // handle both rpc send methods\n    provider.sendAsync = async (req)=>{\n        const res = await engine.handle(req);\n        if (res.error) {\n            var _res$error, _res$error2;\n            const err = (0,eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.serializeError)(res.error, {\n                fallbackError: {\n                    message: ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.message) || res.error.toString(),\n                    code: ((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.code) || -32603\n                }\n            });\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.ethErrors.rpc.internal(err);\n        }\n        return res.result;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    provider.send = (req, callback)=>{\n        if (typeof callback !== \"function\") {\n            throw new Error('Must provide callback to \"send\" method.');\n        }\n        engine.handle(req, callback);\n    };\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            provider.emit(\"data\", null, message);\n        });\n    }\n    provider.request = async (args)=>{\n        const req = _objectSpread$2(_objectSpread$2({}, args), {}, {\n            id: createRandomId(),\n            jsonrpc: \"2.0\"\n        });\n        const res = await provider.sendAsync(req);\n        return res;\n    };\n    return provider;\n}\nfunction providerFromMiddleware(middleware) {\n    const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.JRPCEngine();\n    engine.push(middleware);\n    const provider = providerFromEngine(engine);\n    return provider;\n}\nfunction providerAsMiddleware(provider) {\n    return async (req, res, _next, end)=>{\n        // send request to provider\n        try {\n            const providerRes = await provider.sendAsync(req);\n            res.result = providerRes;\n            return end();\n        } catch (error) {\n            return end(error.message);\n        }\n    };\n}\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n    height: 660,\n    width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n    height: 740,\n    width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n    height: 700,\n    width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n    height: 700,\n    width: 450\n};\nconst POPUP_LOADED = \"popup_loaded\";\nconst POPUP_RESULT = \"popup_result\";\nconst SETUP_COMPLETE = \"setup_complete\";\nconst ACTIVITY_ACTION_ALL = \"walletActivity.allTransactions\";\nconst ACTIVITY_ACTION_SEND = \"walletActivity.send\";\nconst ACTIVITY_ACTION_BURN = \"walletActivity.burn\";\nconst ACTIVITY_ACTION_RECEIVE = \"walletActivity.receive\";\nconst ACTIVITY_ACTION_TOPUP = \"walletActivity.topup\";\nconst ACTIVITY_PERIOD_ALL = \"walletActivity.all\";\nconst ACTIVITY_PERIOD_WEEK_ONE = \"walletActivity.lastOneWeek\";\nconst ACTIVITY_PERIOD_MONTH_ONE = \"walletActivity.lastOneMonth\";\nconst ACTIVITY_PERIOD_MONTH_SIX = \"walletActivity.lastSixMonts\";\nconst ACTIVITY_STATUS_SUCCESSFUL = \"walletActivity.successful\";\nconst ACTIVITY_STATUS_UNSUCCESSFUL = \"walletActivity.unsuccessful\";\nconst ACTIVITY_STATUS_PENDING = \"walletActivity.pending\";\nconst ACTIVITY_STATUS_CANCELLED = \"walletActivity.cancelled\";\nconst ACTIVITY_STATUS_CANCELLING = \"walletActivity.cancelling\";\nconst COMMUNICATION_NOTIFICATIONS = {\n    IFRAME_STATUS: \"iframe_status\",\n    // Tell embed to create the window\n    CREATE_WINDOW: \"create_window\",\n    // Tell embed to close the window\n    CLOSE_WINDOW: \"close_window\",\n    USER_LOGGED_IN: \"user_logged_in\",\n    USER_LOGGED_OUT: \"user_logged_out\"\n};\nconst COMMUNICATION_JRPC_METHODS = {\n    LOGOUT: \"logout\",\n    WALLET_INSTANCE_ID: \"wallet_instance_id\",\n    USER_INFO: \"user_info\",\n    SET_PROVIDER: \"set_provider\",\n    TOPUP: \"topup\",\n    IFRAME_STATUS: \"iframe_status\",\n    // embed has opened the window as requested\n    OPENED_WINDOW: \"opened_window\",\n    // user has closed the window from embed's side\n    CLOSED_WINDOW: \"closed_window\",\n    GET_PROVIDER_STATE: \"get_provider_state\",\n    LOGIN_WITH_PRIVATE_KEY: \"login_with_private_key\"\n};\nconst PROVIDER_JRPC_METHODS = {\n    GET_PROVIDER_STATE: \"wallet_get_provider_state\"\n};\nconst PROVIDER_NOTIFICATIONS = {\n    ACCOUNTS_CHANGED: \"wallet_accounts_changed\",\n    CHAIN_CHANGED: \"wallet_chain_changed\",\n    UNLOCK_STATE_CHANGED: \"wallet_unlock_state_changed\"\n};\nconst BROADCAST_CHANNELS = {\n    REDIRECT_CHANNEL: \"redirect_channel\",\n    PROVIDER_CHANGE_CHANNEL: \"torus_provider_change_channel\",\n    TRANSACTION_CHANNEL: \"torus_channel\",\n    MESSAGE_CHANNEL: \"torus_message_channel\",\n    WALLET_LOGOUT_CHANNEL: \"wallet_logout_channel\",\n    WALLET_SELECTED_ADDRESS_CHANNEL: \"wallet_selected_address_channel\",\n    WALLET_NETWORK_CHANGE_CHANNEL: \"wallet_network_change_channel\",\n    WALLET_ACCOUNT_IMPORT_CHANNEL: \"wallet_account_import_channel\",\n    THEME_CHANGE: \"theme_change_channel\"\n};\nconst BROADCAST_CHANNELS_MSGS = {\n    LOGOUT: \"logout\",\n    ACCOUNT_IMPORTED: \"account_imported\",\n    SELECTED_ADDRESS_CHANGE: \"selected_address_change\",\n    NETWORK_CHANGE: \"network_change\",\n    SET_THEME: \"set_theme\"\n};\nfunction createChangeProviderMiddlewareMiddleware(_ref) {\n    let { changeProvider } = _ref;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== COMMUNICATION_JRPC_METHODS.SET_PROVIDER) return next();\n        if (!changeProvider) throw new Error(\"CommunicationMiddleware - opts.changeProvider not provided\");\n        response.result = await changeProvider(request);\n    });\n}\nfunction createTopupMiddleware(_ref2) {\n    let { topup } = _ref2;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== COMMUNICATION_JRPC_METHODS.TOPUP) return next();\n        if (!topup) throw new Error(\"CommunicationMiddleware - opts.topup not provided\");\n        response.result = await topup(request);\n    });\n}\nfunction createGenericJRPCMiddleware(targetMethod, handler) {\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.createAsyncMiddleware)(async (request, response, next)=>{\n        const { method } = request;\n        if (method !== targetMethod) return next();\n        if (!handler) throw new Error(`CommunicationMiddleware - ${targetMethod} not provided`);\n        const result = await handler(request);\n        if (!result) {\n            return next();\n        }\n        response.result = result;\n        return undefined;\n    });\n}\nfunction createCommunicationMiddleware(providerHandlers) {\n    const { getUserInfo, getWalletInstanceId, topup, logout, changeProvider, setIFrameStatus, handleWindowRpc, getProviderState, loginWithPrivateKey } = providerHandlers;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.mergeMiddleware)([\n        createChangeProviderMiddlewareMiddleware({\n            changeProvider\n        }),\n        createTopupMiddleware({\n            topup\n        }),\n        (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.createScaffoldMiddleware)({\n            [COMMUNICATION_JRPC_METHODS.LOGOUT]: logout,\n            [COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID]: getWalletInstanceId,\n            [COMMUNICATION_JRPC_METHODS.USER_INFO]: getUserInfo,\n            [COMMUNICATION_JRPC_METHODS.IFRAME_STATUS]: setIFrameStatus,\n            // Do this in the orchestrator because communicationWindowManager needs to be passed into PopupHandlers\n            [COMMUNICATION_JRPC_METHODS.OPENED_WINDOW]: handleWindowRpc,\n            [COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW]: handleWindowRpc,\n            [COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE]: getProviderState\n        }),\n        createGenericJRPCMiddleware(COMMUNICATION_JRPC_METHODS.LOGIN_WITH_PRIVATE_KEY, loginWithPrivateKey)\n    ]);\n}\nclass BaseEmbedController extends BaseController {\n    constructor(_ref){\n        let { config = {}, state } = _ref;\n        super({\n            config,\n            state\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_communicationProviderProxy\", void 0);\n        this.defaultState = {\n            buttonPosition: \"bottom-right\",\n            isIFrameFullScreen: true,\n            apiKey: \"torus-default\",\n            oauthModalVisibility: false,\n            loginInProgress: false,\n            dappMetadata: {\n                name: \"\",\n                icon: \"\"\n            }\n        };\n        this.initialize();\n    }\n    /**\n   * Called by orchestrator once while initializing the class\n   * @param handlers - JRPC handlers for provider\n   * @returns - provider - Returns the providerProxy\n   */ initializeProvider(handlers) {\n        const engine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.JRPCEngine();\n        const communicationMiddleware = createCommunicationMiddleware(handlers);\n        engine.push(communicationMiddleware);\n        const communicationProvider = providerFromEngine(engine);\n        this.setCommunicationProvider(communicationProvider);\n    }\n    setCommunicationProvider(communicationProvider) {\n        if (this._communicationProviderProxy) {\n            // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n            // @ts-ignore\n            this._communicationProviderProxy.setTarget(communicationProvider);\n        } else {\n            this._communicationProviderProxy = createSwappableProxy(communicationProvider);\n        }\n    }\n}\nclass CommunicationWindowManager extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.SafeEventEmitter {\n    constructor(){\n        super(...arguments);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"handleWindowRpc\", (request, response, next, end)=>{\n            const { method, params } = request;\n            if (method === COMMUNICATION_JRPC_METHODS.OPENED_WINDOW) {\n                const { windowId } = params;\n                // I've been informed that a window has been opened\n                this.emit(`${windowId}:opened`);\n                response.result = true;\n                end();\n            } else if (method === COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW) {\n                const { windowId } = params;\n                // I've been informed that a window has been closed\n                this.emit(`${windowId}:closed`);\n                response.result = true;\n                end();\n            } else {\n                next();\n            }\n        });\n    }\n}\nconst LOGIN_PROVIDER = {\n    GOOGLE: \"google\",\n    FACEBOOK: \"facebook\",\n    REDDIT: \"reddit\",\n    DISCORD: \"discord\",\n    TWITCH: \"twitch\",\n    APPLE: \"apple\",\n    LINE: \"line\",\n    GITHUB: \"github\",\n    KAKAO: \"kakao\",\n    LINKEDIN: \"linkedin\",\n    TWITTER: \"twitter\",\n    WEIBO: \"weibo\",\n    WECHAT: \"wechat\",\n    EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst PAYMENT_PROVIDER = {\n    MOONPAY: \"moonpay\",\n    WYRE: \"wyre\",\n    RAMPNETWORK: \"rampnetwork\",\n    XANPOOL: \"xanpool\",\n    MERCURYO: \"mercuryo\",\n    TRANSAK: \"transak\"\n};\nconst getTxStatusText = (txStatus)=>{\n    switch(txStatus){\n        case \"rejected\":\n        case \"unapproved\":\n        case \"failed\":\n            return ACTIVITY_STATUS_UNSUCCESSFUL;\n        case \"confirmed\":\n            return ACTIVITY_STATUS_SUCCESSFUL;\n        case \"submitted\":\n            return ACTIVITY_STATUS_PENDING;\n        case \"cancelled\":\n            return ACTIVITY_STATUS_CANCELLED;\n        default:\n            return \"\";\n    }\n};\n/**\n * General utility functions\n */ function intToHex(i) {\n    const hex = i.toString(16);\n    return `0x${hex}`;\n}\n/**\n * Returns a random number. Don't use for cryptographic purposes.\n * @returns a random number\n */ const randomId = ()=>Math.random().toString(36).slice(2);\n/**\n * Pads the front of the given hex string with zeroes until it reaches the\n * target length. If the input string is already longer than or equal to the\n * target length, it is returned unmodified.\n *\n * If the input string is \"0x\"-prefixed or not a hex string, an error will be\n * thrown.\n *\n * @param hexString - The hexadecimal string to pad with zeroes.\n * @param targetLength - The target length of the hexadecimal string.\n * @returns The input string front-padded with zeroes, or the original string\n * if it was already greater than or equal to to the target length.\n */ function padWithZeroes(hexString, targetLength) {\n    if (hexString !== \"\" && !/^[a-f0-9]+$/iu.test(hexString)) {\n        throw new Error(`Expected an unprefixed hex string. Received: ${hexString}`);\n    }\n    if (targetLength < 0) {\n        throw new Error(`Expected a non-negative integer target length. Received: ${targetLength}`);\n    }\n    return String.prototype.padStart.call(hexString, targetLength, \"0\");\n}\n/**\n * Concatenate an extended ECDSA signature into a hex string.\n *\n * @param v - The 'v' portion of the signature.\n * @param r - The 'r' portion of the signature.\n * @param s - The 's' portion of the signature.\n * @returns The concatenated ECDSA signature.\n */ function concatSig(v, r, s) {\n    const rSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.fromSigned)(r);\n    const sSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.fromSigned)(s);\n    const vSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.bufferToBigInt)(v);\n    const rStr = padWithZeroes((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.toUnsigned)(rSig).toString(\"hex\"), 64);\n    const sStr = padWithZeroes((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.toUnsigned)(sSig).toString(\"hex\"), 64);\n    const vStr = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.stripHexPrefix)((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.bigIntToHex)(vSig));\n    return (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.addHexPrefix)(rStr.concat(sStr, vStr));\n}\nfunction timeout$1(duration) {\n    return new Promise((resolve)=>{\n        const timeoutRef = window.setTimeout(()=>{\n            resolve();\n            window.clearTimeout(timeoutRef);\n        }, duration);\n    });\n}\nconst getHeaders = (jwt)=>{\n    return {\n        headers: {\n            Authorization: `Bearer ${jwt}`,\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n};\n/**\n * Text/number formatting utilities\n */ const formatSmallNumbers = function(number) {\n    let currency = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"usd\";\n    let noTilde = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    const finalNumber = bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.isBigNumber(number) ? number.toNumber() : number;\n    if (!Number.isFinite(finalNumber)) return \"\";\n    const value = currency.toLowerCase() === \"usd\" ? parseFloat(Number(finalNumber).toFixed(2)) : parseFloat(Number(finalNumber).toFixed(5));\n    const tilde = value > 0 ? \"~ \" : \"\";\n    return `${currency.toLowerCase() === \"usd\" || noTilde ? \"\" : tilde}${Number(value)} ${currency.toUpperCase()}`;\n};\nconst addressSlicer = function(address) {\n    let sliceLength = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 5;\n    if (address.length < 11) {\n        return address;\n    }\n    if (typeof address !== \"string\") return \"\";\n    return `${address.slice(0, sliceLength)}...${address.slice(-sliceLength)}`;\n};\nconst significantDigits = function(number) {\n    let perc = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    let length_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 2;\n    let input = !bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber.isBigNumber(number) ? new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(number) : number;\n    if (input.isZero()) return input;\n    if (perc) {\n        input = input.times(new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(100));\n    }\n    let depth;\n    if (input.gte(new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(1))) {\n        depth = length_;\n    } else {\n        depth = length_ - 1 + Math.ceil(Math.log10(new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(\"1\").div(input).toNumber()));\n    }\n    const shift = new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(10).pow(new bignumber_js__WEBPACK_IMPORTED_MODULE_5__.BigNumber(depth));\n    const roundedNumber = Math.round(shift.times(input).toNumber()) / shift.toNumber();\n    return roundedNumber;\n};\nconst formatDate = (inputDate)=>{\n    const monthList = [\n        \"Jan\",\n        \"Feb\",\n        \"Mar\",\n        \"Apr\",\n        \"May\",\n        \"Jun\",\n        \"Jul\",\n        \"Aug\",\n        \"Sep\",\n        \"Oct\",\n        \"Nov\",\n        \"Dec\"\n    ];\n    const date = new Date(inputDate);\n    const day = date.getDate();\n    const month = monthList[date.getMonth()];\n    const year = date.getFullYear();\n    return `${day} ${month} ${year}`;\n};\nconst formatTime = (time)=>{\n    return new Date(time).toTimeString().slice(0, 8);\n};\n/**\n * Network utilities\n */ const transactionMatchesNetwork = (transaction, chainId)=>{\n    if (typeof transaction.chainId !== \"undefined\") {\n        return transaction.chainId === chainId;\n    }\n    return false;\n};\n/**\n * Signing utils\n */ const hashMessage = (message)=>{\n    const bufferedMessage = Buffer.from(message, \"utf8\");\n    const el = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.hashPersonalMessage)(bufferedMessage);\n    return el;\n};\nconst signMessage = (privateKey, data)=>{\n    const privKey = Buffer.from(privateKey, \"hex\");\n    const message = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.stripHexPrefix)(data);\n    const msgSig = (0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.ecsign)(Buffer.from(message, \"hex\"), privKey);\n    const rawMsgSig = concatSig((0,_ethereumjs_util__WEBPACK_IMPORTED_MODULE_4__.bigIntToBuffer)(msgSig.v), msgSig.r, msgSig.s);\n    return rawMsgSig;\n};\n/**\n * popup handler utils\n */ function getPopupFeatures(_ref) {\n    let { width: w, height: h } = _ref;\n    // Fixes dual-screen position                             Most browsers      Firefox\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n    const systemZoom = 1; // No reliable estimate\n    const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n    const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n    const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n    return features;\n}\nconst broadcastChannelOptions = {\n    // type: 'localstorage', // (optional) enforce a type, oneOf['native', 'idb', 'localstorage', 'node']\n    webWorkerSupport: false // (optional) set this to false if you know that your channel will never be used in a WebWorker (increases performance)\n};\nfunction getCustomDeviceInfo() {\n    var _navigator;\n    if ((_navigator = navigator) !== null && _navigator !== void 0 && _navigator.brave) {\n        return {\n            browser: \"Brave\"\n        };\n    }\n}\nclass UserError extends Error {\n}\nconst handleRedirectParameters = (hash, queryParameters)=>{\n    const hashParameters = {};\n    const hashUrl = new URL(`${window.location.origin}/?${hash.slice(1)}`);\n    hashUrl.searchParams.forEach((value, key)=>{\n        hashParameters[key] = value;\n    });\n    let instanceParameters = {};\n    let error = \"\";\n    if (!queryParameters.windowId) {\n        if (Object.keys(hashParameters).length > 0 && hashParameters.state) {\n            instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(hashParameters.state)))) || {};\n            error = hashParameters.error_description || hashParameters.error || error;\n        } else if (Object.keys(queryParameters).length > 0 && queryParameters.state) {\n            instanceParameters = JSON.parse(window.atob(decodeURIComponent(decodeURIComponent(queryParameters.state)))) || {};\n            if (queryParameters.error) error = queryParameters.error;\n        }\n    }\n    return {\n        error,\n        instanceParameters,\n        hashParameters\n    };\n};\nfunction sleep(ms) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, ms);\n    });\n}\nclass BaseKeyringController extends BaseController {\n    constructor(_ref){\n        var _state$wallets;\n        let { config = {}, state } = _ref;\n        super({\n            config,\n            state\n        });\n        this.defaultState = {\n            wallets: (_state$wallets = state.wallets) !== null && _state$wallets !== void 0 ? _state$wallets : []\n        };\n        this.initialize();\n    }\n    // for signing auth message\n    signAuthMessage(address, message) {\n        const keyring = this.state.wallets.find((x)=>x.address === address);\n        if (!keyring) {\n            throw new Error(\"key does not exist\");\n        }\n        const hashedMessage = hashMessage(message).toString(\"hex\");\n        const rawMessageSig = signMessage(keyring.privateKey, hashedMessage);\n        return rawMessageSig;\n    }\n}\nconst RETRIABLE_ERRORS = [\n    // ignore server overload errors\n    \"Gateway timeout\",\n    \"ETIMEDOUT\",\n    // ignore server sent html error pages\n    // or truncated json responses\n    \"failed to parse response body\",\n    // ignore errors where http req failed to establish\n    \"Failed to fetch\"\n];\nfunction checkForHttpErrors(fetchRes) {\n    // check for errors\n    switch(fetchRes.status){\n        case 405:\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.ethErrors.rpc.methodNotFound();\n        case 418:\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.ethErrors.rpc.internal({\n                message: `Request is being rate limited.`\n            });\n        case 503:\n        case 504:\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.ethErrors.rpc.internal({\n                message: `Gateway timeout. The request took too long to process.` + `This can happen when querying over too wide a block range.`\n            });\n    }\n}\nfunction timeout(duration) {\n    return new Promise((resolve)=>{\n        setTimeout(resolve, duration);\n    });\n}\nfunction parseResponse(fetchRes, body) {\n    // check for error code\n    if (fetchRes.status !== 200) {\n        throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.ethErrors.rpc.internal({\n            message: `Non-200 status code: '${fetchRes.status}'`,\n            data: body\n        });\n    }\n    // check for rpc error\n    if (body.error) {\n        throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_2__.ethErrors.rpc.internal({\n            data: body.error\n        });\n    }\n    // return successful result\n    return body.result;\n}\nfunction createFetchConfigFromReq(_ref) {\n    let { req, rpcTarget, originHttpHeaderKey } = _ref;\n    const parsedUrl = new URL(rpcTarget);\n    // prepare payload\n    // copy only canonical json rpc properties\n    const payload = {\n        id: req.id,\n        jsonrpc: req.jsonrpc,\n        method: req.method,\n        params: req.params\n    };\n    // extract 'origin' parameter from request\n    const originDomain = req.origin;\n    // serialize request body\n    const serializedPayload = JSON.stringify(payload);\n    // configure fetch params\n    const fetchParams = {\n        method: \"POST\",\n        headers: {\n            Accept: \"application/json\",\n            \"Content-Type\": \"application/json\"\n        },\n        body: serializedPayload\n    };\n    // optional: add request origin as header\n    if (originHttpHeaderKey && originDomain) {\n        fetchParams.headers[originHttpHeaderKey] = originDomain;\n    }\n    return {\n        fetchUrl: parsedUrl.href,\n        fetchParams\n    };\n}\nfunction createFetchMiddleware(_ref2) {\n    let { rpcTarget, originHttpHeaderKey } = _ref2;\n    return (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_1__.createAsyncMiddleware)(async (req, res, _next)=>{\n        const { fetchUrl, fetchParams } = createFetchConfigFromReq({\n            req,\n            rpcTarget,\n            originHttpHeaderKey\n        });\n        // attempt request multiple times\n        const maxAttempts = 5;\n        const retryInterval = 1000;\n        for(let attempt = 0; attempt < maxAttempts; attempt++){\n            try {\n                const fetchRes = await fetch(fetchUrl, fetchParams);\n                // check for http errrors\n                checkForHttpErrors(fetchRes);\n                // parse response body\n                const fetchBody = await fetchRes.json();\n                const result = parseResponse(fetchRes, fetchBody);\n                // set result and exit retry loop\n                res.result = result;\n                return;\n            } catch (err) {\n                const errMsg = err.toString();\n                const isRetriable = RETRIABLE_ERRORS.some((phrase)=>errMsg.includes(phrase));\n                // re-throw error if not retriable\n                if (!isRetriable) {\n                    throw err;\n                }\n            }\n            // delay before retrying\n            await timeout(retryInterval);\n        }\n    });\n}\nfunction createLoggerMiddleware(options) {\n    return function loggerMiddleware(request, response, next) {\n        next((callback)=>{\n            if (response.error) {\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().warn(\"Error in RPC response:\\n\", response);\n            }\n            if (request.isTorusInternal) return;\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(`RPC (${options.origin}):`, request, \"->\", response);\n            callback();\n        });\n    };\n}\nfunction createOriginMiddleware(options) {\n    return function originMiddleware(request, _, next) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        request.origin = options.origin;\n        next();\n    };\n}\nclass BroadcastChannelHandler {\n    constructor(channelPrefix){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"bc\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"channel\", void 0);\n        const queryParameters = new URLSearchParams(window.location.search);\n        const instanceId = queryParameters.get(\"instanceId\");\n        this.channel = `${channelPrefix}_${instanceId}`;\n        this.bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(this.channel, broadcastChannelOptions);\n    }\n    getMessageFromChannel() {\n        return new Promise((resolve, reject)=>{\n            this.bc.addEventListener(\"message\", async (ev)=>{\n                this.bc.close();\n                if (ev.error) {\n                    reject(ev.error);\n                } else {\n                    resolve(ev.data);\n                }\n            });\n            this.bc.postMessage({\n                data: {\n                    type: POPUP_LOADED\n                }\n            });\n        });\n    }\n}\nclass StreamWindow extends BaseController {\n    constructor(_ref){\n        let { config, state = {} } = _ref;\n        super({\n            config,\n            state\n        });\n        // if window has been closed by users\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"closed\", false);\n        this.initialize();\n    }\n    async open() {\n        return new Promise((resolve, reject)=>{\n            const { communicationEngine, communicationWindowManager } = this.config;\n            let popupSuccess = false;\n            communicationWindowManager.once(`${this.state.windowId}:closed`, ()=>{\n                this.closed = true;\n            });\n            // Window is not open yet\n            if (!this.state.windowId) {\n                this.update({\n                    windowId: randomId()\n                });\n                communicationWindowManager.once(`${this.state.windowId}:opened`, ()=>{\n                    resolve(this);\n                });\n                // Tell the other party to create a window by prompting the user to click on something\n                communicationEngine.emit(\"notification\", {\n                    method: COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW,\n                    params: {\n                        windowId: this.state.windowId,\n                        url: this.state.url.href\n                    }\n                });\n            } else {\n                // Send this window with `windowId` the url to open via bc\n                const bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(this.state.windowId, broadcastChannelOptions);\n                bc.addEventListener(\"message\", async (ev)=>{\n                    try {\n                        loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(ev, `receiving data on channel: ${bc.name}`);\n                        const { error } = ev;\n                        if (error) {\n                            // Popup says some error. so, we say it's not really opened\n                            reject(new Error(error));\n                            return;\n                        }\n                        const { message } = ev.data;\n                        if (message === POPUP_LOADED) {\n                            popupSuccess = true;\n                            await bc.postMessage({\n                                data: {\n                                    url: this.state.url.href,\n                                    message: \"\" // No need of a msg\n                                }\n                            });\n                            resolve(this);\n                            bc.close();\n                        }\n                    } catch (error) {\n                        reject(error);\n                        bc.close();\n                        // Something went wrong. so, we close that window\n                        this.close();\n                    }\n                });\n                // We don't know if the other end is ready to receive this msg. So, we keep writing until it receives and sends back something\n                // we need backoff strategy\n                // we need to wait for first attempt to succeed/fail until the second attempt\n                // If we get 429, we need to wait for a while and then try again\n                const postMsg = async ()=>{\n                    // this never throws\n                    const localResponse = await bc.postMessage({\n                        data: {\n                            message: SETUP_COMPLETE\n                        }\n                    });\n                    return localResponse;\n                };\n                let currentDelay = bc.type === \"server\" ? 1000 : 200;\n                const recursiveFn = async ()=>{\n                    if (!popupSuccess && !this.closed) {\n                        const localResponse = await postMsg();\n                        if (bc.type === \"server\") {\n                            const serverResponse = localResponse;\n                            if (serverResponse.status >= 400) {\n                                // We need to wait for a while and then try again\n                                currentDelay = Math.round(currentDelay * 1.5);\n                            }\n                        }\n                        await sleep(currentDelay);\n                        await recursiveFn();\n                    }\n                };\n                recursiveFn();\n            }\n        });\n    }\n    close() {\n        const { communicationEngine } = this.config;\n        communicationEngine.emit(\"notification\", {\n            method: COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW,\n            params: {\n                windowId: this.state.windowId\n            }\n        });\n    }\n}\n/*\nScenarios:\n1. Open a normal popup window and no communication with it - Use PopupHandler\n2. Open a popup window and communicate with it - Use PopupWithBcHandler (can initiate communication by waiting for window to open or not)\n\n3. If window is already opened, pass in windowId to the popup handler.\n   This will establish communication with the popup window and sends it a new url to redirect to\n\n\nIf you're trying to open a window and it gets blocked (happens if you're in iframe or delay b/w click and opening window),\nStreamWindow is invoked and it writes in a channel to display a message to the user\n\nOnce user clicks on that modal/dialog, we pre-open the window and pass in the windowId (goes to 3)\n*/ /**\n * Handles popup window management.\n * For broadcast channel communication, use url with `instanceId` coded into state parameter.\n * This state parameter will be passed across redirects according to OAuth spec.\n */ class PopupHandler extends BaseController {\n    constructor(_ref){\n        let { config, state } = _ref;\n        super({\n            config,\n            state\n        });\n        // this.id = randomId()\n        // Add in dapp storage key to all popups as a hash parameter\n        this.defaultConfig = {\n            dappStorageKey: \"\",\n            features: getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW),\n            target: \"_blank\",\n            communicationEngine: null,\n            communicationWindowManager: null\n        };\n        this.defaultState = {\n            windowTimer: null,\n            window: null,\n            iClosedWindow: false,\n            windowId: \"\",\n            url: state.url\n        };\n        this.initialize();\n        this._setupTimer();\n    }\n    async open() {\n        // if window is already open\n        const { target, features, dappStorageKey, communicationEngine, communicationWindowManager } = this.config;\n        const { windowId, url } = this.state;\n        if (dappStorageKey) {\n            const urlHashParams = new URLSearchParams(url.hash.slice(1));\n            urlHashParams.append(\"dappStorageKey\", dappStorageKey);\n            url.hash = urlHashParams.toString();\n            this.update({\n                url\n            });\n        }\n        // No window has been pre-opened\n        if (!windowId) {\n            // try to open a window first\n            let localWindow = window.open(url.href, target, features);\n            if (!localWindow) {\n                // if it's blocked, open StreamWindow\n                localWindow = new StreamWindow({\n                    config: {\n                        communicationEngine,\n                        communicationWindowManager\n                    },\n                    state: {\n                        url\n                    }\n                });\n                localWindow.open();\n            }\n            this.update({\n                window: localWindow\n            });\n            return;\n        }\n        // A window has been pre-opened with a query parameter `windowId`\n        const localWindow = new StreamWindow({\n            config: {\n                communicationEngine,\n                communicationWindowManager\n            },\n            state: {\n                url,\n                windowId\n            }\n        });\n        this.update({\n            window: localWindow\n        });\n        await localWindow.open();\n    }\n    close() {\n        this.update({\n            iClosedWindow: true\n        });\n        const { window: window1 } = this.state;\n        if (window1) window1.close();\n    }\n    _setupTimer() {\n        const timer = window.setInterval(()=>{\n            const { window: window1, windowTimer, iClosedWindow } = this.state;\n            if (window1 && window1.closed) {\n                if (windowTimer) clearInterval(windowTimer);\n                if (!iClosedWindow) {\n                    this.emit(\"close\");\n                }\n                this.update({\n                    iClosedWindow: false,\n                    window: null\n                });\n            }\n            if (window1 === null && windowTimer) clearInterval(windowTimer);\n        }, 500);\n        this.update({\n            windowTimer: timer\n        });\n    }\n}\nclass PopupStoreChannel {\n    constructor(_ref){\n        let { instanceId, handleLogout, handleAccountImport, handleNetworkChange, handleSelectedAddressChange, handleThemeChange } = _ref;\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"handleLogout\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"handleAccountImport\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"handleNetworkChange\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"handleThemeChange\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"handleSelectedAddressChange\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"instanceId\", void 0);\n        this.instanceId = instanceId;\n        this.handleLogout = handleLogout;\n        this.handleAccountImport = handleAccountImport;\n        this.handleNetworkChange = handleNetworkChange;\n        this.handleSelectedAddressChange = handleSelectedAddressChange;\n        this.handleThemeChange = handleThemeChange;\n    }\n    setupStoreChannels() {\n        this.logoutChannel();\n        this.importAccountChannel();\n        this.networkChangeChannel();\n        this.selectedAddressChangeChannel();\n        this.themeChangedChannel();\n    }\n    logoutChannel() {\n        const logoutChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_LOGOUT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        logoutChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data;\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"received logout message\", ev);\n            if (!ev.error && ((_ev$data = ev.data) === null || _ev$data === void 0 ? void 0 : _ev$data.type) === BROADCAST_CHANNELS_MSGS.LOGOUT) {\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"Logging Out\");\n                this.handleLogout();\n            }\n        });\n    }\n    importAccountChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_ACCOUNT_IMPORT_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data2;\n            if (!ev.error && ((_ev$data2 = ev.data) === null || _ev$data2 === void 0 ? void 0 : _ev$data2.type) === BROADCAST_CHANNELS_MSGS.ACCOUNT_IMPORTED) {\n                var _ev$data3;\n                this.handleAccountImport((_ev$data3 = ev.data) === null || _ev$data3 === void 0 ? void 0 : _ev$data3.privKey);\n            }\n        });\n    }\n    networkChangeChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_NETWORK_CHANGE_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data4;\n            if (!ev.error && ((_ev$data4 = ev.data) === null || _ev$data4 === void 0 ? void 0 : _ev$data4.type) === BROADCAST_CHANNELS_MSGS.NETWORK_CHANGE) {\n                var _ev$data5;\n                this.handleNetworkChange((_ev$data5 = ev.data) === null || _ev$data5 === void 0 ? void 0 : _ev$data5.network);\n            }\n        });\n    }\n    themeChangedChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.THEME_CHANGE}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data6;\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info({\n                ev\n            });\n            if (!ev.error && ((_ev$data6 = ev.data) === null || _ev$data6 === void 0 ? void 0 : _ev$data6.type) === BROADCAST_CHANNELS_MSGS.SET_THEME) {\n                var _ev$data7;\n                this.handleThemeChange((_ev$data7 = ev.data) === null || _ev$data7 === void 0 ? void 0 : _ev$data7.theme);\n            }\n        });\n    }\n    selectedAddressChangeChannel() {\n        const walletAccountImportChannel = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.WALLET_SELECTED_ADDRESS_CHANNEL}_${this.instanceId}`, broadcastChannelOptions);\n        walletAccountImportChannel.addEventListener(\"message\", (ev)=>{\n            var _ev$data8;\n            if (!ev.error && ((_ev$data8 = ev.data) === null || _ev$data8 === void 0 ? void 0 : _ev$data8.type) === BROADCAST_CHANNELS_MSGS.SELECTED_ADDRESS_CHANGE) {\n                var _ev$data9;\n                this.handleSelectedAddressChange((_ev$data9 = ev.data) === null || _ev$data9 === void 0 ? void 0 : _ev$data9.selectedAddress);\n            }\n        });\n    }\n}\n/**\n * PopupWithBcHandler is a PopupHandler which uses broadcast channel to communicate with the popup window.\n */ class PopupWithBcHandler extends PopupHandler {\n    constructor(_ref){\n        let { config, state, instanceId } = _ref;\n        super({\n            config,\n            state\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"bc\", void 0);\n        this.bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(instanceId, broadcastChannelOptions);\n    }\n    /**\n   * Receives the data from popup window and closes the window\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */ handle(successExtraFn) {\n        return new Promise((resolve, reject)=>{\n            const closeListener = ()=>{\n                this.bc.close();\n                reject(new UserError(\"user closed popup\"));\n                this.removeListener(\"close\", closeListener);\n            };\n            this.on(\"close\", closeListener);\n            this.bc.addEventListener(\"message\", async (ev)=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(ev, `receiving data on channel: ${this.bc.name}`);\n                try {\n                    const { error, data } = ev;\n                    if (error) {\n                        reject(new Error(error));\n                        return;\n                    }\n                    if (successExtraFn) await successExtraFn.call(this, data);\n                    resolve(data);\n                } catch (error) {\n                    reject(error);\n                } finally{\n                    this.bc.close();\n                    this.close();\n                }\n            });\n            this.open().then(()=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(`opened window ${this.bc.name}`);\n                // Opened window. yay.  let the bc events do their job\n                return undefined;\n            }).catch((err)=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(err, \"something went wrong while opening window\");\n                reject(err);\n            });\n        });\n    }\n    /**\n   * Use this if we have to send large payloads which don't fit in query/hash params.\n   * Waits for ack that popup window is ready to receive data.\n   * Receives the data from popup window and closes the window\n   * @param payload - The data to be sent to the popup window once we have ack that window is ready to receive data\n   * @param successExtraFn - Extra function to be called after the data is received\n   * @returns The data to be received\n   */ handleWithHandshake(payload, successExtraFn) {\n        return new Promise((resolve, reject)=>{\n            const closeListener = ()=>{\n                this.bc.close();\n                reject(new UserError(\"user closed popup\"));\n                this.removeListener(\"close\", closeListener);\n            };\n            this.on(\"close\", closeListener);\n            this.bc.addEventListener(\"message\", async (ev)=>{\n                try {\n                    loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(ev, `receiving data on channel: ${this.bc.name}`);\n                    const { error, data } = ev;\n                    if (error) {\n                        reject(new Error(error));\n                        return;\n                    }\n                    // Do handshake\n                    const { type = \"\" } = data;\n                    if (type === POPUP_LOADED) {\n                        // Hack with generic to use the same type for both send and receive\n                        await this.bc.postMessage({\n                            data: payload\n                        });\n                    } else if (type === POPUP_RESULT) {\n                        if (successExtraFn) await successExtraFn.call(this, data);\n                        resolve(data);\n                        // Must only close the bc after result is done\n                        this.bc.close();\n                        this.close();\n                    }\n                } catch (error) {\n                    reject(error);\n                    this.bc.close();\n                    this.close();\n                }\n            });\n            this.open().then(()=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(`opened window ${this.bc.name}`);\n                // Opened window. yay.  let the bc events do their job\n                return undefined;\n            }).catch((err)=>{\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(err, \"something went wrong while opening window\");\n                reject(err);\n            });\n        });\n    }\n}\nclass RedirectHandler {\n    constructor(){\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"error\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"finalQueryParams\", {});\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"instanceParameters\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"hashParameters\", void 0);\n        const { hash } = window.location;\n        const queryParameters = new URLSearchParams(window.location.search);\n        queryParameters.forEach((value, key)=>{\n            this.finalQueryParams[key] = value;\n        });\n        const { error, instanceParameters, hashParameters } = handleRedirectParameters(hash, this.finalQueryParams);\n        this.error = error;\n        this.instanceParameters = instanceParameters;\n        this.hashParameters = hashParameters;\n    }\n    async handle() {\n        return new Promise((resolve, reject)=>{\n            const { finalQueryParams, instanceParameters, hashParameters, error } = this;\n            let bc;\n            try {\n                if (!finalQueryParams.windowId) {\n                    bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${BROADCAST_CHANNELS.REDIRECT_CHANNEL}_${instanceParameters.instanceId}`, broadcastChannelOptions);\n                    bc.addEventListener(\"message\", async (ev)=>{\n                        if (ev.error) {\n                            reject(ev.error);\n                            window.close();\n                        } else {\n                            resolve();\n                            bc.close();\n                            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"posted\", {\n                                finalQueryParams,\n                                hashParameters,\n                                instanceParameters\n                            });\n                        }\n                    });\n                    bc.postMessage({\n                        data: {\n                            instanceParams: instanceParameters,\n                            hashParams: hashParameters,\n                            queryParams: finalQueryParams\n                        },\n                        error\n                    });\n                    setTimeout(()=>{\n                        resolve();\n                        window.location.href = window.location.origin + window.location.search + window.location.hash;\n                    }, 5000);\n                } else {\n                    bc = new _toruslabs_broadcast_channel__WEBPACK_IMPORTED_MODULE_12__.BroadcastChannel(`${finalQueryParams.windowId}`, broadcastChannelOptions);\n                    bc.addEventListener(\"message\", async (ev)=>{\n                        const { url, message } = ev.data;\n                        if (url) {\n                            resolve();\n                            window.location.href = url;\n                        } else if (message === SETUP_COMPLETE) {\n                            await bc.postMessage({\n                                data: {\n                                    windowId: finalQueryParams.windowId,\n                                    message: POPUP_LOADED\n                                }\n                            });\n                        }\n                        if (ev.error && ev.error !== \"\") {\n                            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(ev.error);\n                            resolve();\n                            bc.close();\n                        }\n                    });\n                }\n            } catch (err) {\n                loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(err, \"something went wrong\");\n                reject(err);\n                if (bc) bc.close();\n                window.close();\n            }\n        });\n    }\n}\nconst ACTIVITY_ACTION = {\n    ACTIVITY_ACTION_ALL: \"walletActivity.allTransactions\",\n    ACTIVITY_ACTION_SEND: \"walletActivity.send\",\n    ACTIVITY_ACTION_RECEIVE: \"walletActivity.receive\",\n    ACTIVITY_ACTION_TOPUP: \"walletActivity.topup\"\n};\nconst ACCOUNT_CATEGORY = {\n    NORMAL: \"normal\",\n    THRESHOLD: \"threshold\",\n    IMPORTED: \"imported\"\n};\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys$1(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n// By default, poll every 3 minutes\nconst DEFAULT_INTERVAL = 180 * 1000;\nconst DEFAULT_PREFERENCES = {\n    selectedCurrency: \"USD\",\n    theme: \"dark\",\n    locale: \"en-US\",\n    accountType: ACCOUNT_CATEGORY.NORMAL,\n    contacts: [],\n    jwtToken: \"\",\n    fetchedPastTx: [],\n    pastTransactions: [],\n    paymentTx: [],\n    defaultPublicAddress: \"\",\n    customTokens: [],\n    customNfts: [],\n    crashReport: true,\n    userInfo: {\n        aggregateVerifier: \"\",\n        email: \"\",\n        name: \"\",\n        profileImage: \"\",\n        typeOfLogin: LOGIN_PROVIDER.GOOGLE,\n        verifier: \"\",\n        verifierId: \"\"\n    }\n};\n/**\n * Controller that stores shared settings and exposes convenience methods\n */ class BasePreferencesController extends BaseController {\n    /**\n   * Creates a PreferencesController instance\n   *\n   * @param config - Initial options used to configure this controller\n   * @param state - Initial state to set on this controller\n   */ constructor(_ref){\n        let { config, state, defaultPreferences, signAuthMessage } = _ref;\n        super({\n            config,\n            state\n        });\n        /**\n     * Name of this controller used during composition\n     */ _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"name\", \"PreferencesController\");\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"iframeOrigin\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"signAuthMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"defaultPreferences\", void 0);\n        if (!config.api) {\n            throw new Error(\"PreferencesController - no api specified in config.\");\n        }\n        this.defaultState = {\n            identities: {},\n            selectedAddress: \"\",\n            lastErrorMessage: \"\",\n            lastSuccessMessage: \"\"\n        };\n        this.defaultConfig = {\n            api: config.api,\n            pollInterval: DEFAULT_INTERVAL\n        };\n        this.initialize();\n        this.defaultPreferences = _objectSpread$1(_objectSpread$1({}, DEFAULT_PREFERENCES), defaultPreferences);\n        this.signAuthMessage = signAuthMessage;\n    }\n    setIframeOrigin(origin) {\n        this.iframeOrigin = origin;\n    }\n    getAddressState(address) {\n        const selectedAddress = address || this.state.selectedAddress;\n        return this.state.identities[selectedAddress];\n    }\n    /**\n   * Sets selected address\n   *\n   * @param selectedAddress - casper account hash\n   */ setSelectedAddress(selectedAddress) {\n        this.update({\n            selectedAddress\n        });\n    }\n    async getUser(address) {\n        const user = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/user?fetchTx=false`, this.headers(address), {\n            useAPIKey: true\n        });\n        return user.data;\n    }\n    async createUser(params) {\n        const { selectedCurrency, theme, verifier, verifierId, locale, address, idToken } = params;\n        const userPayload = {\n            default_currency: selectedCurrency,\n            theme,\n            verifier,\n            verifier_id: verifierId,\n            locale,\n            idToken\n        };\n        await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/user`, userPayload, this.headers(address), {\n            useAPIKey: true\n        });\n        this.updateState({\n            theme,\n            defaultPublicAddress: address,\n            selectedCurrency,\n            locale\n        }, address);\n    }\n    async storeUserLogin(params) {\n        const { verifierId, verifier, options, address, idToken } = params;\n        if (!options.rehydrate) {\n            const browser = bowser__WEBPACK_IMPORTED_MODULE_8__[\"default\"].getParser(window.navigator.userAgent);\n            const specialBrowser = getCustomDeviceInfo();\n            const recordLoginPayload = {\n                os: browser.getOSName(),\n                os_version: browser.getOSVersion() || \"unidentified\",\n                browser: (specialBrowser === null || specialBrowser === void 0 ? void 0 : specialBrowser.browser) || browser.getBrowserName() || \"unidentified\",\n                browser_version: browser.getBrowserVersion() || \"unidentified\",\n                platform: browser.getPlatform().type || \"desktop\",\n                hostname: this.iframeOrigin,\n                verifier,\n                verifier_id: verifierId,\n                idToken\n            };\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/user/recordLogin`, recordLoginPayload, this.headers(address), {\n                useAPIKey: true\n            });\n        }\n    }\n    async setCrashReport(isEnabled) {\n        var _this$getAddressState;\n        if (isEnabled === ((_this$getAddressState = this.getAddressState()) === null || _this$getAddressState === void 0 ? void 0 : _this$getAddressState.crashReport)) return true;\n        try {\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n                enable_crash_reporter: isEnabled\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                crashReport: isEnabled\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n            return false;\n        }\n    }\n    async setUserTheme(theme) {\n        var _this$getAddressState2;\n        if (theme === ((_this$getAddressState2 = this.getAddressState()) === null || _this$getAddressState2 === void 0 ? void 0 : _this$getAddressState2.theme)) return true;\n        try {\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n                theme\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                theme\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n            return false;\n        }\n    }\n    async setUserLocale(locale) {\n        var _this$getAddressState3;\n        if (locale === ((_this$getAddressState3 = this.getAddressState()) === null || _this$getAddressState3 === void 0 ? void 0 : _this$getAddressState3.locale)) return;\n        try {\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n                locale\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                locale\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to set locale\", error);\n            return false;\n        }\n    }\n    async setSelectedCurrency(payload) {\n        var _this$getAddressState4;\n        if (payload.selectedCurrency === ((_this$getAddressState4 = this.getAddressState()) === null || _this$getAddressState4 === void 0 ? void 0 : _this$getAddressState4.selectedCurrency)) return true;\n        try {\n            await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/user`, {\n                default_currency: payload.selectedCurrency\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                selectedCurrency: payload.selectedCurrency\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n            return false;\n        }\n    }\n    async addContact(contact) {\n        try {\n            var _this$getAddressState5;\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/contact`, contact, this.headers(), {\n                useAPIKey: true\n            });\n            this.updateState({\n                contacts: [\n                    ...((_this$getAddressState5 = this.getAddressState()) === null || _this$getAddressState5 === void 0 ? void 0 : _this$getAddressState5.contacts) || [],\n                    response.data\n                ]\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to add contact\", error);\n            return false;\n        }\n    }\n    async deleteContact(contactId) {\n        try {\n            var _this$getAddressState6;\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.remove)(`${this.config.api}/contact/${contactId}`, {}, this.headers(), {\n                useAPIKey: true\n            });\n            const finalContacts = (_this$getAddressState6 = this.getAddressState()) === null || _this$getAddressState6 === void 0 ? void 0 : _this$getAddressState6.contacts.filter((contact)=>contact.id !== response.data.id);\n            if (finalContacts) this.updateState({\n                contacts: [\n                    ...finalContacts\n                ]\n            });\n            return true;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to delete contact\", error);\n            return false;\n        }\n    }\n    async revokeDiscord(idToken) {\n        try {\n            const resp = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/revoke/discord`, {\n                token: idToken\n            }, this.headers(), {\n                useAPIKey: true\n            });\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(resp);\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error);\n        }\n    }\n    async patchPastTx(body, address) {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.patch)(`${this.config.api}/transaction`, body, this.headers(address), {\n                useAPIKey: true\n            });\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"successfully patched\", response);\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to patch tx\", error);\n        }\n    }\n    async postPastTx(tx, address) {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/transaction`, tx, this.headers(address), {\n                useAPIKey: true\n            });\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().info(\"successfully posted tx\", response);\n            return response;\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(error, \"unable to insert transaction\");\n        }\n    }\n    async getWalletOrders(address) {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/transaction`, this.headers(address), {\n                useAPIKey: true\n            });\n            return response.success ? response.data ? response.data : [] : [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to get wallet orders tx\", error);\n            return [];\n        }\n    }\n    async getTopUpOrders(address) {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.commonApiHost}/transaction`, this.headers(address), {\n                useAPIKey: true\n            });\n            return response.data || [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to fetch past Top up orders\", error);\n        }\n    }\n    async getBillBoardData() {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/billboard`, this.headers(), {\n                useAPIKey: true\n            });\n            return response.success ? response.data : [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to get billboard data\", error);\n            return [];\n        }\n    }\n    async getMessageForSigning(publicAddress) {\n        const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/auth/message`, {\n            public_address: publicAddress\n        }, {}, {\n            useAPIKey: true\n        });\n        return response.message;\n    }\n    async getTwitterId(payload) {\n        const res = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/twitter?screen_name=${payload.nick}`, this.headers(), {\n            useAPIKey: true\n        });\n        return `${payload.typeOfLogin.toLowerCase()}|${res.data.toString()}`;\n    }\n    async sendEmail(payload) {\n        return (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/transaction/sendemail`, payload.emailObject, this.headers(), {\n            useAPIKey: true\n        });\n    }\n    async refreshJwt() {\n        const address = this.state.selectedAddress;\n        const messageToSign = await this.getMessageForSigning(address);\n        if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n        const signedMessage = this.signAuthMessage(address, messageToSign);\n        const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/auth/verify`, {\n            public_address: address,\n            signed_message: signedMessage\n        }, {}, {\n            useAPIKey: true\n        });\n        this.updateState({\n            jwtToken: response.token\n        }, address);\n    }\n    async getDappList() {\n        try {\n            const response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.get)(`${this.config.api}/dapps`, this.headers(), {\n                useAPIKey: true\n            });\n            return response.success ? response.data : [];\n        } catch (error) {\n            loglevel__WEBPACK_IMPORTED_MODULE_6___default().error(\"unable to get billboard data\", error);\n            return [];\n        }\n    }\n    async init(address, userInfo, jwtToken) {\n        let response = {\n            token: jwtToken\n        };\n        if (this.getAddressState(address)) return;\n        if (!jwtToken) {\n            const messageToSign = await this.getMessageForSigning(address);\n            if (!messageToSign.startsWith(this.config.signInPrefix)) throw new Error(\"Cannot sign on invalid message\");\n            const signedMessage = this.signAuthMessage(address, messageToSign);\n            response = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_7__.post)(`${this.config.api}/auth/verify`, {\n                public_address: address,\n                signed_message: signedMessage\n            }, {}, {\n                useAPIKey: true\n            });\n        }\n        this.updateState({\n            jwtToken: response.token,\n            userInfo\n        }, address);\n    }\n    updateState(preferences, address) {\n        const selectedAddress = address || this.state.selectedAddress;\n        const currentState = this.getAddressState(selectedAddress) || lodash_cloneDeep__WEBPACK_IMPORTED_MODULE_9___default()(this.defaultPreferences);\n        const mergedState = _objectSpread$1(_objectSpread$1({}, currentState), preferences);\n        this.update({\n            identities: _objectSpread$1(_objectSpread$1({}, this.state.identities), {}, {\n                [selectedAddress]: mergedState\n            })\n        });\n        return mergedState;\n    }\n    headers(address) {\n        var _this$getAddressState7;\n        const selectedAddress = address || this.state.selectedAddress;\n        return getHeaders(((_this$getAddressState7 = this.getAddressState(selectedAddress)) === null || _this$getAddressState7 === void 0 ? void 0 : _this$getAddressState7.jwtToken) || \"\");\n    }\n}\n/**\n * The status of the transaction. Each status represents the state of the transaction internally\n * in the wallet. Some of these correspond with the state of the transaction on the network, but\n * some are wallet-specific.\n */ var TransactionStatus;\n(function(TransactionStatus) {\n    TransactionStatus[\"approved\"] = \"approved\";\n    TransactionStatus[\"cancelled\"] = \"cancelled\";\n    TransactionStatus[\"confirmed\"] = \"confirmed\";\n    TransactionStatus[\"failed\"] = \"failed\";\n    TransactionStatus[\"finalized\"] = \"finalized\";\n    TransactionStatus[\"processed\"] = \"processed\";\n    TransactionStatus[\"rejected\"] = \"rejected\";\n    TransactionStatus[\"signed\"] = \"signed\";\n    TransactionStatus[\"submitted\"] = \"submitted\";\n    TransactionStatus[\"unapproved\"] = \"unapproved\";\n    TransactionStatus[\"dropped\"] = \"dropped\";\n    TransactionStatus[\"expired\"] = \"expired\";\n})(TransactionStatus || (TransactionStatus = {}));\nconst TRANSACTION_TYPES = {\n    CONTRACT_INTERACTION: \"contractInteraction\",\n    DEPLOY_CONTRACT: \"contractDeployment\",\n    WASM_BASED_DEPLOY: \"wasmBasedDeploy\",\n    STANDARD_TRANSACTION: \"transaction\",\n    STANDARD_PAYMENT_TRANSACTION: \"payment_transaction\" // specific to chains like solana and casper\n};\nconst TX_EVENTS = {\n    TX_WARNING: \"tx:warning\",\n    TX_ERROR: \"tx:error\",\n    TX_FAILED: \"tx:failed\",\n    TX_CONFIRMED: \"tx:confirmed\",\n    TX_DROPPED: \"tx:dropped\",\n    TX_EXPIRED: \"tx:expired\",\n    TX_STATUS_UPDATE: \"tx:status_update\",\n    TX_UNAPPROVED: \"tx:unapproved\"\n};\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nclass BaseTransactionStateManager extends BaseController {\n    constructor(_ref){\n        let { config, state, getCurrentChainId } = _ref;\n        super({\n            config,\n            state\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"getCurrentChainId\", void 0);\n        this.defaultConfig = {\n            txHistoryLimit: 40\n        };\n        this.defaultState = {\n            transactions: {},\n            unapprovedTxs: {},\n            currentNetworkTxsList: []\n        };\n        this.initialize();\n        this.getCurrentChainId = getCurrentChainId;\n    }\n    getUnapprovedTxList() {\n        const chainId = this.getCurrentChainId();\n        return lodash_pickBy__WEBPACK_IMPORTED_MODULE_10___default()(this.state.transactions, (transaction)=>transaction.status === TransactionStatus.unapproved && transactionMatchesNetwork(transaction, chainId));\n    }\n    getTransaction(txId) {\n        const { transactions } = this.state;\n        return transactions[txId];\n    }\n    updateTransaction(txMeta) {\n        // commit txMeta to state\n        const txId = txMeta.id;\n        txMeta.updated_at = new Date().toISOString();\n        this.update({\n            transactions: _objectSpread(_objectSpread({}, this.state.transactions), {}, {\n                [txId]: txMeta\n            })\n        });\n    }\n    setTxStatusRejected(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.rejected);\n        this._deleteTransaction(txId);\n    }\n    /**\n   * The implementing controller can override this functionality and add custom logic + call super.()\n   */ setTxStatusUnapproved(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.unapproved);\n    }\n    setTxStatusApproved(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.approved);\n    }\n    setTxStatusSigned(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.signed);\n    }\n    setTxStatusSubmitted(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.submitted);\n    }\n    setTxStatusDropped(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.dropped);\n    }\n    setTxStatusExpired(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.expired);\n    }\n    setTxStatusConfirmed(txId) {\n        this._setTransactionStatus(txId, TransactionStatus.confirmed);\n    }\n    setTxStatusFailed(txId, error_) {\n        const error = !error_ ? new Error(\"Internal torus failure\") : error_;\n        const txMeta = this.getTransaction(txId);\n        txMeta.error = error;\n        this.updateTransaction(txMeta);\n        this._setTransactionStatus(txId, TransactionStatus.failed);\n    }\n    /**\n   * Method to determine if the transaction is in a final state\n   * @param status - Transaction status\n   * @returns boolean if the transaction is in a final state\n   */ isFinalState(status) {\n        return status === TransactionStatus.rejected || status === TransactionStatus.submitted || status === TransactionStatus.confirmed || status === TransactionStatus.failed || status === TransactionStatus.cancelled || status === TransactionStatus.expired;\n    }\n    /**\n   * Filters out the unapproved transactions from state\n   */ clearUnapprovedTxs() {\n        this.update({\n            transactions: lodash_omitBy__WEBPACK_IMPORTED_MODULE_11___default()(this.state.transactions, (transaction)=>transaction.status === TransactionStatus.unapproved)\n        });\n    }\n    /**\n   * will append new transactions to old txns.\n   */ _addTransactionsToState(transactions) {\n        this.update({\n            transactions: transactions.reduce((result, newTx)=>{\n                result[newTx.id] = newTx;\n                return result;\n            }, this.state.transactions)\n        });\n    }\n    /**\n   * will set new txns, override existing if any in state.\n   */ _setTransactionsToState(transactions) {\n        this.update({\n            transactions: transactions.reduce((result, newTx)=>{\n                result[newTx.id] = newTx;\n                return result;\n            }, {})\n        });\n    }\n    _deleteTransaction(targetTransactionId) {\n        const { transactions } = this.state;\n        delete transactions[targetTransactionId];\n        this.update({\n            transactions\n        });\n    }\n    _deleteTransactions(targetTransactionIds) {\n        const { transactions } = this.state;\n        targetTransactionIds.forEach((transactionId)=>{\n            delete transactions[transactionId];\n        });\n        this.update({\n            transactions\n        });\n    }\n    _setTransactionStatus(txId, status) {\n        const txMeta = this.getTransaction(txId);\n        if (!txMeta) {\n            return;\n        }\n        txMeta.status = status;\n        // only updating status so no validation required on txn.\n        this.updateTransaction(txMeta);\n        this.emit(TX_EVENTS.TX_STATUS_UPDATE, {\n            txId,\n            status\n        });\n        if (this.isFinalState(status)) {\n            this.emit(`${txMeta.id}:finished`, txMeta);\n        } else {\n            this.emit(`${txMeta.id}:${status}`, txId);\n        }\n    }\n}\n //# sourceMappingURL=baseControllers.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js ***!
  \*******************************************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePostMessageStream: () => (/* binding */ BasePostMessageStream),\n/* harmony export */   IGNORE_SUBSTREAM: () => (/* binding */ IGNORE_SUBSTREAM),\n/* harmony export */   JRPCEngine: () => (/* binding */ JRPCEngine),\n/* harmony export */   ObjectMultiplex: () => (/* binding */ ObjectMultiplex),\n/* harmony export */   PostMessageStream: () => (/* binding */ PostMessageStream),\n/* harmony export */   SafeEventEmitter: () => (/* binding */ SafeEventEmitter),\n/* harmony export */   SerializableError: () => (/* binding */ SerializableError),\n/* harmony export */   Substream: () => (/* binding */ Substream),\n/* harmony export */   createAsyncMiddleware: () => (/* binding */ createAsyncMiddleware),\n/* harmony export */   createEngineStream: () => (/* binding */ createEngineStream),\n/* harmony export */   createErrorMiddleware: () => (/* binding */ createErrorMiddleware),\n/* harmony export */   createIdRemapMiddleware: () => (/* binding */ createIdRemapMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createScaffoldMiddleware: () => (/* binding */ createScaffoldMiddleware),\n/* harmony export */   createStreamMiddleware: () => (/* binding */ createStreamMiddleware),\n/* harmony export */   getRpcPromiseCallback: () => (/* binding */ getRpcPromiseCallback),\n/* harmony export */   mergeMiddleware: () => (/* binding */ mergeMiddleware),\n/* harmony export */   providerAsMiddleware: () => (/* binding */ providerAsMiddleware),\n/* harmony export */   providerFromEngine: () => (/* binding */ providerFromEngine),\n/* harmony export */   providerFromMiddleware: () => (/* binding */ providerFromMiddleware),\n/* harmony export */   setupMultiplex: () => (/* binding */ setupMultiplex)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/index.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(readable_stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! fast-safe-stringify */ \"(ssr)/./node_modules/fast-safe-stringify/index.js\");\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @metamask/rpc-errors */ \"(ssr)/./node_modules/@metamask/rpc-errors/dist/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! end-of-stream */ \"(ssr)/./node_modules/end-of-stream/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_5___default = /*#__PURE__*/__webpack_require__.n(end_of_stream__WEBPACK_IMPORTED_MODULE_5__);\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\");\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(once__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_7__);\n\n\n\n\n\n\n\n\nfunction noop() {\n    return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { name, target, targetWindow = window, targetOrigin = \"*\" } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_init\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_haveSyn\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetOrigin\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_onMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_synIntervalId\", void 0);\n        if (!name || !target) {\n            throw new Error(\"Invalid input.\");\n        }\n        this._init = false;\n        this._haveSyn = false;\n        this._name = name;\n        this._target = target; // target origin\n        this._targetWindow = targetWindow;\n        this._targetOrigin = targetOrigin;\n        this._onMessage = this.onMessage.bind(this);\n        this._synIntervalId = null;\n        window.addEventListener(\"message\", this._onMessage, false);\n        this._handShake();\n    }\n    _break() {\n        this.cork();\n        this._write(BRK, null, noop);\n        this._haveSyn = false;\n        this._init = false;\n    }\n    _handShake() {\n        this._write(SYN, null, noop);\n        this.cork();\n    }\n    _onData(data) {\n        if (!this._init) {\n            // listen for handshake\n            if (data === SYN) {\n                this._haveSyn = true;\n                this._write(ACK, null, noop);\n            } else if (data === ACK) {\n                this._init = true;\n                if (!this._haveSyn) {\n                    this._write(ACK, null, noop);\n                }\n                this.uncork();\n            }\n        } else if (data === BRK) {\n            this._break();\n        } else {\n            // forward message\n            try {\n                this.push(data);\n            } catch (err) {\n                this.emit(\"error\", err);\n            }\n        }\n    }\n    _postMessage(data) {\n        const originConstraint = this._targetOrigin;\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n    onMessage(event) {\n        const message = event.data;\n        // validate message\n        if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n            return;\n        }\n        this._onData(message.data);\n    }\n    _read() {\n        return undefined;\n    }\n    _write(data, _, cb) {\n        this._postMessage(data);\n        cb();\n    }\n    _destroy() {\n        window.removeEventListener(\"message\", this._onMessage, false);\n    }\n}\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    } catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(()=>{\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for(let i = 0; i < n; i += 1){\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events__WEBPACK_IMPORTED_MODULE_2__.EventEmitter {\n    emit(type) {\n        let doError = type === \"error\";\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        } else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === \"function\") {\n            safeApply(handler, this, args);\n        } else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for(let i = 0; i < len; i += 1){\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nclass SerializableError extends Error {\n    constructor(_ref){\n        let { code, message, data } = _ref;\n        if (!Number.isInteger(code)) {\n            throw new Error(\"code must be an integer\");\n        }\n        if (!message || typeof message !== \"string\") {\n            throw new Error(\"message must be string\");\n        }\n        super(message);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"data\", void 0);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    toString() {\n        return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_3___default()({\n            code: this.code,\n            message: this.message,\n            data: this.data,\n            stack: this.stack\n        });\n    }\n}\nconst getRpcPromiseCallback = function(resolve, reject) {\n    let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return (error, response)=>{\n        if (error || response.error) {\n            reject(error || response.error);\n        } else if (!unwrapResult || Array.isArray(response)) {\n            resolve(response);\n        } else {\n            resolve(response.result);\n        }\n    };\n};\nfunction createErrorMiddleware(log) {\n    return (req, res, next, end)=>{\n        try {\n            // json-rpc-engine will terminate the request when it notices this error\n            if (typeof req.method !== \"string\" || !req.method) {\n                res.error = new SerializableError({\n                    code: -32603,\n                    message: \"invalid method\"\n                });\n                end();\n                return;\n            }\n            next((done)=>{\n                const { error } = res;\n                if (!error) {\n                    return done();\n                }\n                log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n                return done();\n            });\n        } catch (error) {\n            log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n            res.error = new SerializableError({\n                code: -32603,\n                message: error.message\n            });\n            end();\n        }\n    };\n}\nfunction createStreamMiddleware() {\n    const idMap = {};\n    function readNoop() {\n        return false;\n    }\n    const events = new SafeEventEmitter();\n    function processResponse(res) {\n        const context = idMap[res.id];\n        if (!context) {\n            throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n        }\n        delete idMap[res.id];\n        // copy whole res onto original res\n        Object.assign(context.res, res);\n        // run callback on empty stack,\n        // prevent internal stream-handler from catching errors\n        setTimeout(context.end);\n    }\n    function processNotification(res) {\n        events.emit(\"notification\", res);\n    }\n    function processMessage(res, _encoding, cb) {\n        let err;\n        try {\n            const isNotification = !res.id;\n            if (isNotification) {\n                processNotification(res);\n            } else {\n                processResponse(res);\n            }\n        } catch (_err) {\n            err = _err;\n        }\n        // continue processing stream\n        cb(err);\n    }\n    const stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read: readNoop,\n        write: processMessage\n    });\n    const middleware = (req, res, next, end)=>{\n        // write req to stream\n        stream.push(req);\n        // register request on id map\n        idMap[req.id] = {\n            req,\n            res,\n            next,\n            end\n        };\n    };\n    return {\n        events,\n        middleware,\n        stream\n    };\n}\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end)=>{\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === \"function\") {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nfunction createIdRemapMiddleware() {\n    return (req, res, next, _end)=>{\n        const originalId = req.id;\n        const newId = Math.random().toString(36).slice(2);\n        req.id = newId;\n        res.id = newId;\n        next((done)=>{\n            req.id = originalId;\n            res.id = originalId;\n            done();\n        });\n    };\n}\nfunction createLoggerMiddleware(logger) {\n    return (req, res, next, _)=>{\n        logger.debug(\"REQ\", req, \"RES\", res);\n        next();\n    };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end)=>{\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve)=>{\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async ()=>{\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            next((runReturnHandlersCallback)=>{\n                // This callback comes from JRPCEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            } else {\n                end(null);\n            }\n        } catch (error) {\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            } else {\n                end(error);\n            }\n        }\n    };\n}\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys$1(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */ class JRPCEngine extends SafeEventEmitter {\n    constructor(){\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_middleware\", void 0);\n        this._middleware = [];\n    }\n    /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */ static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack){\n            [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [\n            error,\n            isComplete,\n            returnHandlers.reverse()\n        ];\n    }\n    /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */ static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve)=>{\n            const end = (err)=>{\n                const error = err || res.error;\n                if (error) {\n                    res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_4__.serializeError)(error);\n                }\n                // True indicates that the request should end\n                resolve([\n                    error,\n                    true\n                ]);\n            };\n            const next = (returnHandler)=>{\n                if (res.error) {\n                    end(res.error);\n                } else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== \"function\") {\n                            end(new SerializableError({\n                                code: -32603,\n                                message: \"JRPCEngine: 'next' return handlers must be functions\"\n                            }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([\n                        null,\n                        false\n                    ]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            } catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */ static async _runReturnHandlers(handlers) {\n        for (const handler of handlers){\n            await new Promise((resolve, reject)=>{\n                handler((err)=>err ? reject(err) : resolve());\n            });\n        }\n    }\n    /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */ static _checkForCompletion(req, res, isComplete) {\n        if (!(\"result\" in res) && !(\"error\" in res)) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Response has no error or result for request\"\n            });\n        }\n        if (!isComplete) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Nothing ended request\"\n            });\n        }\n    }\n    /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */ push(middleware) {\n        this._middleware.push(middleware);\n    }\n    handle(req, cb) {\n        if (cb && typeof cb !== \"function\") {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */ asMiddleware() {\n        return async (req, res, next, end)=>{\n            try {\n                const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JRPCEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback)=>{\n                    try {\n                        await JRPCEngine._runReturnHandlers(returnHandlers);\n                    } catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            } catch (error) {\n                return end(error);\n            }\n        };\n    }\n    async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(// 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        } catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n   * A promise-wrapped _handle.\n   */ _promiseHandle(req) {\n        return new Promise((resolve)=>{\n            this._handle(req, (_err, res)=>{\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */ async _handle(callerReq, cb) {\n        if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"request must be plain object\"\n            });\n            return cb(error, {\n                id: undefined,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        if (typeof callerReq.method !== \"string\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"method must be string\"\n            });\n            return cb(error, {\n                id: callerReq.id,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        const req = _objectSpread$1({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        } catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_4__.serializeError)(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */ async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JRPCEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JRPCEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n}\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JRPCEngine();\n    middlewareStack.forEach((middleware)=>engine.push(middleware));\n    return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n    if (!opts || !opts.engine) {\n        throw new Error(\"Missing engine parameter!\");\n    }\n    const { engine } = opts;\n    // eslint-disable-next-line prefer-const\n    let stream;\n    function read() {\n        return undefined;\n    }\n    function write(req, _encoding, cb) {\n        engine.handle(req, (_err, res)=>{\n            stream.push(res);\n        });\n        cb();\n    }\n    stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read,\n        write\n    });\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            stream.push(message);\n        });\n    }\n    return stream;\n}\nfunction providerFromEngine(engine) {\n    const provider = new SafeEventEmitter();\n    // handle both rpc send methods\n    provider.sendAsync = async (req)=>{\n        const res = await engine.handle(req);\n        if (res.error) {\n            var _res$error, _res$error2;\n            const err = (0,_metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_4__.serializeError)(res.error, {\n                fallbackError: {\n                    message: ((_res$error = res.error) === null || _res$error === void 0 ? void 0 : _res$error.message) || res.error.toString(),\n                    code: ((_res$error2 = res.error) === null || _res$error2 === void 0 ? void 0 : _res$error2.code) || -32603\n                }\n            });\n            throw _metamask_rpc_errors__WEBPACK_IMPORTED_MODULE_4__.rpcErrors.internal(err);\n        }\n        return res.result;\n    };\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    provider.send = (req, callback)=>{\n        if (typeof callback !== \"function\") {\n            throw new Error('Must provide callback to \"send\" method.');\n        }\n        engine.handle(req, callback);\n    };\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            provider.emit(\"data\", null, message);\n        });\n    }\n    provider.request = async (args)=>{\n        const req = _objectSpread$1(_objectSpread$1({}, args), {}, {\n            id: Math.random().toString(36).slice(2),\n            jsonrpc: \"2.0\"\n        });\n        const res = await provider.sendAsync(req);\n        return res;\n    };\n    return provider;\n}\nfunction providerFromMiddleware(middleware) {\n    const engine = new JRPCEngine();\n    engine.push(middleware);\n    const provider = providerFromEngine(engine);\n    return provider;\n}\nfunction providerAsMiddleware(provider) {\n    return async (req, res, _next, end)=>{\n        // send request to provider\n        try {\n            const providerRes = await provider.sendAsync(req);\n            res.result = providerRes;\n            return end();\n        } catch (error) {\n            return end(error.message);\n        }\n    };\n}\nclass Substream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { parent, name } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_parent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        this._parent = parent;\n        this._name = name;\n    }\n    /**\n   * Explicitly sets read operations to a no-op.\n   */ _read() {\n        return undefined;\n    }\n    /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */ _write(chunk, _encoding, callback) {\n        this._parent.push({\n            name: this._name,\n            data: chunk\n        });\n        callback();\n    }\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(){\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(_objectSpread(_objectSpread({}, opts), {}, {\n            objectMode: true\n        }));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_substreams\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"getStream\", void 0);\n        this._substreams = {};\n    }\n    createStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // create substream\n        const substream = new Substream({\n            parent: this,\n            name\n        });\n        this._substreams[name] = substream;\n        // listen for parent stream to end\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        anyStreamEnd(this, (_error)=>substream.destroy(_error || undefined));\n        return substream;\n    }\n    // ignore streams (dont display orphaned data warning)\n    ignoreStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // set\n        this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n    _read() {\n        return undefined;\n    }\n    _write(chunk, _encoding, callback) {\n        const { name, data } = chunk;\n        if (!name) {\n            window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n            return callback();\n        }\n        // get corresponding substream\n        const substream = this._substreams[name];\n        if (!substream) {\n            window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n            return callback();\n        }\n        // push data into substream\n        if (substream !== IGNORE_SUBSTREAM) {\n            substream.push(data);\n        }\n        return callback();\n    }\n}\n// util\nfunction anyStreamEnd(stream, _cb) {\n    const cb = once__WEBPACK_IMPORTED_MODULE_6___default()(_cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_5___default()(stream, {\n        readable: false\n    }, cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_5___default()(stream, {\n        writable: false\n    }, cb);\n}\nfunction setupMultiplex(stream) {\n    const mux = new ObjectMultiplex();\n    mux.getStream = function streamHelper(name) {\n        if (this._substreams[name]) {\n            return this._substreams[name];\n        }\n        return this.createStream(name);\n    };\n    pump__WEBPACK_IMPORTED_MODULE_7___default()(stream, mux, stream, (err)=>{\n        if (err) window.console.error(err);\n    });\n    return mux;\n}\nclass PostMessageStream extends BasePostMessageStream {\n    _postMessage(data) {\n        let originConstraint = this._targetOrigin;\n        if (typeof data === \"object\") {\n            const dataObj = data;\n            if (typeof dataObj.data === \"object\") {\n                const dataObjData = dataObj.data;\n                if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n                    const dataObjDataParam = dataObjData.params[0];\n                    if (dataObjDataParam._origin) {\n                        originConstraint = dataObjDataParam._origin;\n                    }\n                    // add a constraint for the response\n                    dataObjDataParam._origin = window.location.origin;\n                }\n            }\n        }\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n}\n //# sourceMappingURL=openloginJrpc.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js":
/*!************************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js ***!
  \************************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { AbortError, codes } = __webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst { isNodeStream, isWebStream, kControllerErrorFunction } = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\");\nconst eos = __webpack_require__(/*! ./end-of-stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\nconst { ERR_INVALID_ARG_TYPE } = codes;\n// This method is inlined here for readable-stream\n// It also does not allow for signal to not exist on the stream\n// https://github.com/nodejs/node/pull/36061#discussion_r533718029\nconst validateAbortSignal = (signal, name)=>{\n    if (typeof signal !== \"object\" || !(\"aborted\" in signal)) {\n        throw new ERR_INVALID_ARG_TYPE(name, \"AbortSignal\", signal);\n    }\n};\nmodule.exports.addAbortSignal = function addAbortSignal(signal, stream) {\n    validateAbortSignal(signal, \"signal\");\n    if (!isNodeStream(stream) && !isWebStream(stream)) {\n        throw new ERR_INVALID_ARG_TYPE(\"stream\", [\n            \"ReadableStream\",\n            \"WritableStream\",\n            \"Stream\"\n        ], stream);\n    }\n    return module.exports.addAbortSignalNoValidate(signal, stream);\n};\nmodule.exports.addAbortSignalNoValidate = function(signal, stream) {\n    if (typeof signal !== \"object\" || !(\"aborted\" in signal)) {\n        return stream;\n    }\n    const onAbort = isNodeStream(stream) ? ()=>{\n        stream.destroy(new AbortError(undefined, {\n            cause: signal.reason\n        }));\n    } : ()=>{\n        stream[kControllerErrorFunction](new AbortError(undefined, {\n            cause: signal.reason\n        }));\n    };\n    if (signal.aborted) {\n        onAbort();\n    } else {\n        signal.addEventListener(\"abort\", onAbort);\n        eos(stream, ()=>signal.removeEventListener(\"abort\", onAbort));\n    }\n    return stream;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvYWRkLWFib3J0LXNpZ25hbC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsVUFBVSxFQUFFQyxLQUFLLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFDdEMsTUFBTSxFQUFFQyxZQUFZLEVBQUVDLFdBQVcsRUFBRUMsd0JBQXdCLEVBQUUsR0FBR0gsbUJBQU9BLENBQUM7QUFDeEUsTUFBTUksTUFBTUosbUJBQU9BLENBQUM7QUFDcEIsTUFBTSxFQUFFSyxvQkFBb0IsRUFBRSxHQUFHTjtBQUVqQyxrREFBa0Q7QUFDbEQsK0RBQStEO0FBQy9ELGtFQUFrRTtBQUNsRSxNQUFNTyxzQkFBc0IsQ0FBQ0MsUUFBUUM7SUFDbkMsSUFBSSxPQUFPRCxXQUFXLFlBQVksQ0FBRSxjQUFhQSxNQUFLLEdBQUk7UUFDeEQsTUFBTSxJQUFJRixxQkFBcUJHLE1BQU0sZUFBZUQ7SUFDdEQ7QUFDRjtBQUNBRSw2QkFBNkIsR0FBRyxTQUFTRSxlQUFlSixNQUFNLEVBQUVLLE1BQU07SUFDcEVOLG9CQUFvQkMsUUFBUTtJQUM1QixJQUFJLENBQUNOLGFBQWFXLFdBQVcsQ0FBQ1YsWUFBWVUsU0FBUztRQUNqRCxNQUFNLElBQUlQLHFCQUFxQixVQUFVO1lBQUM7WUFBa0I7WUFBa0I7U0FBUyxFQUFFTztJQUMzRjtJQUNBLE9BQU9ILE9BQU9DLE9BQU8sQ0FBQ0csd0JBQXdCLENBQUNOLFFBQVFLO0FBQ3pEO0FBQ0FILHVDQUF1QyxHQUFHLFNBQVVGLE1BQU0sRUFBRUssTUFBTTtJQUNoRSxJQUFJLE9BQU9MLFdBQVcsWUFBWSxDQUFFLGNBQWFBLE1BQUssR0FBSTtRQUN4RCxPQUFPSztJQUNUO0lBQ0EsTUFBTUUsVUFBVWIsYUFBYVcsVUFDekI7UUFDRUEsT0FBT0csT0FBTyxDQUNaLElBQUlqQixXQUFXa0IsV0FBVztZQUN4QkMsT0FBT1YsT0FBT1csTUFBTTtRQUN0QjtJQUVKLElBQ0E7UUFDRU4sTUFBTSxDQUFDVCx5QkFBeUIsQ0FDOUIsSUFBSUwsV0FBV2tCLFdBQVc7WUFDeEJDLE9BQU9WLE9BQU9XLE1BQU07UUFDdEI7SUFFSjtJQUNKLElBQUlYLE9BQU9ZLE9BQU8sRUFBRTtRQUNsQkw7SUFDRixPQUFPO1FBQ0xQLE9BQU9hLGdCQUFnQixDQUFDLFNBQVNOO1FBQ2pDVixJQUFJUSxRQUFRLElBQU1MLE9BQU9jLG1CQUFtQixDQUFDLFNBQVNQO0lBQ3hEO0lBQ0EsT0FBT0Y7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9hZGQtYWJvcnQtc2lnbmFsLmpzP2Q1MGQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgQWJvcnRFcnJvciwgY29kZXMgfSA9IHJlcXVpcmUoJy4uLy4uL291cnMvZXJyb3JzJylcbmNvbnN0IHsgaXNOb2RlU3RyZWFtLCBpc1dlYlN0cmVhbSwga0NvbnRyb2xsZXJFcnJvckZ1bmN0aW9uIH0gPSByZXF1aXJlKCcuL3V0aWxzJylcbmNvbnN0IGVvcyA9IHJlcXVpcmUoJy4vZW5kLW9mLXN0cmVhbScpXG5jb25zdCB7IEVSUl9JTlZBTElEX0FSR19UWVBFIH0gPSBjb2Rlc1xuXG4vLyBUaGlzIG1ldGhvZCBpcyBpbmxpbmVkIGhlcmUgZm9yIHJlYWRhYmxlLXN0cmVhbVxuLy8gSXQgYWxzbyBkb2VzIG5vdCBhbGxvdyBmb3Igc2lnbmFsIHRvIG5vdCBleGlzdCBvbiB0aGUgc3RyZWFtXG4vLyBodHRwczovL2dpdGh1Yi5jb20vbm9kZWpzL25vZGUvcHVsbC8zNjA2MSNkaXNjdXNzaW9uX3I1MzM3MTgwMjlcbmNvbnN0IHZhbGlkYXRlQWJvcnRTaWduYWwgPSAoc2lnbmFsLCBuYW1lKSA9PiB7XG4gIGlmICh0eXBlb2Ygc2lnbmFsICE9PSAnb2JqZWN0JyB8fCAhKCdhYm9ydGVkJyBpbiBzaWduYWwpKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKG5hbWUsICdBYm9ydFNpZ25hbCcsIHNpZ25hbClcbiAgfVxufVxubW9kdWxlLmV4cG9ydHMuYWRkQWJvcnRTaWduYWwgPSBmdW5jdGlvbiBhZGRBYm9ydFNpZ25hbChzaWduYWwsIHN0cmVhbSkge1xuICB2YWxpZGF0ZUFib3J0U2lnbmFsKHNpZ25hbCwgJ3NpZ25hbCcpXG4gIGlmICghaXNOb2RlU3RyZWFtKHN0cmVhbSkgJiYgIWlzV2ViU3RyZWFtKHN0cmVhbSkpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUoJ3N0cmVhbScsIFsnUmVhZGFibGVTdHJlYW0nLCAnV3JpdGFibGVTdHJlYW0nLCAnU3RyZWFtJ10sIHN0cmVhbSlcbiAgfVxuICByZXR1cm4gbW9kdWxlLmV4cG9ydHMuYWRkQWJvcnRTaWduYWxOb1ZhbGlkYXRlKHNpZ25hbCwgc3RyZWFtKVxufVxubW9kdWxlLmV4cG9ydHMuYWRkQWJvcnRTaWduYWxOb1ZhbGlkYXRlID0gZnVuY3Rpb24gKHNpZ25hbCwgc3RyZWFtKSB7XG4gIGlmICh0eXBlb2Ygc2lnbmFsICE9PSAnb2JqZWN0JyB8fCAhKCdhYm9ydGVkJyBpbiBzaWduYWwpKSB7XG4gICAgcmV0dXJuIHN0cmVhbVxuICB9XG4gIGNvbnN0IG9uQWJvcnQgPSBpc05vZGVTdHJlYW0oc3RyZWFtKVxuICAgID8gKCkgPT4ge1xuICAgICAgICBzdHJlYW0uZGVzdHJveShcbiAgICAgICAgICBuZXcgQWJvcnRFcnJvcih1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIGNhdXNlOiBzaWduYWwucmVhc29uXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfVxuICAgIDogKCkgPT4ge1xuICAgICAgICBzdHJlYW1ba0NvbnRyb2xsZXJFcnJvckZ1bmN0aW9uXShcbiAgICAgICAgICBuZXcgQWJvcnRFcnJvcih1bmRlZmluZWQsIHtcbiAgICAgICAgICAgIGNhdXNlOiBzaWduYWwucmVhc29uXG4gICAgICAgICAgfSlcbiAgICAgICAgKVxuICAgICAgfVxuICBpZiAoc2lnbmFsLmFib3J0ZWQpIHtcbiAgICBvbkFib3J0KClcbiAgfSBlbHNlIHtcbiAgICBzaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBvbkFib3J0KVxuICAgIGVvcyhzdHJlYW0sICgpID0+IHNpZ25hbC5yZW1vdmVFdmVudExpc3RlbmVyKCdhYm9ydCcsIG9uQWJvcnQpKVxuICB9XG4gIHJldHVybiBzdHJlYW1cbn1cbiJdLCJuYW1lcyI6WyJBYm9ydEVycm9yIiwiY29kZXMiLCJyZXF1aXJlIiwiaXNOb2RlU3RyZWFtIiwiaXNXZWJTdHJlYW0iLCJrQ29udHJvbGxlckVycm9yRnVuY3Rpb24iLCJlb3MiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsInZhbGlkYXRlQWJvcnRTaWduYWwiLCJzaWduYWwiLCJuYW1lIiwibW9kdWxlIiwiZXhwb3J0cyIsImFkZEFib3J0U2lnbmFsIiwic3RyZWFtIiwiYWRkQWJvcnRTaWduYWxOb1ZhbGlkYXRlIiwib25BYm9ydCIsImRlc3Ryb3kiLCJ1bmRlZmluZWQiLCJjYXVzZSIsInJlYXNvbiIsImFib3J0ZWQiLCJhZGRFdmVudExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/buffer_list.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/buffer_list.js ***!
  \*******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { StringPrototypeSlice, SymbolIterator, TypedArrayPrototypeSet, Uint8Array } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\nconst { inspect } = __webpack_require__(/*! ../../ours/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\");\nmodule.exports = class BufferList {\n    constructor(){\n        this.head = null;\n        this.tail = null;\n        this.length = 0;\n    }\n    push(v) {\n        const entry = {\n            data: v,\n            next: null\n        };\n        if (this.length > 0) this.tail.next = entry;\n        else this.head = entry;\n        this.tail = entry;\n        ++this.length;\n    }\n    unshift(v) {\n        const entry = {\n            data: v,\n            next: this.head\n        };\n        if (this.length === 0) this.tail = entry;\n        this.head = entry;\n        ++this.length;\n    }\n    shift() {\n        if (this.length === 0) return;\n        const ret = this.head.data;\n        if (this.length === 1) this.head = this.tail = null;\n        else this.head = this.head.next;\n        --this.length;\n        return ret;\n    }\n    clear() {\n        this.head = this.tail = null;\n        this.length = 0;\n    }\n    join(s) {\n        if (this.length === 0) return \"\";\n        let p = this.head;\n        let ret = \"\" + p.data;\n        while((p = p.next) !== null)ret += s + p.data;\n        return ret;\n    }\n    concat(n) {\n        if (this.length === 0) return Buffer.alloc(0);\n        const ret = Buffer.allocUnsafe(n >>> 0);\n        let p = this.head;\n        let i = 0;\n        while(p){\n            TypedArrayPrototypeSet(ret, p.data, i);\n            i += p.data.length;\n            p = p.next;\n        }\n        return ret;\n    }\n    // Consumes a specified amount of bytes or characters from the buffered data.\n    consume(n, hasStrings) {\n        const data = this.head.data;\n        if (n < data.length) {\n            // `slice` is the same for buffers and strings.\n            const slice = data.slice(0, n);\n            this.head.data = data.slice(n);\n            return slice;\n        }\n        if (n === data.length) {\n            // First chunk is a perfect match.\n            return this.shift();\n        }\n        // Result spans more than one buffer.\n        return hasStrings ? this._getString(n) : this._getBuffer(n);\n    }\n    first() {\n        return this.head.data;\n    }\n    *[SymbolIterator]() {\n        for(let p = this.head; p; p = p.next){\n            yield p.data;\n        }\n    }\n    // Consumes a specified amount of characters from the buffered data.\n    _getString(n) {\n        let ret = \"\";\n        let p = this.head;\n        let c = 0;\n        do {\n            const str = p.data;\n            if (n > str.length) {\n                ret += str;\n                n -= str.length;\n            } else {\n                if (n === str.length) {\n                    ret += str;\n                    ++c;\n                    if (p.next) this.head = p.next;\n                    else this.head = this.tail = null;\n                } else {\n                    ret += StringPrototypeSlice(str, 0, n);\n                    this.head = p;\n                    p.data = StringPrototypeSlice(str, n);\n                }\n                break;\n            }\n            ++c;\n        }while ((p = p.next) !== null);\n        this.length -= c;\n        return ret;\n    }\n    // Consumes a specified amount of bytes from the buffered data.\n    _getBuffer(n) {\n        const ret = Buffer.allocUnsafe(n);\n        const retLen = n;\n        let p = this.head;\n        let c = 0;\n        do {\n            const buf = p.data;\n            if (n > buf.length) {\n                TypedArrayPrototypeSet(ret, buf, retLen - n);\n                n -= buf.length;\n            } else {\n                if (n === buf.length) {\n                    TypedArrayPrototypeSet(ret, buf, retLen - n);\n                    ++c;\n                    if (p.next) this.head = p.next;\n                    else this.head = this.tail = null;\n                } else {\n                    TypedArrayPrototypeSet(ret, new Uint8Array(buf.buffer, buf.byteOffset, n), retLen - n);\n                    this.head = p;\n                    p.data = buf.slice(n);\n                }\n                break;\n            }\n            ++c;\n        }while ((p = p.next) !== null);\n        this.length -= c;\n        return ret;\n    }\n    // Make sure the linked list only shows the minimal necessary information.\n    [Symbol.for(\"nodejs.util.inspect.custom\")](_, options) {\n        return inspect(this, {\n            ...options,\n            // Only inspect one level.\n            depth: 0,\n            // It should not recurse.\n            customInspect: false\n        });\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/buffer_list.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/compose.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/compose.js ***!
  \***************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { pipeline } = __webpack_require__(/*! ./pipeline */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/pipeline.js\");\nconst Duplex = __webpack_require__(/*! ./duplex */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\");\nconst { destroyer } = __webpack_require__(/*! ./destroy */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nconst { isNodeStream, isReadable, isWritable, isWebStream, isTransformStream, isWritableStream, isReadableStream } = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\");\nconst { AbortError, codes: { ERR_INVALID_ARG_VALUE, ERR_MISSING_ARGS } } = __webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst eos = __webpack_require__(/*! ./end-of-stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\nmodule.exports = function compose(...streams) {\n    if (streams.length === 0) {\n        throw new ERR_MISSING_ARGS(\"streams\");\n    }\n    if (streams.length === 1) {\n        return Duplex.from(streams[0]);\n    }\n    const orgStreams = [\n        ...streams\n    ];\n    if (typeof streams[0] === \"function\") {\n        streams[0] = Duplex.from(streams[0]);\n    }\n    if (typeof streams[streams.length - 1] === \"function\") {\n        const idx = streams.length - 1;\n        streams[idx] = Duplex.from(streams[idx]);\n    }\n    for(let n = 0; n < streams.length; ++n){\n        if (!isNodeStream(streams[n]) && !isWebStream(streams[n])) {\n            continue;\n        }\n        if (n < streams.length - 1 && !(isReadable(streams[n]) || isReadableStream(streams[n]) || isTransformStream(streams[n]))) {\n            throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], \"must be readable\");\n        }\n        if (n > 0 && !(isWritable(streams[n]) || isWritableStream(streams[n]) || isTransformStream(streams[n]))) {\n            throw new ERR_INVALID_ARG_VALUE(`streams[${n}]`, orgStreams[n], \"must be writable\");\n        }\n    }\n    let ondrain;\n    let onfinish;\n    let onreadable;\n    let onclose;\n    let d;\n    function onfinished(err) {\n        const cb = onclose;\n        onclose = null;\n        if (cb) {\n            cb(err);\n        } else if (err) {\n            d.destroy(err);\n        } else if (!readable && !writable) {\n            d.destroy();\n        }\n    }\n    const head = streams[0];\n    const tail = pipeline(streams, onfinished);\n    const writable = !!(isWritable(head) || isWritableStream(head) || isTransformStream(head));\n    const readable = !!(isReadable(tail) || isReadableStream(tail) || isTransformStream(tail));\n    // TODO(ronag): Avoid double buffering.\n    // Implement Writable/Readable/Duplex traits.\n    // See, https://github.com/nodejs/node/pull/33515.\n    d = new Duplex({\n        // TODO (ronag): highWaterMark?\n        writableObjectMode: !!(head !== null && head !== undefined && head.writableObjectMode),\n        readableObjectMode: !!(tail !== null && tail !== undefined && tail.writableObjectMode),\n        writable,\n        readable\n    });\n    if (writable) {\n        if (isNodeStream(head)) {\n            d._write = function(chunk, encoding, callback) {\n                if (head.write(chunk, encoding)) {\n                    callback();\n                } else {\n                    ondrain = callback;\n                }\n            };\n            d._final = function(callback) {\n                head.end();\n                onfinish = callback;\n            };\n            head.on(\"drain\", function() {\n                if (ondrain) {\n                    const cb = ondrain;\n                    ondrain = null;\n                    cb();\n                }\n            });\n        } else if (isWebStream(head)) {\n            const writable = isTransformStream(head) ? head.writable : head;\n            const writer = writable.getWriter();\n            d._write = async function(chunk, encoding, callback) {\n                try {\n                    await writer.ready;\n                    writer.write(chunk).catch(()=>{});\n                    callback();\n                } catch (err) {\n                    callback(err);\n                }\n            };\n            d._final = async function(callback) {\n                try {\n                    await writer.ready;\n                    writer.close().catch(()=>{});\n                    onfinish = callback;\n                } catch (err) {\n                    callback(err);\n                }\n            };\n        }\n        const toRead = isTransformStream(tail) ? tail.readable : tail;\n        eos(toRead, ()=>{\n            if (onfinish) {\n                const cb = onfinish;\n                onfinish = null;\n                cb();\n            }\n        });\n    }\n    if (readable) {\n        if (isNodeStream(tail)) {\n            tail.on(\"readable\", function() {\n                if (onreadable) {\n                    const cb = onreadable;\n                    onreadable = null;\n                    cb();\n                }\n            });\n            tail.on(\"end\", function() {\n                d.push(null);\n            });\n            d._read = function() {\n                while(true){\n                    const buf = tail.read();\n                    if (buf === null) {\n                        onreadable = d._read;\n                        return;\n                    }\n                    if (!d.push(buf)) {\n                        return;\n                    }\n                }\n            };\n        } else if (isWebStream(tail)) {\n            const readable = isTransformStream(tail) ? tail.readable : tail;\n            const reader = readable.getReader();\n            d._read = async function() {\n                while(true){\n                    try {\n                        const { value, done } = await reader.read();\n                        if (!d.push(value)) {\n                            return;\n                        }\n                        if (done) {\n                            d.push(null);\n                            return;\n                        }\n                    } catch  {\n                        return;\n                    }\n                }\n            };\n        }\n    }\n    d._destroy = function(err, callback) {\n        if (!err && onclose !== null) {\n            err = new AbortError();\n        }\n        onreadable = null;\n        ondrain = null;\n        onfinish = null;\n        if (onclose === null) {\n            callback(err);\n        } else {\n            onclose = callback;\n            if (isNodeStream(tail)) {\n                destroyer(tail, err);\n            }\n        }\n    };\n    return d;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvY29tcG9zZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsUUFBUSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQzdCLE1BQU1DLFNBQVNELG1CQUFPQSxDQUFDO0FBQ3ZCLE1BQU0sRUFBRUUsU0FBUyxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBQzlCLE1BQU0sRUFDSkcsWUFBWSxFQUNaQyxVQUFVLEVBQ1ZDLFVBQVUsRUFDVkMsV0FBVyxFQUNYQyxpQkFBaUIsRUFDakJDLGdCQUFnQixFQUNoQkMsZ0JBQWdCLEVBQ2pCLEdBQUdULG1CQUFPQSxDQUFDO0FBQ1osTUFBTSxFQUNKVSxVQUFVLEVBQ1ZDLE9BQU8sRUFBRUMscUJBQXFCLEVBQUVDLGdCQUFnQixFQUFFLEVBQ25ELEdBQUdiLG1CQUFPQSxDQUFDO0FBQ1osTUFBTWMsTUFBTWQsbUJBQU9BLENBQUM7QUFDcEJlLE9BQU9DLE9BQU8sR0FBRyxTQUFTQyxRQUFRLEdBQUdDLE9BQU87SUFDMUMsSUFBSUEsUUFBUUMsTUFBTSxLQUFLLEdBQUc7UUFDeEIsTUFBTSxJQUFJTixpQkFBaUI7SUFDN0I7SUFDQSxJQUFJSyxRQUFRQyxNQUFNLEtBQUssR0FBRztRQUN4QixPQUFPbEIsT0FBT21CLElBQUksQ0FBQ0YsT0FBTyxDQUFDLEVBQUU7SUFDL0I7SUFDQSxNQUFNRyxhQUFhO1dBQUlIO0tBQVE7SUFDL0IsSUFBSSxPQUFPQSxPQUFPLENBQUMsRUFBRSxLQUFLLFlBQVk7UUFDcENBLE9BQU8sQ0FBQyxFQUFFLEdBQUdqQixPQUFPbUIsSUFBSSxDQUFDRixPQUFPLENBQUMsRUFBRTtJQUNyQztJQUNBLElBQUksT0FBT0EsT0FBTyxDQUFDQSxRQUFRQyxNQUFNLEdBQUcsRUFBRSxLQUFLLFlBQVk7UUFDckQsTUFB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SUFBSSxDQUFDRSxNQUFNO3dCQUNoQjtvQkFDRjtnQkFDRjtZQUNGO1FBQ0YsT0FBTyxJQUFJbEQsWUFBWThCLE9BQU87WUFDNUIsTUFBTUgsV0FBVzFCLGtCQUFrQjZCLFFBQVFBLEtBQUtILFFBQVEsR0FBR0c7WUFDM0QsTUFBTXNCLFNBQVN6QixTQUFTMEIsU0FBUztZQUNqQy9CLEVBQUUyQixLQUFLLEdBQUc7Z0JBQ1IsTUFBTyxLQUFNO29CQUNYLElBQUk7d0JBQ0YsTUFBTSxFQUFFSyxLQUFLLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU1ILE9BQU9ELElBQUk7d0JBQ3pDLElBQUksQ0FBQzdCLEVBQUUwQixJQUFJLENBQUNNLFFBQVE7NEJBQ2xCO3dCQUNGO3dCQUNBLElBQUlDLE1BQU07NEJBQ1JqQyxFQUFFMEIsSUFBSSxDQUFDOzRCQUNQO3dCQUNGO29CQUNGLEVBQUUsT0FBTTt3QkFDTjtvQkFDRjtnQkFDRjtZQUNGO1FBQ0Y7SUFDRjtJQUNBMUIsRUFBRWtDLFFBQVEsR0FBRyxTQUFVaEMsR0FBRyxFQUFFYSxRQUFRO1FBQ2xDLElBQUksQ0FBQ2IsT0FBT0gsWUFBWSxNQUFNO1lBQzVCRyxNQUFNLElBQUlwQjtRQUNaO1FBQ0FnQixhQUFhO1FBQ2JGLFVBQVU7UUFDVkMsV0FBVztRQUNYLElBQUlFLFlBQVksTUFBTTtZQUNwQmdCLFNBQVNiO1FBQ1gsT0FBTztZQUNMSCxVQUFVZ0I7WUFDVixJQUFJeEMsYUFBYWlDLE9BQU87Z0JBQ3RCbEMsVUFBVWtDLE1BQU1OO1lBQ2xCO1FBQ0Y7SUFDRjtJQUNBLE9BQU9GO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvY29tcG9zZS5qcz85YjFiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IHBpcGVsaW5lIH0gPSByZXF1aXJlKCcuL3BpcGVsaW5lJylcbmNvbnN0IER1cGxleCA9IHJlcXVpcmUoJy4vZHVwbGV4JylcbmNvbnN0IHsgZGVzdHJveWVyIH0gPSByZXF1aXJlKCcuL2Rlc3Ryb3knKVxuY29uc3Qge1xuICBpc05vZGVTdHJlYW0sXG4gIGlzUmVhZGFibGUsXG4gIGlzV3JpdGFibGUsXG4gIGlzV2ViU3RyZWFtLFxuICBpc1RyYW5zZm9ybVN0cmVhbSxcbiAgaXNXcml0YWJsZVN0cmVhbSxcbiAgaXNSZWFkYWJsZVN0cmVhbVxufSA9IHJlcXVpcmUoJy4vdXRpbHMnKVxuY29uc3Qge1xuICBBYm9ydEVycm9yLFxuICBjb2RlczogeyBFUlJfSU5WQUxJRF9BUkdfVkFMVUUsIEVSUl9NSVNTSU5HX0FSR1MgfVxufSA9IHJlcXVpcmUoJy4uLy4uL291cnMvZXJyb3JzJylcbmNvbnN0IGVvcyA9IHJlcXVpcmUoJy4vZW5kLW9mLXN0cmVhbScpXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNvbXBvc2UoLi4uc3RyZWFtcykge1xuICBpZiAoc3RyZWFtcy5sZW5ndGggPT09IDApIHtcbiAgICB0aHJvdyBuZXcgRVJSX01JU1NJTkdfQVJHUygnc3RyZWFtcycpXG4gIH1cbiAgaWYgKHN0cmVhbXMubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIER1cGxleC5mcm9tKHN0cmVhbXNbMF0pXG4gIH1cbiAgY29uc3Qgb3JnU3RyZWFtcyA9IFsuLi5zdHJlYW1zXVxuICBpZiAodHlwZW9mIHN0cmVhbXNbMF0gPT09ICdmdW5jdGlvbicpIHtcbiAgICBzdHJlYW1zWzBdID0gRHVwbGV4LmZyb20oc3RyZWFtc1swXSlcbiAgfVxuICBpZiAodHlwZW9mIHN0cmVhbXNbc3RyZWFtcy5sZW5ndGggLSAxXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnN0IGlkeCA9IHN0cmVhbXMubGVuZ3RoIC0gMVxuICAgIHN0cmVhbXNbaWR4XSA9IER1cGxleC5mcm9tKHN0cmVhbXNbaWR4XSlcbiAgfVxuICBmb3IgKGxldCBuID0gMDsgbiA8IHN0cmVhbXMubGVuZ3RoOyArK24pIHtcbiAgICBpZiAoIWlzTm9kZVN0cmVhbShzdHJlYW1zW25dKSAmJiAhaXNXZWJTdHJlYW0oc3RyZWFtc1tuXSkpIHtcbiAgICAgIC8vIFRPRE8ocm9uYWcpOiBBZGQgY2hlY2tzIGZvciBub24gc3RyZWFtcy5cbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuICAgIGlmIChcbiAgICAgIG4gPCBzdHJlYW1zLmxlbmd0aCAtIDEgJiZcbiAgICAgICEoaXNSZWFkYWJsZShzdHJlYW1zW25dKSB8fCBpc1JlYWRhYmxlU3RyZWFtKHN0cmVhbXNbbl0pIHx8IGlzVHJhbnNmb3JtU3RyZWFtKHN0cmVhbXNbbl0pKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19WQUxVRShgc3RyZWFtc1ske259XWAsIG9yZ1N0cmVhbXNbbl0sICdtdXN0IGJlIHJlYWRhYmxlJylcbiAgICB9XG4gICAgaWYgKG4gPiAwICYmICEoaXNXcml0YWJsZShzdHJlYW1zW25dKSB8fCBpc1dyaXRhYmxlU3RyZWFtKHN0cmVhbXNbbl0pIHx8IGlzVHJhbnNmb3JtU3RyZWFtKHN0cmVhbXNbbl0pKSkge1xuICAgICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19WQUxVRShgc3RyZWFtc1ske259XWAsIG9yZ1N0cmVhbXNbbl0sICdtdXN0IGJlIHdyaXRhYmxlJylcbiAgICB9XG4gIH1cbiAgbGV0IG9uZHJhaW5cbiAgbGV0IG9uZmluaXNoXG4gIGxldCBvbnJlYWRhYmxlXG4gIGxldCBvbmNsb3NlXG4gIGxldCBkXG4gIGZ1bmN0aW9uIG9uZmluaXNoZWQoZXJyKSB7XG4gICAgY29uc3QgY2IgPSBvbmNsb3NlXG4gICAgb25jbG9zZSA9IG51bGxcbiAgICBpZiAoY2IpIHtcbiAgICAgIGNiKGVycilcbiAgICB9IGVsc2UgaWYgKGVycikge1xuICAgICAgZC5kZXN0cm95KGVycilcbiAgICB9IGVsc2UgaWYgKCFyZWFkYWJsZSAmJiAhd3JpdGFibGUpIHtcbiAgICAgIGQuZGVzdHJveSgpXG4gICAgfVxuICB9XG4gIGNvbnN0IGhlYWQgPSBzdHJlYW1zWzBdXG4gIGNvbnN0IHRhaWwgPSBwaXBlbGluZShzdHJlYW1zLCBvbmZpbmlzaGVkKVxuICBjb25zdCB3cml0YWJsZSA9ICEhKGlzV3JpdGFibGUoaGVhZCkgfHwgaXNXcml0YWJsZVN0cmVhbShoZWFkKSB8fCBpc1RyYW5zZm9ybVN0cmVhbShoZWFkKSlcbiAgY29uc3QgcmVhZGFibGUgPSAhIShpc1JlYWRhYmxlKHRhaWwpIHx8IGlzUmVhZGFibGVTdHJlYW0odGFpbCkgfHwgaXNUcmFuc2Zvcm1TdHJlYW0odGFpbCkpXG5cbiAgLy8gVE9ETyhyb25hZyk6IEF2b2lkIGRvdWJsZSBidWZmZXJpbmcuXG4gIC8vIEltcGxlbWVudCBXcml0YWJsZS9SZWFkYWJsZS9EdXBsZXggdHJhaXRzLlxuICAvLyBTZWUsIGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9wdWxsLzMzNTE1LlxuICBkID0gbmV3IER1cGxleCh7XG4gICAgLy8gVE9ETyAocm9uYWcpOiBoaWdoV2F0ZXJNYXJrP1xuICAgIHdyaXRhYmxlT2JqZWN0TW9kZTogISEoaGVhZCAhPT0gbnVsbCAmJiBoZWFkICE9PSB1bmRlZmluZWQgJiYgaGVhZC53cml0YWJsZU9iamVjdE1vZGUpLFxuICAgIHJlYWRhYmxlT2JqZWN0TW9kZTogISEodGFpbCAhPT0gbnVsbCAmJiB0YWlsICE9PSB1bmRlZmluZWQgJiYgdGFpbC53cml0YWJsZU9iamVjdE1vZGUpLFxuICAgIHdyaXRhYmxlLFxuICAgIHJlYWRhYmxlXG4gIH0pXG4gIGlmICh3cml0YWJsZSkge1xuICAgIGlmIChpc05vZGVTdHJlYW0oaGVhZCkpIHtcbiAgICAgIGQuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgICAgICAgaWYgKGhlYWQud3JpdGUoY2h1bmssIGVuY29kaW5nKSkge1xuICAgICAgICAgIGNhbGxiYWNrKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvbmRyYWluID0gY2FsbGJhY2tcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZC5fZmluYWwgPSBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgaGVhZC5lbmQoKVxuICAgICAgICBvbmZpbmlzaCA9IGNhbGxiYWNrXG4gICAgICB9XG4gICAgICBoZWFkLm9uKCdkcmFpbicsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKG9uZHJhaW4pIHtcbiAgICAgICAgICBjb25zdCBjYiA9IG9uZHJhaW5cbiAgICAgICAgICBvbmRyYWluID0gbnVsbFxuICAgICAgICAgIGNiKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9IGVsc2UgaWYgKGlzV2ViU3RyZWFtKGhlYWQpKSB7XG4gICAgICBjb25zdCB3cml0YWJsZSA9IGlzVHJhbnNmb3JtU3RyZWFtKGhlYWQpID8gaGVhZC53cml0YWJsZSA6IGhlYWRcbiAgICAgIGNvbnN0IHdyaXRlciA9IHdyaXRhYmxlLmdldFdyaXRlcigpXG4gICAgICBkLl93cml0ZSA9IGFzeW5jIGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgYXdhaXQgd3JpdGVyLnJlYWR5XG4gICAgICAgICAgd3JpdGVyLndyaXRlKGNodW5rKS5jYXRjaCgoKSA9PiB7fSlcbiAgICAgICAgICBjYWxsYmFjaygpXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZC5fZmluYWwgPSBhc3luYyBmdW5jdGlvbiAoY2FsbGJhY2spIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBhd2FpdCB3cml0ZXIucmVhZHlcbiAgICAgICAgICB3cml0ZXIuY2xvc2UoKS5jYXRjaCgoKSA9PiB7fSlcbiAgICAgICAgICBvbmZpbmlzaCA9IGNhbGxiYWNrXG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIGNhbGxiYWNrKGVycilcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBjb25zdCB0b1JlYWQgPSBpc1RyYW5zZm9ybVN0cmVhbSh0YWlsKSA/IHRhaWwucmVhZGFibGUgOiB0YWlsXG4gICAgZW9zKHRvUmVhZCwgKCkgPT4ge1xuICAgICAgaWYgKG9uZmluaXNoKSB7XG4gICAgICAgIGNvbnN0IGNiID0gb25maW5pc2hcbiAgICAgICAgb25maW5pc2ggPSBudWxsXG4gICAgICAgIGNiKClcbiAgICAgIH1cbiAgICB9KVxuICB9XG4gIGlmIChyZWFkYWJsZSkge1xuICAgIGlmIChpc05vZGVTdHJlYW0odGFpbCkpIHtcbiAgICAgIHRhaWwub24oJ3JlYWRhYmxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAob25yZWFkYWJsZSkge1xuICAgICAgICAgIGNvbnN0IGNiID0gb25yZWFkYWJsZVxuICAgICAgICAgIG9ucmVhZGFibGUgPSBudWxsXG4gICAgICAgICAgY2IoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgICAgdGFpbC5vbignZW5kJywgZnVuY3Rpb24gKCkge1xuICAgICAgICBkLnB1c2gobnVsbClcbiAgICAgIH0pXG4gICAgICBkLl9yZWFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIGNvbnN0IGJ1ZiA9IHRhaWwucmVhZCgpXG4gICAgICAgICAgaWYgKGJ1ZiA9PT0gbnVsbCkge1xuICAgICAgICAgICAgb25yZWFkYWJsZSA9IGQuX3JlYWRcbiAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWQucHVzaChidWYpKSB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzV2ViU3RyZWFtKHRhaWwpKSB7XG4gICAgICBjb25zdCByZWFkYWJsZSA9IGlzVHJhbnNmb3JtU3RyZWFtKHRhaWwpID8gdGFpbC5yZWFkYWJsZSA6IHRhaWxcbiAgICAgIGNvbnN0IHJlYWRlciA9IHJlYWRhYmxlLmdldFJlYWRlcigpXG4gICAgICBkLl9yZWFkID0gYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBjb25zdCB7IHZhbHVlLCBkb25lIH0gPSBhd2FpdCByZWFkZXIucmVhZCgpXG4gICAgICAgICAgICBpZiAoIWQucHVzaCh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgICAgICBkLnB1c2gobnVsbClcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgICByZXR1cm5cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgZC5fZGVzdHJveSA9IGZ1bmN0aW9uIChlcnIsIGNhbGxiYWNrKSB7XG4gICAgaWYgKCFlcnIgJiYgb25jbG9zZSAhPT0gbnVsbCkge1xuICAgICAgZXJyID0gbmV3IEFib3J0RXJyb3IoKVxuICAgIH1cbiAgICBvbnJlYWRhYmxlID0gbnVsbFxuICAgIG9uZHJhaW4gPSBudWxsXG4gICAgb25maW5pc2ggPSBudWxsXG4gICAgaWYgKG9uY2xvc2UgPT09IG51bGwpIHtcbiAgICAgIGNhbGxiYWNrKGVycilcbiAgICB9IGVsc2Uge1xuICAgICAgb25jbG9zZSA9IGNhbGxiYWNrXG4gICAgICBpZiAoaXNOb2RlU3RyZWFtKHRhaWwpKSB7XG4gICAgICAgIGRlc3Ryb3llcih0YWlsLCBlcnIpXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBkXG59XG4iXSwibmFtZXMiOlsicGlwZWxpbmUiLCJyZXF1aXJlIiwiRHVwbGV4IiwiZGVzdHJveWVyIiwiaXNOb2RlU3RyZWFtIiwiaXNSZWFkYWJsZSIsImlzV3JpdGFibGUiLCJpc1dlYlN0cmVhbSIsImlzVHJhbnNmb3JtU3RyZWFtIiwiaXNXcml0YWJsZVN0cmVhbSIsImlzUmVhZGFibGVTdHJlYW0iLCJBYm9ydEVycm9yIiwiY29kZXMiLCJFUlJfSU5WQUxJRF9BUkdfVkFMVUUiLCJFUlJfTUlTU0lOR19BUkdTIiwiZW9zIiwibW9kdWxlIiwiZXhwb3J0cyIsImNvbXBvc2UiLCJzdHJlYW1zIiwibGVuZ3RoIiwiZnJvbSIsIm9yZ1N0cmVhbXMiLCJpZHgiLCJuIiwib25kcmFpbiIsIm9uZmluaXNoIiwib25yZWFkYWJsZSIsIm9uY2xvc2UiLCJkIiwib25maW5pc2hlZCIsImVyciIsImNiIiwiZGVzdHJveSIsInJlYWRhYmxlIiwid3JpdGFibGUiLCJoZWFkIiwidGFpbCIsIndyaXRhYmxlT2JqZWN0TW9kZSIsInVuZGVmaW5lZCIsInJlYWRhYmxlT2JqZWN0TW9kZSIsIl93cml0ZSIsImNodW5rIiwiZW5jb2RpbmciLCJjYWxsYmFjayIsIndyaXRlIiwiX2ZpbmFsIiwiZW5kIiwib24iLCJ3cml0ZXIiLCJnZXRXcml0ZXIiLCJyZWFkeSIsImNhdGNoIiwiY2xvc2UiLCJ0b1JlYWQiLCJwdXNoIiwiX3JlYWQiLCJidWYiLCJyZWFkIiwicmVhZGVyIiwiZ2V0UmVhZGVyIiwidmFsdWUiLCJkb25lIiwiX2Rlc3Ryb3kiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/compose.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/destroy.js":
/*!***************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/destroy.js ***!
  \***************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/* replacement start */ const process = __webpack_require__(/*! process/ */ \"(ssr)/./node_modules/process/index.js\");\n/* replacement end */ const { aggregateTwoErrors, codes: { ERR_MULTIPLE_CALLBACK }, AbortError } = __webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst { Symbol } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst { kDestroyed, isDestroyed, isFinished, isServerRequest } = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\");\nconst kDestroy = Symbol(\"kDestroy\");\nconst kConstruct = Symbol(\"kConstruct\");\nfunction checkError(err, w, r) {\n    if (err) {\n        // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n        err.stack // eslint-disable-line no-unused-expressions\n        ;\n        if (w && !w.errored) {\n            w.errored = err;\n        }\n        if (r && !r.errored) {\n            r.errored = err;\n        }\n    }\n}\n// Backwards compat. cb() is undocumented and unused in core but\n// unfortunately might be used by modules.\nfunction destroy(err, cb) {\n    const r = this._readableState;\n    const w = this._writableState;\n    // With duplex streams we use the writable side for state.\n    const s = w || r;\n    if (w !== null && w !== undefined && w.destroyed || r !== null && r !== undefined && r.destroyed) {\n        if (typeof cb === \"function\") {\n            cb();\n        }\n        return this;\n    }\n    // We set destroyed to true before firing error callbacks in order\n    // to make it re-entrance safe in case destroy() is called within callbacks\n    checkError(err, w, r);\n    if (w) {\n        w.destroyed = true;\n    }\n    if (r) {\n        r.destroyed = true;\n    }\n    // If still constructing then defer calling _destroy.\n    if (!s.constructed) {\n        this.once(kDestroy, function(er) {\n            _destroy(this, aggregateTwoErrors(er, err), cb);\n        });\n    } else {\n        _destroy(this, err, cb);\n    }\n    return this;\n}\nfunction _destroy(self, err, cb) {\n    let called = false;\n    function onDestroy(err) {\n        if (called) {\n            return;\n        }\n        called = true;\n        const r = self._readableState;\n        const w = self._writableState;\n        checkError(err, w, r);\n        if (w) {\n            w.closed = true;\n        }\n        if (r) {\n            r.closed = true;\n        }\n        if (typeof cb === \"function\") {\n            cb(err);\n        }\n        if (err) {\n            process.nextTick(emitErrorCloseNT, self, err);\n        } else {\n            process.nextTick(emitCloseNT, self);\n        }\n    }\n    try {\n        self._destroy(err || null, onDestroy);\n    } catch (err) {\n        onDestroy(err);\n    }\n}\nfunction emitErrorCloseNT(self, err) {\n    emitErrorNT(self, err);\n    emitCloseNT(self);\n}\nfunction emitCloseNT(self) {\n    const r = self._readableState;\n    const w = self._writableState;\n    if (w) {\n        w.closeEmitted = true;\n    }\n    if (r) {\n        r.closeEmitted = true;\n    }\n    if (w !== null && w !== undefined && w.emitClose || r !== null && r !== undefined && r.emitClose) {\n        self.emit(\"close\");\n    }\n}\nfunction emitErrorNT(self, err) {\n    const r = self._readableState;\n    const w = self._writableState;\n    if (w !== null && w !== undefined && w.errorEmitted || r !== null && r !== undefined && r.errorEmitted) {\n        return;\n    }\n    if (w) {\n        w.errorEmitted = true;\n    }\n    if (r) {\n        r.errorEmitted = true;\n    }\n    self.emit(\"error\", err);\n}\nfunction undestroy() {\n    const r = this._readableState;\n    const w = this._writableState;\n    if (r) {\n        r.constructed = true;\n        r.closed = false;\n        r.closeEmitted = false;\n        r.destroyed = false;\n        r.errored = null;\n        r.errorEmitted = false;\n        r.reading = false;\n        r.ended = r.readable === false;\n        r.endEmitted = r.readable === false;\n    }\n    if (w) {\n        w.constructed = true;\n        w.destroyed = false;\n        w.closed = false;\n        w.closeEmitted = false;\n        w.errored = null;\n        w.errorEmitted = false;\n        w.finalCalled = false;\n        w.prefinished = false;\n        w.ended = w.writable === false;\n        w.ending = w.writable === false;\n        w.finished = w.writable === false;\n    }\n}\nfunction errorOrDestroy(stream, err, sync) {\n    // We have tests that rely on errors being emitted\n    // in the same tick, so changing this is semver major.\n    // For now when you opt-in to autoDestroy we allow\n    // the error to be emitted nextTick. In a future\n    // semver major update we should change the default to this.\n    const r = stream._readableState;\n    const w = stream._writableState;\n    if (w !== null && w !== undefined && w.destroyed || r !== null && r !== undefined && r.destroyed) {\n        return this;\n    }\n    if (r !== null && r !== undefined && r.autoDestroy || w !== null && w !== undefined && w.autoDestroy) stream.destroy(err);\n    else if (err) {\n        // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n        err.stack // eslint-disable-line no-unused-expressions\n        ;\n        if (w && !w.errored) {\n            w.errored = err;\n        }\n        if (r && !r.errored) {\n            r.errored = err;\n        }\n        if (sync) {\n            process.nextTick(emitErrorNT, stream, err);\n        } else {\n            emitErrorNT(stream, err);\n        }\n    }\n}\nfunction construct(stream, cb) {\n    if (typeof stream._construct !== \"function\") {\n        return;\n    }\n    const r = stream._readableState;\n    const w = stream._writableState;\n    if (r) {\n        r.constructed = false;\n    }\n    if (w) {\n        w.constructed = false;\n    }\n    stream.once(kConstruct, cb);\n    if (stream.listenerCount(kConstruct) > 1) {\n        // Duplex\n        return;\n    }\n    process.nextTick(constructNT, stream);\n}\nfunction constructNT(stream) {\n    let called = false;\n    function onConstruct(err) {\n        if (called) {\n            errorOrDestroy(stream, err !== null && err !== undefined ? err : new ERR_MULTIPLE_CALLBACK());\n            return;\n        }\n        called = true;\n        const r = stream._readableState;\n        const w = stream._writableState;\n        const s = w || r;\n        if (r) {\n            r.constructed = true;\n        }\n        if (w) {\n            w.constructed = true;\n        }\n        if (s.destroyed) {\n            stream.emit(kDestroy, err);\n        } else if (err) {\n            errorOrDestroy(stream, err, true);\n        } else {\n            process.nextTick(emitConstructNT, stream);\n        }\n    }\n    try {\n        stream._construct((err)=>{\n            process.nextTick(onConstruct, err);\n        });\n    } catch (err) {\n        process.nextTick(onConstruct, err);\n    }\n}\nfunction emitConstructNT(stream) {\n    stream.emit(kConstruct);\n}\nfunction isRequest(stream) {\n    return (stream === null || stream === undefined ? undefined : stream.setHeader) && typeof stream.abort === \"function\";\n}\nfunction emitCloseLegacy(stream) {\n    stream.emit(\"close\");\n}\nfunction emitErrorCloseLegacy(stream, err) {\n    stream.emit(\"error\", err);\n    process.nextTick(emitCloseLegacy, stream);\n}\n// Normalize destroy for legacy.\nfunction destroyer(stream, err) {\n    if (!stream || isDestroyed(stream)) {\n        return;\n    }\n    if (!err && !isFinished(stream)) {\n        err = new AbortError();\n    }\n    // TODO: Remove isRequest branches.\n    if (isServerRequest(stream)) {\n        stream.socket = null;\n        stream.destroy(err);\n    } else if (isRequest(stream)) {\n        stream.abort();\n    } else if (isRequest(stream.req)) {\n        stream.req.abort();\n    } else if (typeof stream.destroy === \"function\") {\n        stream.destroy(err);\n    } else if (typeof stream.close === \"function\") {\n        // TODO: Don't lose err?\n        stream.close();\n    } else if (err) {\n        process.nextTick(emitErrorCloseLegacy, stream, err);\n    } else {\n        process.nextTick(emitCloseLegacy, stream);\n    }\n    if (!stream.destroyed) {\n        stream[kDestroyed] = true;\n    }\n}\nmodule.exports = {\n    construct,\n    destroyer,\n    destroy,\n    undestroy,\n    errorOrDestroy\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/destroy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js ***!
  \**************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a duplex stream is just a stream that is both readable and writable.\n// Since JS doesn't have multiple prototype inheritance, this class\n// prototypically inherits from Readable, and then parasitically from\n// Writable.\n\nconst { ObjectDefineProperties, ObjectGetOwnPropertyDescriptor, ObjectKeys, ObjectSetPrototypeOf } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nmodule.exports = Duplex;\nconst Readable = __webpack_require__(/*! ./readable */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/readable.js\");\nconst Writable = __webpack_require__(/*! ./writable */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/writable.js\");\nObjectSetPrototypeOf(Duplex.prototype, Readable.prototype);\nObjectSetPrototypeOf(Duplex, Readable);\n{\n    const keys = ObjectKeys(Writable.prototype);\n    // Allow the keys array to be GC'ed.\n    for(let i = 0; i < keys.length; i++){\n        const method = keys[i];\n        if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];\n    }\n}function Duplex(options) {\n    if (!(this instanceof Duplex)) return new Duplex(options);\n    Readable.call(this, options);\n    Writable.call(this, options);\n    if (options) {\n        this.allowHalfOpen = options.allowHalfOpen !== false;\n        if (options.readable === false) {\n            this._readableState.readable = false;\n            this._readableState.ended = true;\n            this._readableState.endEmitted = true;\n        }\n        if (options.writable === false) {\n            this._writableState.writable = false;\n            this._writableState.ending = true;\n            this._writableState.ended = true;\n            this._writableState.finished = true;\n        }\n    } else {\n        this.allowHalfOpen = true;\n    }\n}\nObjectDefineProperties(Duplex.prototype, {\n    writable: {\n        __proto__: null,\n        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, \"writable\")\n    },\n    writableHighWaterMark: {\n        __proto__: null,\n        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, \"writableHighWaterMark\")\n    },\n    writableObjectMode: {\n        __proto__: null,\n        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, \"writableObjectMode\")\n    },\n    writableBuffer: {\n        __proto__: null,\n        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, \"writableBuffer\")\n    },\n    writableLength: {\n        __proto__: null,\n        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, \"writableLength\")\n    },\n    writableFinished: {\n        __proto__: null,\n        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, \"writableFinished\")\n    },\n    writableCorked: {\n        __proto__: null,\n        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, \"writableCorked\")\n    },\n    writableEnded: {\n        __proto__: null,\n        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, \"writableEnded\")\n    },\n    writableNeedDrain: {\n        __proto__: null,\n        ...ObjectGetOwnPropertyDescriptor(Writable.prototype, \"writableNeedDrain\")\n    },\n    destroyed: {\n        __proto__: null,\n        get () {\n            if (this._readableState === undefined || this._writableState === undefined) {\n                return false;\n            }\n            return this._readableState.destroyed && this._writableState.destroyed;\n        },\n        set (value) {\n            // Backward compatibility, the user is explicitly\n            // managing destroyed.\n            if (this._readableState && this._writableState) {\n                this._readableState.destroyed = value;\n                this._writableState.destroyed = value;\n            }\n        }\n    }\n});\nlet webStreamsAdapters;\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n    if (webStreamsAdapters === undefined) webStreamsAdapters = {};\n    return webStreamsAdapters;\n}\nDuplex.fromWeb = function(pair, options) {\n    return lazyWebStreams().newStreamDuplexFromReadableWritablePair(pair, options);\n};\nDuplex.toWeb = function(duplex) {\n    return lazyWebStreams().newReadableWritablePairFromDuplex(duplex);\n};\nlet duplexify;\nDuplex.from = function(body) {\n    if (!duplexify) {\n        duplexify = __webpack_require__(/*! ./duplexify */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplexify.js\");\n    }\n    return duplexify(body, \"body\");\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZHVwbGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUN0RCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLGdFQUFnRTtBQUNoRSxzRUFBc0U7QUFDdEUsc0VBQXNFO0FBQ3RFLDRFQUE0RTtBQUM1RSxxRUFBcUU7QUFDckUsd0JBQXdCO0FBQ3hCLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUseURBQXlEO0FBQ3pELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsNkRBQTZEO0FBQzdELDRFQUE0RTtBQUM1RSwyRUFBMkU7QUFDM0Usd0VBQXdFO0FBQ3hFLDRFQUE0RTtBQUM1RSx5Q0FBeUM7QUFFekMsdUVBQXVFO0FBQ3ZFLG1FQUFtRTtBQUNuRSxxRUFBcUU7QUFDckUsWUFBWTtBQUVaO0FBRUEsTUFBTSxFQUNKQSxzQkFBc0IsRUFDdEJDLDhCQUE4QixFQUM5QkMsVUFBVSxFQUNWQyxvQkFBb0IsRUFDckIsR0FBR0MsbUJBQU9BLENBQUM7QUFDWkMsT0FBT0MsT0FBTyxHQUFHQztBQUNqQixNQUFNQyxXQUFXSixtQkFBT0EsQ0FBQztBQUN6QixNQUFNSyxXQUFXTCxtQkFBT0EsQ0FBQztBQUN6QkQscUJBQXFCSSxPQUFPRyxTQUFTLEVBQUVGLFNBQVNFLFNBQVM7QUFDekRQLHFCQUFxQkksUUFBUUM7QUFDN0I7SUFDRSxNQUFNRyxPQUFPVCxXQUFXTyxTQUFTQyxTQUFTO0lBQzFDLG9DQUFvQztJQUNwQyxJQUFLLElBQUlFLElBQUksR0FBR0EsSUFBSUQsS0FBS0UsTUFBTSxFQUFFRCxJQUFLO1FBQ3BDLE1BQU1FLFNBQVNILElBQUksQ0FBQ0MsRUFBRTtRQUN0QixJQUFJLENBQUNMLE9BQU9HLFNBQVMsQ0FBQ0ksT0FBTyxFQUFFUCxPQUFPRyxTQUFTLENBQUNJLE9BQU8sR0FBR0wsU0FB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akMsT0FBT21DLE9BQU8sR0FBRyxTQUFVQyxJQUFJLEVBQUU1QixPQUFPO0lBQ3RDLE9BQU8wQixpQkFBaUJHLHVDQUF1QyxDQUFDRCxNQUFNNUI7QUFDeEU7QUFDQVIsT0FBT3NDLEtBQUssR0FBRyxTQUFVQyxNQUFNO0lBQzdCLE9BQU9MLGlCQUFpQk0saUNBQWlDLENBQUNEO0FBQzVEO0FBQ0EsSUFBSUU7QUFDSnpDLE9BQU8wQyxJQUFJLEdBQUcsU0FBVUMsSUFBSTtJQUMxQixJQUFJLENBQUNGLFdBQVc7UUFDZEEsWUFBWTVDLG1CQUFPQSxDQUFDO0lBQ3RCO0lBQ0EsT0FBTzRDLFVBQVVFLE1BQU07QUFDekIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZHVwbGV4LmpzPzViY2IiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbi8vIGEgZHVwbGV4IHN0cmVhbSBpcyBqdXN0IGEgc3RyZWFtIHRoYXQgaXMgYm90aCByZWFkYWJsZSBhbmQgd3JpdGFibGUuXG4vLyBTaW5jZSBKUyBkb2Vzbid0IGhhdmUgbXVsdGlwbGUgcHJvdG90eXBlIGluaGVyaXRhbmNlLCB0aGlzIGNsYXNzXG4vLyBwcm90b3R5cGljYWxseSBpbmhlcml0cyBmcm9tIFJlYWRhYmxlLCBhbmQgdGhlbiBwYXJhc2l0aWNhbGx5IGZyb21cbi8vIFdyaXRhYmxlLlxuXG4ndXNlIHN0cmljdCdcblxuY29uc3Qge1xuICBPYmplY3REZWZpbmVQcm9wZXJ0aWVzLFxuICBPYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IsXG4gIE9iamVjdEtleXMsXG4gIE9iamVjdFNldFByb3RvdHlwZU9mXG59ID0gcmVxdWlyZSgnLi4vLi4vb3Vycy9wcmltb3JkaWFscycpXG5tb2R1bGUuZXhwb3J0cyA9IER1cGxleFxuY29uc3QgUmVhZGFibGUgPSByZXF1aXJlKCcuL3JlYWRhYmxlJylcbmNvbnN0IFdyaXRhYmxlID0gcmVxdWlyZSgnLi93cml0YWJsZScpXG5PYmplY3RTZXRQcm90b3R5cGVPZihEdXBsZXgucHJvdG90eXBlLCBSZWFkYWJsZS5wcm90b3R5cGUpXG5PYmplY3RTZXRQcm90b3R5cGVPZihEdXBsZXgsIFJlYWRhYmxlKVxue1xuICBjb25zdCBrZXlzID0gT2JqZWN0S2V5cyhXcml0YWJsZS5wcm90b3R5cGUpXG4gIC8vIEFsbG93IHRoZSBrZXlzIGFycmF5IHRvIGJlIEdDJ2VkLlxuICBmb3IgKGxldCBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBtZXRob2QgPSBrZXlzW2ldXG4gICAgaWYgKCFEdXBsZXgucHJvdG90eXBlW21ldGhvZF0pIER1cGxleC5wcm90b3R5cGVbbWV0aG9kXSA9IFdyaXRhYmxlLnByb3RvdHlwZVttZXRob2RdXG4gIH1cbn1cbmZ1bmN0aW9uIER1cGxleChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBEdXBsZXgpKSByZXR1cm4gbmV3IER1cGxleChvcHRpb25zKVxuICBSZWFkYWJsZS5jYWxsKHRoaXMsIG9wdGlvbnMpXG4gIFdyaXRhYmxlLmNhbGwodGhpcywgb3B0aW9ucylcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICB0aGlzLmFsbG93SGFsZk9wZW4gPSBvcHRpb25zLmFsbG93SGFsZk9wZW4gIT09IGZhbHNlXG4gICAgaWYgKG9wdGlvbnMucmVhZGFibGUgPT09IGZhbHNlKSB7XG4gICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLnJlYWRhYmxlID0gZmFsc2VcbiAgICAgIHRoaXMuX3JlYWRhYmxlU3RhdGUuZW5kZWQgPSB0cnVlXG4gICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuZEVtaXR0ZWQgPSB0cnVlXG4gICAgfVxuICAgIGlmIChvcHRpb25zLndyaXRhYmxlID09PSBmYWxzZSkge1xuICAgICAgdGhpcy5fd3JpdGFibGVTdGF0ZS53cml0YWJsZSA9IGZhbHNlXG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmVuZGluZyA9IHRydWVcbiAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQgPSB0cnVlXG4gICAgICB0aGlzLl93cml0YWJsZVN0YXRlLmZpbmlzaGVkID0gdHJ1ZVxuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB0aGlzLmFsbG93SGFsZk9wZW4gPSB0cnVlXG4gIH1cbn1cbk9iamVjdERlZmluZVByb3BlcnRpZXMoRHVwbGV4LnByb3RvdHlwZSwge1xuICB3cml0YWJsZToge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAuLi5PYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGUnKVxuICB9LFxuICB3cml0YWJsZUhpZ2hXYXRlck1hcms6IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgLi4uT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlSGlnaFdhdGVyTWFyaycpXG4gIH0sXG4gIHdyaXRhYmxlT2JqZWN0TW9kZToge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAuLi5PYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVPYmplY3RNb2RlJylcbiAgfSxcbiAgd3JpdGFibGVCdWZmZXI6IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgLi4uT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlQnVmZmVyJylcbiAgfSxcbiAgd3JpdGFibGVMZW5ndGg6IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgLi4uT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlTGVuZ3RoJylcbiAgfSxcbiAgd3JpdGFibGVGaW5pc2hlZDoge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAuLi5PYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVGaW5pc2hlZCcpXG4gIH0sXG4gIHdyaXRhYmxlQ29ya2VkOiB7XG4gICAgX19wcm90b19fOiBudWxsLFxuICAgIC4uLk9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvcihXcml0YWJsZS5wcm90b3R5cGUsICd3cml0YWJsZUNvcmtlZCcpXG4gIH0sXG4gIHdyaXRhYmxlRW5kZWQ6IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgLi4uT2JqZWN0R2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKFdyaXRhYmxlLnByb3RvdHlwZSwgJ3dyaXRhYmxlRW5kZWQnKVxuICB9LFxuICB3cml0YWJsZU5lZWREcmFpbjoge1xuICAgIF9fcHJvdG9fXzogbnVsbCxcbiAgICAuLi5PYmplY3RHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoV3JpdGFibGUucHJvdG90eXBlLCAnd3JpdGFibGVOZWVkRHJhaW4nKVxuICB9LFxuICBkZXN0cm95ZWQ6IHtcbiAgICBfX3Byb3RvX186IG51bGwsXG4gICAgZ2V0KCkge1xuICAgICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgPT09IHVuZGVmaW5lZCB8fCB0aGlzLl93cml0YWJsZVN0YXRlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5fcmVhZGFibGVTdGF0ZS5kZXN0cm95ZWQgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZXN0cm95ZWRcbiAgICB9LFxuICAgIHNldCh2YWx1ZSkge1xuICAgICAgLy8gQmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdGhlIHVzZXIgaXMgZXhwbGljaXRseVxuICAgICAgLy8gbWFuYWdpbmcgZGVzdHJveWVkLlxuICAgICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUgJiYgdGhpcy5fd3JpdGFibGVTdGF0ZSkge1xuICAgICAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlc3Ryb3llZCA9IHZhbHVlXG4gICAgICAgIHRoaXMuX3dyaXRhYmxlU3RhdGUuZGVzdHJveWVkID0gdmFsdWVcbiAgICAgIH1cbiAgICB9XG4gIH1cbn0pXG5sZXQgd2ViU3RyZWFtc0FkYXB0ZXJzXG5cbi8vIExhenkgdG8gYXZvaWQgY2lyY3VsYXIgcmVmZXJlbmNlc1xuZnVuY3Rpb24gbGF6eVdlYlN0cmVhbXMoKSB7XG4gIGlmICh3ZWJTdHJlYW1zQWRhcHRlcnMgPT09IHVuZGVmaW5lZCkgd2ViU3RyZWFtc0FkYXB0ZXJzID0ge31cbiAgcmV0dXJuIHdlYlN0cmVhbXNBZGFwdGVyc1xufVxuRHVwbGV4LmZyb21XZWIgPSBmdW5jdGlvbiAocGFpciwgb3B0aW9ucykge1xuICByZXR1cm4gbGF6eVdlYlN0cmVhbXMoKS5uZXdTdHJlYW1EdXBsZXhGcm9tUmVhZGFibGVXcml0YWJsZVBhaXIocGFpciwgb3B0aW9ucylcbn1cbkR1cGxleC50b1dlYiA9IGZ1bmN0aW9uIChkdXBsZXgpIHtcbiAgcmV0dXJuIGxhenlXZWJTdHJlYW1zKCkubmV3UmVhZGFibGVXcml0YWJsZVBhaXJGcm9tRHVwbGV4KGR1cGxleClcbn1cbmxldCBkdXBsZXhpZnlcbkR1cGxleC5mcm9tID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgaWYgKCFkdXBsZXhpZnkpIHtcbiAgICBkdXBsZXhpZnkgPSByZXF1aXJlKCcuL2R1cGxleGlmeScpXG4gIH1cbiAgcmV0dXJuIGR1cGxleGlmeShib2R5LCAnYm9keScpXG59XG4iXSwibmFtZXMiOlsiT2JqZWN0RGVmaW5lUHJvcGVydGllcyIsIk9iamVjdEdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIk9iamVjdEtleXMiLCJPYmplY3RTZXRQcm90b3R5cGVPZiIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiRHVwbGV4IiwiUmVhZGFibGUiLCJXcml0YWJsZSIsInByb3RvdHlwZSIsImtleXMiLCJpIiwibGVuZ3RoIiwibWV0aG9kIiwib3B0aW9ucyIsImNhbGwiLCJhbGxvd0hhbGZPcGVuIiwicmVhZGFibGUiLCJfcmVhZGFibGVTdGF0ZSIsImVuZGVkIiwiZW5kRW1pdHRlZCIsIndyaXRhYmxlIiwiX3dyaXRhYmxlU3RhdGUiLCJlbmRpbmciLCJmaW5pc2hlZCIsIl9fcHJvdG9fXyIsIndyaXRhYmxlSGlnaFdhdGVyTWFyayIsIndyaXRhYmxlT2JqZWN0TW9kZSIsIndyaXRhYmxlQnVmZmVyIiwid3JpdGFibGVMZW5ndGgiLCJ3cml0YWJsZUZpbmlzaGVkIiwid3JpdGFibGVDb3JrZWQiLCJ3cml0YWJsZUVuZGVkIiwid3JpdGFibGVOZWVkRHJhaW4iLCJkZXN0cm95ZWQiLCJnZXQiLCJ1bmRlZmluZWQiLCJzZXQiLCJ2YWx1ZSIsIndlYlN0cmVhbXNBZGFwdGVycyIsImxhenlXZWJTdHJlYW1zIiwiZnJvbVdlYiIsInBhaXIiLCJuZXdTdHJlYW1EdXBsZXhGcm9tUmVhZGFibGVXcml0YWJsZVBhaXIiLCJ0b1dlYiIsImR1cGxleCIsIm5ld1JlYWRhYmxlV3JpdGFibGVQYWlyRnJvbUR1cGxleCIsImR1cGxleGlmeSIsImZyb20iLCJib2R5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplexify.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplexify.js ***!
  \*****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* replacement start */ const process = __webpack_require__(/*! process/ */ \"(ssr)/./node_modules/process/index.js\") /* replacement end */ ;\n\"use strict\";\nconst bufferModule = __webpack_require__(/*! buffer */ \"buffer\");\nconst { isReadable, isWritable, isIterable, isNodeStream, isReadableNodeStream, isWritableNodeStream, isDuplexNodeStream } = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\");\nconst eos = __webpack_require__(/*! ./end-of-stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\nconst { AbortError, codes: { ERR_INVALID_ARG_TYPE, ERR_INVALID_RETURN_VALUE } } = __webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst { destroyer } = __webpack_require__(/*! ./destroy */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nconst Duplex = __webpack_require__(/*! ./duplex */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\");\nconst Readable = __webpack_require__(/*! ./readable */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/readable.js\");\nconst { createDeferredPromise } = __webpack_require__(/*! ../../ours/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\");\nconst from = __webpack_require__(/*! ./from */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/from.js\");\nconst Blob = globalThis.Blob || bufferModule.Blob;\nconst isBlob = typeof Blob !== \"undefined\" ? function isBlob(b) {\n    return b instanceof Blob;\n} : function isBlob(b) {\n    return false;\n};\nconst AbortController = globalThis.AbortController || (__webpack_require__(/*! abort-controller */ \"(ssr)/./node_modules/abort-controller/dist/abort-controller.js\").AbortController);\nconst { FunctionPrototypeCall } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\n// This is needed for pre node 17.\nclass Duplexify extends Duplex {\n    constructor(options){\n        super(options);\n        // https://github.com/nodejs/node/pull/34385\n        if ((options === null || options === undefined ? undefined : options.readable) === false) {\n            this._readableState.readable = false;\n            this._readableState.ended = true;\n            this._readableState.endEmitted = true;\n        }\n        if ((options === null || options === undefined ? undefined : options.writable) === false) {\n            this._writableState.writable = false;\n            this._writableState.ending = true;\n            this._writableState.ended = true;\n            this._writableState.finished = true;\n        }\n    }\n}\nmodule.exports = function duplexify(body, name) {\n    if (isDuplexNodeStream(body)) {\n        return body;\n    }\n    if (isReadableNodeStream(body)) {\n        return _duplexify({\n            readable: body\n        });\n    }\n    if (isWritableNodeStream(body)) {\n        return _duplexify({\n            writable: body\n        });\n    }\n    if (isNodeStream(body)) {\n        return _duplexify({\n            writable: false,\n            readable: false\n        });\n    }\n    // TODO: Webstreams\n    // if (isReadableStream(body)) {\n    //   return _duplexify({ readable: Readable.fromWeb(body) });\n    // }\n    // TODO: Webstreams\n    // if (isWritableStream(body)) {\n    //   return _duplexify({ writable: Writable.fromWeb(body) });\n    // }\n    if (typeof body === \"function\") {\n        const { value, write, final, destroy } = fromAsyncGen(body);\n        if (isIterable(value)) {\n            return from(Duplexify, value, {\n                // TODO (ronag): highWaterMark?\n                objectMode: true,\n                write,\n                final,\n                destroy\n            });\n        }\n        const then = value === null || value === undefined ? undefined : value.then;\n        if (typeof then === \"function\") {\n            let d;\n            const promise = FunctionPrototypeCall(then, value, (val)=>{\n                if (val != null) {\n                    throw new ERR_INVALID_RETURN_VALUE(\"nully\", \"body\", val);\n                }\n            }, (err)=>{\n                destroyer(d, err);\n            });\n            return d = new Duplexify({\n                // TODO (ronag): highWaterMark?\n                objectMode: true,\n                readable: false,\n                write,\n                final (cb) {\n                    final(async ()=>{\n                        try {\n                            await promise;\n                            process.nextTick(cb, null);\n                        } catch (err) {\n                            process.nextTick(cb, err);\n                        }\n                    });\n                },\n                destroy\n            });\n        }\n        throw new ERR_INVALID_RETURN_VALUE(\"Iterable, AsyncIterable or AsyncFunction\", name, value);\n    }\n    if (isBlob(body)) {\n        return duplexify(body.arrayBuffer());\n    }\n    if (isIterable(body)) {\n        return from(Duplexify, body, {\n            // TODO (ronag): highWaterMark?\n            objectMode: true,\n            writable: false\n        });\n    }\n    // TODO: Webstreams.\n    // if (\n    //   isReadableStream(body?.readable) &&\n    //   isWritableStream(body?.writable)\n    // ) {\n    //   return Duplexify.fromWeb(body);\n    // }\n    if (typeof (body === null || body === undefined ? undefined : body.writable) === \"object\" || typeof (body === null || body === undefined ? undefined : body.readable) === \"object\") {\n        const readable = body !== null && body !== undefined && body.readable ? isReadableNodeStream(body === null || body === undefined ? undefined : body.readable) ? body === null || body === undefined ? undefined : body.readable : duplexify(body.readable) : undefined;\n        const writable = body !== null && body !== undefined && body.writable ? isWritableNodeStream(body === null || body === undefined ? undefined : body.writable) ? body === null || body === undefined ? undefined : body.writable : duplexify(body.writable) : undefined;\n        return _duplexify({\n            readable,\n            writable\n        });\n    }\n    const then = body === null || body === undefined ? undefined : body.then;\n    if (typeof then === \"function\") {\n        let d;\n        FunctionPrototypeCall(then, body, (val)=>{\n            if (val != null) {\n                d.push(val);\n            }\n            d.push(null);\n        }, (err)=>{\n            destroyer(d, err);\n        });\n        return d = new Duplexify({\n            objectMode: true,\n            writable: false,\n            read () {}\n        });\n    }\n    throw new ERR_INVALID_ARG_TYPE(name, [\n        \"Blob\",\n        \"ReadableStream\",\n        \"WritableStream\",\n        \"Stream\",\n        \"Iterable\",\n        \"AsyncIterable\",\n        \"Function\",\n        \"{ readable, writable } pair\",\n        \"Promise\"\n    ], body);\n};\nfunction fromAsyncGen(fn) {\n    let { promise, resolve } = createDeferredPromise();\n    const ac = new AbortController();\n    const signal = ac.signal;\n    const value = fn(async function*() {\n        while(true){\n            const _promise = promise;\n            promise = null;\n            const { chunk, done, cb } = await _promise;\n            process.nextTick(cb);\n            if (done) return;\n            if (signal.aborted) throw new AbortError(undefined, {\n                cause: signal.reason\n            });\n            ({ promise, resolve } = createDeferredPromise());\n            yield chunk;\n        }\n    }(), {\n        signal\n    });\n    return {\n        value,\n        write (chunk, encoding, cb) {\n            const _resolve = resolve;\n            resolve = null;\n            _resolve({\n                chunk,\n                done: false,\n                cb\n            });\n        },\n        final (cb) {\n            const _resolve = resolve;\n            resolve = null;\n            _resolve({\n                done: true,\n                cb\n            });\n        },\n        destroy (err, cb) {\n            ac.abort();\n            cb(err);\n        }\n    };\n}\nfunction _duplexify(pair) {\n    const r = pair.readable && typeof pair.readable.read !== \"function\" ? Readable.wrap(pair.readable) : pair.readable;\n    const w = pair.writable;\n    let readable = !!isReadable(r);\n    let writable = !!isWritable(w);\n    let ondrain;\n    let onfinish;\n    let onreadable;\n    let onclose;\n    let d;\n    function onfinished(err) {\n        const cb = onclose;\n        onclose = null;\n        if (cb) {\n            cb(err);\n        } else if (err) {\n            d.destroy(err);\n        }\n    }\n    // TODO(ronag): Avoid double buffering.\n    // Implement Writable/Readable/Duplex traits.\n    // See, https://github.com/nodejs/node/pull/33515.\n    d = new Duplexify({\n        // TODO (ronag): highWaterMark?\n        readableObjectMode: !!(r !== null && r !== undefined && r.readableObjectMode),\n        writableObjectMode: !!(w !== null && w !== undefined && w.writableObjectMode),\n        readable,\n        writable\n    });\n    if (writable) {\n        eos(w, (err)=>{\n            writable = false;\n            if (err) {\n                destroyer(r, err);\n            }\n            onfinished(err);\n        });\n        d._write = function(chunk, encoding, callback) {\n            if (w.write(chunk, encoding)) {\n                callback();\n            } else {\n                ondrain = callback;\n            }\n        };\n        d._final = function(callback) {\n            w.end();\n            onfinish = callback;\n        };\n        w.on(\"drain\", function() {\n            if (ondrain) {\n                const cb = ondrain;\n                ondrain = null;\n                cb();\n            }\n        });\n        w.on(\"finish\", function() {\n            if (onfinish) {\n                const cb = onfinish;\n                onfinish = null;\n                cb();\n            }\n        });\n    }\n    if (readable) {\n        eos(r, (err)=>{\n            readable = false;\n            if (err) {\n                destroyer(r, err);\n            }\n            onfinished(err);\n        });\n        r.on(\"readable\", function() {\n            if (onreadable) {\n                const cb = onreadable;\n                onreadable = null;\n                cb();\n            }\n        });\n        r.on(\"end\", function() {\n            d.push(null);\n        });\n        d._read = function() {\n            while(true){\n                const buf = r.read();\n                if (buf === null) {\n                    onreadable = d._read;\n                    return;\n                }\n                if (!d.push(buf)) {\n                    return;\n                }\n            }\n        };\n    }\n    d._destroy = function(err, callback) {\n        if (!err && onclose !== null) {\n            err = new AbortError();\n        }\n        onreadable = null;\n        ondrain = null;\n        onfinish = null;\n        if (onclose === null) {\n            callback(err);\n        } else {\n            onclose = callback;\n            destroyer(w, err);\n            destroyer(r, err);\n        }\n    };\n    return d;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplexify.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js ***!
  \*********************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* replacement start */ const process = __webpack_require__(/*! process/ */ \"(ssr)/./node_modules/process/index.js\");\n\"use strict\";\nconst { AbortError, codes } = __webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst { ERR_INVALID_ARG_TYPE, ERR_STREAM_PREMATURE_CLOSE } = codes;\nconst { kEmptyObject, once } = __webpack_require__(/*! ../../ours/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\");\nconst { validateAbortSignal, validateFunction, validateObject, validateBoolean } = __webpack_require__(/*! ../validators */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/validators.js\");\nconst { Promise, PromisePrototypeThen } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst { isClosed, isReadable, isReadableNodeStream, isReadableStream, isReadableFinished, isReadableErrored, isWritable, isWritableNodeStream, isWritableStream, isWritableFinished, isWritableErrored, isNodeStream, willEmitClose: _willEmitClose, kIsClosedPromise } = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\");\nfunction isRequest(stream) {\n    return stream.setHeader && typeof stream.abort === \"function\";\n}\nconst nop = ()=>{};\nfunction eos(stream, options, callback) {\n    var _options$readable, _options$writable;\n    if (arguments.length === 2) {\n        callback = options;\n        options = kEmptyObject;\n    } else if (options == null) {\n        options = kEmptyObject;\n    } else {\n        validateObject(options, \"options\");\n    }\n    validateFunction(callback, \"callback\");\n    validateAbortSignal(options.signal, \"options.signal\");\n    callback = once(callback);\n    if (isReadableStream(stream) || isWritableStream(stream)) {\n        return eosWeb(stream, options, callback);\n    }\n    if (!isNodeStream(stream)) {\n        throw new ERR_INVALID_ARG_TYPE(\"stream\", [\n            \"ReadableStream\",\n            \"WritableStream\",\n            \"Stream\"\n        ], stream);\n    }\n    const readable = (_options$readable = options.readable) !== null && _options$readable !== undefined ? _options$readable : isReadableNodeStream(stream);\n    const writable = (_options$writable = options.writable) !== null && _options$writable !== undefined ? _options$writable : isWritableNodeStream(stream);\n    const wState = stream._writableState;\n    const rState = stream._readableState;\n    const onlegacyfinish = ()=>{\n        if (!stream.writable) {\n            onfinish();\n        }\n    };\n    // TODO (ronag): Improve soft detection to include core modules and\n    // common ecosystem modules that do properly emit 'close' but fail\n    // this generic check.\n    let willEmitClose = _willEmitClose(stream) && isReadableNodeStream(stream) === readable && isWritableNodeStream(stream) === writable;\n    let writableFinished = isWritableFinished(stream, false);\n    const onfinish = ()=>{\n        writableFinished = true;\n        // Stream should not be destroyed here. If it is that\n        // means that user space is doing something differently and\n        // we cannot trust willEmitClose.\n        if (stream.destroyed) {\n            willEmitClose = false;\n        }\n        if (willEmitClose && (!stream.readable || readable)) {\n            return;\n        }\n        if (!readable || readableFinished) {\n            callback.call(stream);\n        }\n    };\n    let readableFinished = isReadableFinished(stream, false);\n    const onend = ()=>{\n        readableFinished = true;\n        // Stream should not be destroyed here. If it is that\n        // means that user space is doing something differently and\n        // we cannot trust willEmitClose.\n        if (stream.destroyed) {\n            willEmitClose = false;\n        }\n        if (willEmitClose && (!stream.writable || writable)) {\n            return;\n        }\n        if (!writable || writableFinished) {\n            callback.call(stream);\n        }\n    };\n    const onerror = (err)=>{\n        callback.call(stream, err);\n    };\n    let closed = isClosed(stream);\n    const onclose = ()=>{\n        closed = true;\n        const errored = isWritableErrored(stream) || isReadableErrored(stream);\n        if (errored && typeof errored !== \"boolean\") {\n            return callback.call(stream, errored);\n        }\n        if (readable && !readableFinished && isReadableNodeStream(stream, true)) {\n            if (!isReadableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());\n        }\n        if (writable && !writableFinished) {\n            if (!isWritableFinished(stream, false)) return callback.call(stream, new ERR_STREAM_PREMATURE_CLOSE());\n        }\n        callback.call(stream);\n    };\n    const onclosed = ()=>{\n        closed = true;\n        const errored = isWritableErrored(stream) || isReadableErrored(stream);\n        if (errored && typeof errored !== \"boolean\") {\n            return callback.call(stream, errored);\n        }\n        callback.call(stream);\n    };\n    const onrequest = ()=>{\n        stream.req.on(\"finish\", onfinish);\n    };\n    if (isRequest(stream)) {\n        stream.on(\"complete\", onfinish);\n        if (!willEmitClose) {\n            stream.on(\"abort\", onclose);\n        }\n        if (stream.req) {\n            onrequest();\n        } else {\n            stream.on(\"request\", onrequest);\n        }\n    } else if (writable && !wState) {\n        // legacy streams\n        stream.on(\"end\", onlegacyfinish);\n        stream.on(\"close\", onlegacyfinish);\n    }\n    // Not all streams will emit 'close' after 'aborted'.\n    if (!willEmitClose && typeof stream.aborted === \"boolean\") {\n        stream.on(\"aborted\", onclose);\n    }\n    stream.on(\"end\", onend);\n    stream.on(\"finish\", onfinish);\n    if (options.error !== false) {\n        stream.on(\"error\", onerror);\n    }\n    stream.on(\"close\", onclose);\n    if (closed) {\n        process.nextTick(onclose);\n    } else if (wState !== null && wState !== undefined && wState.errorEmitted || rState !== null && rState !== undefined && rState.errorEmitted) {\n        if (!willEmitClose) {\n            process.nextTick(onclosed);\n        }\n    } else if (!readable && (!willEmitClose || isReadable(stream)) && (writableFinished || isWritable(stream) === false)) {\n        process.nextTick(onclosed);\n    } else if (!writable && (!willEmitClose || isWritable(stream)) && (readableFinished || isReadable(stream) === false)) {\n        process.nextTick(onclosed);\n    } else if (rState && stream.req && stream.aborted) {\n        process.nextTick(onclosed);\n    }\n    const cleanup = ()=>{\n        callback = nop;\n        stream.removeListener(\"aborted\", onclose);\n        stream.removeListener(\"complete\", onfinish);\n        stream.removeListener(\"abort\", onclose);\n        stream.removeListener(\"request\", onrequest);\n        if (stream.req) stream.req.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onlegacyfinish);\n        stream.removeListener(\"close\", onlegacyfinish);\n        stream.removeListener(\"finish\", onfinish);\n        stream.removeListener(\"end\", onend);\n        stream.removeListener(\"error\", onerror);\n        stream.removeListener(\"close\", onclose);\n    };\n    if (options.signal && !closed) {\n        const abort = ()=>{\n            // Keep it because cleanup removes it.\n            const endCallback = callback;\n            cleanup();\n            endCallback.call(stream, new AbortError(undefined, {\n                cause: options.signal.reason\n            }));\n        };\n        if (options.signal.aborted) {\n            process.nextTick(abort);\n        } else {\n            const originalCallback = callback;\n            callback = once((...args)=>{\n                options.signal.removeEventListener(\"abort\", abort);\n                originalCallback.apply(stream, args);\n            });\n            options.signal.addEventListener(\"abort\", abort);\n        }\n    }\n    return cleanup;\n}\nfunction eosWeb(stream, options, callback) {\n    let isAborted = false;\n    let abort = nop;\n    if (options.signal) {\n        abort = ()=>{\n            isAborted = true;\n            callback.call(stream, new AbortError(undefined, {\n                cause: options.signal.reason\n            }));\n        };\n        if (options.signal.aborted) {\n            process.nextTick(abort);\n        } else {\n            const originalCallback = callback;\n            callback = once((...args)=>{\n                options.signal.removeEventListener(\"abort\", abort);\n                originalCallback.apply(stream, args);\n            });\n            options.signal.addEventListener(\"abort\", abort);\n        }\n    }\n    const resolverFn = (...args)=>{\n        if (!isAborted) {\n            process.nextTick(()=>callback.apply(stream, args));\n        }\n    };\n    PromisePrototypeThen(stream[kIsClosedPromise].promise, resolverFn, resolverFn);\n    return nop;\n}\nfunction finished(stream, opts) {\n    var _opts;\n    let autoCleanup = false;\n    if (opts === null) {\n        opts = kEmptyObject;\n    }\n    if ((_opts = opts) !== null && _opts !== undefined && _opts.cleanup) {\n        validateBoolean(opts.cleanup, \"cleanup\");\n        autoCleanup = opts.cleanup;\n    }\n    return new Promise((resolve, reject)=>{\n        const cleanup = eos(stream, opts, (err)=>{\n            if (autoCleanup) {\n                cleanup();\n            }\n            if (err) {\n                reject(err);\n            } else {\n                resolve();\n            }\n        });\n    });\n}\nmodule.exports = eos;\nmodule.exports.finished = finished;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/from.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/from.js ***!
  \************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\n/* replacement start */ const process = __webpack_require__(/*! process/ */ \"(ssr)/./node_modules/process/index.js\");\n/* replacement end */ const { PromisePrototypeThen, SymbolAsyncIterator, SymbolIterator } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\nconst { ERR_INVALID_ARG_TYPE, ERR_STREAM_NULL_VALUES } = (__webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\").codes);\nfunction from(Readable, iterable, opts) {\n    let iterator;\n    if (typeof iterable === \"string\" || iterable instanceof Buffer) {\n        return new Readable({\n            objectMode: true,\n            ...opts,\n            read () {\n                this.push(iterable);\n                this.push(null);\n            }\n        });\n    }\n    let isAsync;\n    if (iterable && iterable[SymbolAsyncIterator]) {\n        isAsync = true;\n        iterator = iterable[SymbolAsyncIterator]();\n    } else if (iterable && iterable[SymbolIterator]) {\n        isAsync = false;\n        iterator = iterable[SymbolIterator]();\n    } else {\n        throw new ERR_INVALID_ARG_TYPE(\"iterable\", [\n            \"Iterable\"\n        ], iterable);\n    }\n    const readable = new Readable({\n        objectMode: true,\n        highWaterMark: 1,\n        // TODO(ronag): What options should be allowed?\n        ...opts\n    });\n    // Flag to protect against _read\n    // being called before last iteration completion.\n    let reading = false;\n    readable._read = function() {\n        if (!reading) {\n            reading = true;\n            next();\n        }\n    };\n    readable._destroy = function(error, cb) {\n        PromisePrototypeThen(close(error), ()=>process.nextTick(cb, error), // nextTick is here in case cb throws\n        (e)=>process.nextTick(cb, e || error));\n    };\n    async function close(error) {\n        const hadError = error !== undefined && error !== null;\n        const hasThrow = typeof iterator.throw === \"function\";\n        if (hadError && hasThrow) {\n            const { value, done } = await iterator.throw(error);\n            await value;\n            if (done) {\n                return;\n            }\n        }\n        if (typeof iterator.return === \"function\") {\n            const { value } = await iterator.return();\n            await value;\n        }\n    }\n    async function next() {\n        for(;;){\n            try {\n                const { value, done } = isAsync ? await iterator.next() : iterator.next();\n                if (done) {\n                    readable.push(null);\n                } else {\n                    const res = value && typeof value.then === \"function\" ? await value : value;\n                    if (res === null) {\n                        reading = false;\n                        throw new ERR_STREAM_NULL_VALUES();\n                    } else if (readable.push(res)) {\n                        continue;\n                    } else {\n                        reading = false;\n                    }\n                }\n            } catch (err) {\n                readable.destroy(err);\n            }\n            break;\n        }\n    }\n    return readable;\n}\nmodule.exports = from;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvZnJvbS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLHFCQUFxQixHQUVyQixNQUFNQSxVQUFVQyxtQkFBT0EsQ0FBQztBQUV4QixtQkFBbUIsR0FFbkIsTUFBTSxFQUFFQyxvQkFBb0IsRUFBRUMsbUJBQW1CLEVBQUVDLGNBQWMsRUFBRSxHQUFHSCxtQkFBT0EsQ0FBQztBQUM5RSxNQUFNLEVBQUVJLE1BQU0sRUFBRSxHQUFHSixtQkFBT0EsQ0FBQztBQUMzQixNQUFNLEVBQUVLLG9CQUFvQixFQUFFQyxzQkFBc0IsRUFBRSxHQUFHTix3SkFBa0M7QUFDM0YsU0FBU1EsS0FBS0MsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLElBQUk7SUFDcEMsSUFBSUM7SUFDSixJQUFJLE9BQU9GLGFBQWEsWUFBWUEsb0JBQW9CTixRQUFRO1FBQzlELE9BQU8sSUFBSUssU0FBUztZQUNsQkksWUFBWTtZQUNaLEdBQUdGLElBQUk7WUFDUEc7Z0JBQ0UsSUFBSSxDQUFDQyxJQUFJLENBQUNMO2dCQUNWLElBQUksQ0FBQ0ssSUFBSSxDQUFDO1lBQ1o7UUFDRjtJQUNGO0lBQ0EsSUFBSUM7SUFDSixJQUFJTixZQUFZQSxRQUFRLENBQUNSLG9CQUFvQixFQUFFO1FBQzdDYyxVQUFVO1FBQ1ZKLFdBQVdGLFFBQVEsQ0FBQ1Isb0JBQW9CO0lBQzFDLE9BQU8sSUFBSVEsWUFBWUEsUUFBUSxDQUFDUCxlQUFlLEVBQUU7UUFDL0NhLFVBQVU7UUFDVkosV0FBV0YsUUFBUSxDQUFDUCxlQUFlO0lBQ3JDLE9BQU87UUFDTCxNQUFNLElBQUlFLHFCQUFxQixZQUFZO1lBQUM7U0FBVyxFQUFFSztJQUMzRDtJQUNBLE1BQU1PLFdBQVcsSUFBSVIsU0FBUztRQUM1QkksWUFBWTtRQUNaSyxlQUFlO1FBQ2YsK0NBQStDO1FBQy9DLEdBQUdQLElBQUk7SUFDVDtJQUVBLGdDQUFnQztJQUNoQyxpREFBaUQ7SUFDakQsSUFBSVEsVUFBVTtJQUNkRixTQUFTRyxLQUFLLEdBQUc7UUFDZixJQUFJLENBQUNELFNBQVM7WUFDWkEsVUFBVTtZQUNWRTtRQUNGO0lBQ0Y7SUFDQUosU0FBU0ssUUFBUSxHQUFHLFNBQVVDLEtBQUssRUFBRUMsRUFBRTtRQUNyQ3ZCLHFCQUNFd0IsTUFBTUYsUUFDTixJQUFNeEIsUUFBUTJCLFFBQVEsQ0FBQ0YsSUFBSUQsUUFDM0IscUNBQXFDO1FBQ3JDLENBQUNJLElBQU01QixRQUFRMkIsUUFBUSxDQUFDRixJQUFJRyxLQUFLSjtJQUVyQztJQUNBLGVBQWVFLE1BQU1GLEtBQUs7UUFDeEIsTUFBTUssV0FBV0wsVUFBVU0sYUFBYU4sVUFBVTtRQUNsRCxNQUFNTyxXQUFXLE9BQU9sQixTQUFTbUIsS0FBSyxLQUFLO1FBQzNDLElBQUlILFlBQVlFLFVBQVU7WUFDeEIsTUFBTSxFQUFFRSxLQUFLLEVBQUVDLElBQUksRUFBRSxHQUFHLE1BQU1yQixTQUFTbUIsS0FBSyxDQUFDUjtZQUM3QyxNQUFNUztZQUNOLElBQUlDLE1BQU07Z0JBQ1I7WUFDRjtRQUNGO1FBQ0EsSUFBSSxPQUFPckIsU0FBU3NCLE1BQU0sS0FBSyxZQUFZO1lBQ3pDLE1BQU0sRUFBRUYsS0FBSyxFQUFFLEdBQUcsTUFBTXBCLFNBQVNzQixNQUFNO1lBQ3ZDLE1BQU1GO1FBQ1I7SUFDRjtJQUNBLGVBQWVYO1FBQ2IsT0FBUztZQUNQLElBQUk7Z0JBQ0YsTUFBTSxFQUFFVyxLQUFLLEVBQUVDLElBQUksRUFBRSxHQUFHakIsVUFBVSxNQUFNSixTQUFTUyxJQUFJLEtBQUtULFNBQVNTLElBQUk7Z0JBQ3ZFLElBQUlZLE1BQU07b0JBQ1JoQixTQUFTRixJQUFJLENBQUM7Z0JBQ2hCLE9BQU87b0JBQ0wsTUFBTW9CLE1BQU1ILFNBQVMsT0FBT0EsTUFBTUksSUFBSSxLQUFLLGFBQWEsTUFBTUosUUFBUUE7b0JBQ3RFLElBQUlHLFFBQVEsTUFBTTt3QkFDaEJoQixVQUFVO3dCQUNWLE1BQU0sSUFBSWI7b0JBQ1osT0FBTyxJQUFJVyxTQUFTRixJQUFJLENBQUNvQixNQUFNO3dCQUM3QjtvQkFDRixPQUFPO3dCQUNMaEIsVUFBVTtvQkFDWjtnQkFDRjtZQUNGLEVBQUUsT0FBT2tCLEtBQUs7Z0JBQ1pwQixTQUFTcUIsT0FBTyxDQUFDRDtZQUNuQjtZQUNBO1FBQ0Y7SUFDRjtJQUNBLE9BQU9wQjtBQUNUO0FBQ0FzQixPQUFPQyxPQUFPLEdBQUdoQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9mcm9tLmpzPzE4MDIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbi8qIHJlcGxhY2VtZW50IHN0YXJ0ICovXG5cbmNvbnN0IHByb2Nlc3MgPSByZXF1aXJlKCdwcm9jZXNzLycpXG5cbi8qIHJlcGxhY2VtZW50IGVuZCAqL1xuXG5jb25zdCB7IFByb21pc2VQcm90b3R5cGVUaGVuLCBTeW1ib2xBc3luY0l0ZXJhdG9yLCBTeW1ib2xJdGVyYXRvciB9ID0gcmVxdWlyZSgnLi4vLi4vb3Vycy9wcmltb3JkaWFscycpXG5jb25zdCB7IEJ1ZmZlciB9ID0gcmVxdWlyZSgnYnVmZmVyJylcbmNvbnN0IHsgRVJSX0lOVkFMSURfQVJHX1RZUEUsIEVSUl9TVFJFQU1fTlVMTF9WQUxVRVMgfSA9IHJlcXVpcmUoJy4uLy4uL291cnMvZXJyb3JzJykuY29kZXNcbmZ1bmN0aW9uIGZyb20oUmVhZGFibGUsIGl0ZXJhYmxlLCBvcHRzKSB7XG4gIGxldCBpdGVyYXRvclxuICBpZiAodHlwZW9mIGl0ZXJhYmxlID09PSAnc3RyaW5nJyB8fCBpdGVyYWJsZSBpbnN0YW5jZW9mIEJ1ZmZlcikge1xuICAgIHJldHVybiBuZXcgUmVhZGFibGUoe1xuICAgICAgb2JqZWN0TW9kZTogdHJ1ZSxcbiAgICAgIC4uLm9wdHMsXG4gICAgICByZWFkKCkge1xuICAgICAgICB0aGlzLnB1c2goaXRlcmFibGUpXG4gICAgICAgIHRoaXMucHVzaChudWxsKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbiAgbGV0IGlzQXN5bmNcbiAgaWYgKGl0ZXJhYmxlICYmIGl0ZXJhYmxlW1N5bWJvbEFzeW5jSXRlcmF0b3JdKSB7XG4gICAgaXNBc3luYyA9IHRydWVcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlW1N5bWJvbEFzeW5jSXRlcmF0b3JdKClcbiAgfSBlbHNlIGlmIChpdGVyYWJsZSAmJiBpdGVyYWJsZVtTeW1ib2xJdGVyYXRvcl0pIHtcbiAgICBpc0FzeW5jID0gZmFsc2VcbiAgICBpdGVyYXRvciA9IGl0ZXJhYmxlW1N5bWJvbEl0ZXJhdG9yXSgpXG4gIH0gZWxzZSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKCdpdGVyYWJsZScsIFsnSXRlcmFibGUnXSwgaXRlcmFibGUpXG4gIH1cbiAgY29uc3QgcmVhZGFibGUgPSBuZXcgUmVhZGFibGUoe1xuICAgIG9iamVjdE1vZGU6IHRydWUsXG4gICAgaGlnaFdhdGVyTWFyazogMSxcbiAgICAvLyBUT0RPKHJvbmFnKTogV2hhdCBvcHRpb25zIHNob3VsZCBiZSBhbGxvd2VkP1xuICAgIC4uLm9wdHNcbiAgfSlcblxuICAvLyBGbGFnIHRvIHByb3RlY3QgYWdhaW5zdCBfcmVhZFxuICAvLyBiZWluZyBjYWxsZWQgYmVmb3JlIGxhc3QgaXRlcmF0aW9uIGNvbXBsZXRpb24uXG4gIGxldCByZWFkaW5nID0gZmFsc2VcbiAgcmVhZGFibGUuX3JlYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCFyZWFkaW5nKSB7XG4gICAgICByZWFkaW5nID0gdHJ1ZVxuICAgICAgbmV4dCgpXG4gICAgfVxuICB9XG4gIHJlYWRhYmxlLl9kZXN0cm95ID0gZnVuY3Rpb24gKGVycm9yLCBjYikge1xuICAgIFByb21pc2VQcm90b3R5cGVUaGVuKFxuICAgICAgY2xvc2UoZXJyb3IpLFxuICAgICAgKCkgPT4gcHJvY2Vzcy5uZXh0VGljayhjYiwgZXJyb3IpLFxuICAgICAgLy8gbmV4dFRpY2sgaXMgaGVyZSBpbiBjYXNlIGNiIHRocm93c1xuICAgICAgKGUpID0+IHByb2Nlc3MubmV4dFRpY2soY2IsIGUgfHwgZXJyb3IpXG4gICAgKVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIGNsb3NlKGVycm9yKSB7XG4gICAgY29uc3QgaGFkRXJyb3IgPSBlcnJvciAhPT0gdW5kZWZpbmVkICYmIGVycm9yICE9PSBudWxsXG4gICAgY29uc3QgaGFzVGhyb3cgPSB0eXBlb2YgaXRlcmF0b3IudGhyb3cgPT09ICdmdW5jdGlvbidcbiAgICBpZiAoaGFkRXJyb3IgJiYgaGFzVGhyb3cpIHtcbiAgICAgIGNvbnN0IHsgdmFsdWUsIGRvbmUgfSA9IGF3YWl0IGl0ZXJhdG9yLnRocm93KGVycm9yKVxuICAgICAgYXdhaXQgdmFsdWVcbiAgICAgIGlmIChkb25lKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodHlwZW9mIGl0ZXJhdG9yLnJldHVybiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY29uc3QgeyB2YWx1ZSB9ID0gYXdhaXQgaXRlcmF0b3IucmV0dXJuKClcbiAgICAgIGF3YWl0IHZhbHVlXG4gICAgfVxuICB9XG4gIGFzeW5jIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgZm9yICg7Oykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgeyB2YWx1ZSwgZG9uZSB9ID0gaXNBc3luYyA/IGF3YWl0IGl0ZXJhdG9yLm5leHQoKSA6IGl0ZXJhdG9yLm5leHQoKVxuICAgICAgICBpZiAoZG9uZSkge1xuICAgICAgICAgIHJlYWRhYmxlLnB1c2gobnVsbClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCByZXMgPSB2YWx1ZSAmJiB0eXBlb2YgdmFsdWUudGhlbiA9PT0gJ2Z1bmN0aW9uJyA/IGF3YWl0IHZhbHVlIDogdmFsdWVcbiAgICAgICAgICBpZiAocmVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZWFkaW5nID0gZmFsc2VcbiAgICAgICAgICAgIHRocm93IG5ldyBFUlJfU1RSRUFNX05VTExfVkFMVUVTKClcbiAgICAgICAgICB9IGVsc2UgaWYgKHJlYWRhYmxlLnB1c2gocmVzKSkge1xuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVhZGluZyA9IGZhbHNlXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgcmVhZGFibGUuZGVzdHJveShlcnIpXG4gICAgICB9XG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVhZGFibGVcbn1cbm1vZHVsZS5leHBvcnRzID0gZnJvbVxuIl0sIm5hbWVzIjpbInByb2Nlc3MiLCJyZXF1aXJlIiwiUHJvbWlzZVByb3RvdHlwZVRoZW4iLCJTeW1ib2xBc3luY0l0ZXJhdG9yIiwiU3ltYm9sSXRlcmF0b3IiLCJCdWZmZXIiLCJFUlJfSU5WQUxJRF9BUkdfVFlQRSIsIkVSUl9TVFJFQU1fTlVMTF9WQUxVRVMiLCJjb2RlcyIsImZyb20iLCJSZWFkYWJsZSIsIml0ZXJhYmxlIiwib3B0cyIsIml0ZXJhdG9yIiwib2JqZWN0TW9kZSIsInJlYWQiLCJwdXNoIiwiaXNBc3luYyIsInJlYWRhYmxlIiwiaGlnaFdhdGVyTWFyayIsInJlYWRpbmciLCJfcmVhZCIsIm5leHQiLCJfZGVzdHJveSIsImVycm9yIiwiY2IiLCJjbG9zZSIsIm5leHRUaWNrIiwiZSIsImhhZEVycm9yIiwidW5kZWZpbmVkIiwiaGFzVGhyb3ciLCJ0aHJvdyIsInZhbHVlIiwiZG9uZSIsInJldHVybiIsInJlcyIsInRoZW4iLCJlcnIiLCJkZXN0cm95IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/from.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/legacy.js":
/*!**************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/legacy.js ***!
  \**************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { ArrayIsArray, ObjectSetPrototypeOf } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst { EventEmitter: EE } = __webpack_require__(/*! events */ \"events\");\nfunction Stream(opts) {\n    EE.call(this, opts);\n}\nObjectSetPrototypeOf(Stream.prototype, EE.prototype);\nObjectSetPrototypeOf(Stream, EE);\nStream.prototype.pipe = function(dest, options) {\n    const source = this;\n    function ondata(chunk) {\n        if (dest.writable && dest.write(chunk) === false && source.pause) {\n            source.pause();\n        }\n    }\n    source.on(\"data\", ondata);\n    function ondrain() {\n        if (source.readable && source.resume) {\n            source.resume();\n        }\n    }\n    dest.on(\"drain\", ondrain);\n    // If the 'end' option is not supplied, dest.end() will be called when\n    // source gets the 'end' or 'close' events.  Only dest.end() once.\n    if (!dest._isStdio && (!options || options.end !== false)) {\n        source.on(\"end\", onend);\n        source.on(\"close\", onclose);\n    }\n    let didOnEnd = false;\n    function onend() {\n        if (didOnEnd) return;\n        didOnEnd = true;\n        dest.end();\n    }\n    function onclose() {\n        if (didOnEnd) return;\n        didOnEnd = true;\n        if (typeof dest.destroy === \"function\") dest.destroy();\n    }\n    // Don't leave dangling pipes when there are errors.\n    function onerror(er) {\n        cleanup();\n        if (EE.listenerCount(this, \"error\") === 0) {\n            this.emit(\"error\", er);\n        }\n    }\n    prependListener(source, \"error\", onerror);\n    prependListener(dest, \"error\", onerror);\n    // Remove all the event listeners that were added.\n    function cleanup() {\n        source.removeListener(\"data\", ondata);\n        dest.removeListener(\"drain\", ondrain);\n        source.removeListener(\"end\", onend);\n        source.removeListener(\"close\", onclose);\n        source.removeListener(\"error\", onerror);\n        dest.removeListener(\"error\", onerror);\n        source.removeListener(\"end\", cleanup);\n        source.removeListener(\"close\", cleanup);\n        dest.removeListener(\"close\", cleanup);\n    }\n    source.on(\"end\", cleanup);\n    source.on(\"close\", cleanup);\n    dest.on(\"close\", cleanup);\n    dest.emit(\"pipe\", source);\n    // Allow for unix-like usage: A.pipe(B).pipe(C)\n    return dest;\n};\nfunction prependListener(emitter, event, fn) {\n    // Sadly this is not cacheable as some libraries bundle their own\n    // event emitter implementation with them.\n    if (typeof emitter.prependListener === \"function\") return emitter.prependListener(event, fn);\n    // This is a hack to make sure that our error handler is attached before any\n    // userland ones.  NEVER DO THIS. This is here only because this code needs\n    // to continue to work with older versions of Node.js that do not include\n    // the prependListener() method. The goal is to eventually remove this hack.\n    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);\n    else if (ArrayIsArray(emitter._events[event])) emitter._events[event].unshift(fn);\n    else emitter._events[event] = [\n        fn,\n        emitter._events[event]\n    ];\n}\nmodule.exports = {\n    Stream,\n    prependListener\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvbGVnYWN5LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsTUFBTSxFQUFFQSxZQUFZLEVBQUVDLG9CQUFvQixFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQ3ZELE1BQU0sRUFBRUMsY0FBY0MsRUFBRSxFQUFFLEdBQUdGLG1CQUFPQSxDQUFDO0FBQ3JDLFNBQVNHLE9BQU9DLElBQUk7SUFDbEJGLEdBQUdHLElBQUksQ0FBQyxJQUFJLEVBQUVEO0FBQ2hCO0FBQ0FMLHFCQUFxQkksT0FBT0csU0FBUyxFQUFFSixHQUFHSSxTQUFTO0FBQ25EUCxxQkFBcUJJLFFBQVFEO0FBQzdCQyxPQUFPRyxTQUFTLENBQUNDLElBQUksR0FBRyxTQUFVQyxJQUFJLEVBQUVDLE9BQU87SUFDN0MsTUFBTUMsU0FBUyxJQUFJO0lBQ25CLFNBQVNDLE9BQU9DLEtBQUs7UUFDbkIsSUFBSUosS0FBS0ssUUFBUSxJQUFJTCxLQUFLTSxLQUFLLENBQUNGLFdBQVcsU0FBU0YsT0FBT0ssS0FBSyxFQUFFO1lBQ2hFTCxPQUFPSyxLQUFLO1FBQ2Q7SUFDRjtJQUNBTCxPQUFPTSxFQUFFLENBQUMsUUFBUUw7SUFDbEIsU0FBU007UUFDUCxJQUFJUCxPQUFPUSxRQUFRLElBQUlSLE9BQU9TLE1BQU0sRUFBRTtZQUNwQ1QsT0FBT1MsTUFBTTtRQUNmO0lBQ0Y7SUFDQVgsS0FBS1EsRUFBRSxDQUFDLFNBQVNDO0lBRWpCLHNFQUFzRTtJQUN0RSxrRUFBa0U7SUFDbEUsSUFBSSxDQUFDVCxLQUFLWSxRQUFRLElBQUssRUFBQ1gsV0FBV0EsUUFBUVksR0FBRyxLQUFLLEtBQUksR0FBSTtRQUN6RFgsT0FBT00sRUFBRSxDQUFDLE9BQU9NO1FBQ2pCWixPQUFPTSxFQUFFLENBQUMsU0FBU087SUFDckI7SUFDQSxJQUFJQyxXQUFXO0lBQ2YsU0FBU0Y7UUFDUCxJQUFJRSxVQUFVO1FBQ2RBLFdBQVc7UUFDWGhCLEtBQUthLEdBQUc7SUFDVjtJQUNBLFNBQVNFO1FBQ1AsSUFBSUMsVUFBVTtRQUNkQSxXQUFXO1FBQ1gsSUFBSSxPQUFPaEIsS0FBS2lCLE9BQU8sS0FBSyxZQUFZakIsS0FBS2lCLE9BQU87SUFDdEQ7SUFFQSxvREFBb0Q7SUFDcEQsU0FBU0MsUUFBUUMsRUFBRTtRQUNqQkM7UUFDQSxJQUFJMUIsR0FBRzJCLGFBQWEsQ0FBQyxJQUFJLEVBQUUsYUFBYSxHQUFHO1lBQ3pDLElBQUksQ0FBQ0MsSUFBSSxDQUFDLFNBQVNIO1FBQ3JCO0lBQ0Y7SUFDQUksZ0JBQWdCckIsUUFBUSxTQUFTZ0I7SUFDakNLLGdCQUFnQnZCLE1BQU0sU0FBU2tCO0lBRS9CLGtEQUFrRDtJQUNsRCxTQUFTRTtRQUNQbEIsT0FBT3NCLGNBQWMsQ0FBQyxRQUFRckI7UUFDOUJILEtBQUt3QixjQUFjLENBQUMsU0FBU2Y7UUFDN0JQLE9BQU9zQixjQUFjLENBQUMsT0FBT1Y7UUFDN0JaLE9BQU9zQixjQUFjLENBQUMsU0FBU1Q7UUFDL0JiLE9BQU9zQixjQUFjLENBQUMsU0FBU047UUFDL0JsQixLQUFLd0IsY0FBYyxDQUFDLFNBQVNOO1FBQzdCaEIsT0FBT3NCLGNBQWMsQ0FBQyxPQUFPSjtRQUM3QmxCLE9BQU9zQixjQUFjLENBQUMsU0FBU0o7UUFDL0JwQixLQUFLd0IsY0FBYyxDQUFDLFNBQVNKO0lBQy9CO0lBQ0FsQixPQUFPTSxFQUFFLENBQUMsT0FBT1k7SUFDakJsQixPQUFPTSxFQUFFLENBQUMsU0FBU1k7SUFDbkJwQixLQUFLUSxFQUFFLENBQUMsU0FBU1k7SUFDakJwQixLQUFLc0IsSUFBSSxDQUFDLFFBQVFwQjtJQUVsQiwrQ0FBK0M7SUFDL0MsT0FBT0Y7QUFDVDtBQUNBLFNBQVN1QixnQkFBZ0JFLE9BQU8sRUFBRUMsS0FBSyxFQUFFQyxFQUFFO0lBQ3pDLGlFQUFpRTtJQUNqRSwwQ0FBMEM7SUFDMUMsSUFBSSxPQUFPRixRQUFRRixlQUFlLEtBQUssWUFBWSxPQUFPRSxRQUFRRixlQUFlLENBQUNHLE9BQU9DO0lBRXpGLDRFQUE0RTtJQUM1RSwyRUFBMkU7SUFDM0UseUVBQXlFO0lBQ3pFLDRFQUE0RTtJQUM1RSxJQUFJLENBQUNGLFFBQVFHLE9BQU8sSUFBSSxDQUFDSCxRQUFRRyxPQUFPLENBQUNGLE1BQU0sRUFBRUQsUUFBUWpCLEVBQUUsQ0FBQ2tCLE9BQU9DO1NBQzlELElBQUlyQyxhQUFhbUMsUUFBUUcsT0FBTyxDQUFDRixNQUFNLEdBQUdELFFBQVFHLE9BQU8sQ0FBQ0YsTUFBTSxDQUFDRyxPQUFPLENBQUNGO1NBQ3pFRixRQUFRRyxPQUFPLENBQUNGLE1BQU0sR0FBRztRQUFDQztRQUFJRixRQUFRRyxPQUFPLENBQUNGLE1BQU07S0FBQztBQUM1RDtBQUNBSSxPQUFPQyxPQUFPLEdBQUc7SUFDZnBDO0lBQ0E0QjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL2xlZ2FjeS5qcz8yNDMzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IEFycmF5SXNBcnJheSwgT2JqZWN0U2V0UHJvdG90eXBlT2YgfSA9IHJlcXVpcmUoJy4uLy4uL291cnMvcHJpbW9yZGlhbHMnKVxuY29uc3QgeyBFdmVudEVtaXR0ZXI6IEVFIH0gPSByZXF1aXJlKCdldmVudHMnKVxuZnVuY3Rpb24gU3RyZWFtKG9wdHMpIHtcbiAgRUUuY2FsbCh0aGlzLCBvcHRzKVxufVxuT2JqZWN0U2V0UHJvdG90eXBlT2YoU3RyZWFtLnByb3RvdHlwZSwgRUUucHJvdG90eXBlKVxuT2JqZWN0U2V0UHJvdG90eXBlT2YoU3RyZWFtLCBFRSlcblN0cmVhbS5wcm90b3R5cGUucGlwZSA9IGZ1bmN0aW9uIChkZXN0LCBvcHRpb25zKSB7XG4gIGNvbnN0IHNvdXJjZSA9IHRoaXNcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgaWYgKGRlc3Qud3JpdGFibGUgJiYgZGVzdC53cml0ZShjaHVuaykgPT09IGZhbHNlICYmIHNvdXJjZS5wYXVzZSkge1xuICAgICAgc291cmNlLnBhdXNlKClcbiAgICB9XG4gIH1cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKVxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpXG4gICAgfVxuICB9XG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbilcblxuICAvLyBJZiB0aGUgJ2VuZCcgb3B0aW9uIGlzIG5vdCBzdXBwbGllZCwgZGVzdC5lbmQoKSB3aWxsIGJlIGNhbGxlZCB3aGVuXG4gIC8vIHNvdXJjZSBnZXRzIHRoZSAnZW5kJyBvciAnY2xvc2UnIGV2ZW50cy4gIE9ubHkgZGVzdC5lbmQoKSBvbmNlLlxuICBpZiAoIWRlc3QuX2lzU3RkaW8gJiYgKCFvcHRpb25zIHx8IG9wdGlvbnMuZW5kICE9PSBmYWxzZSkpIHtcbiAgICBzb3VyY2Uub24oJ2VuZCcsIG9uZW5kKVxuICAgIHNvdXJjZS5vbignY2xvc2UnLCBvbmNsb3NlKVxuICB9XG4gIGxldCBkaWRPbkVuZCA9IGZhbHNlXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuXG4gICAgZGlkT25FbmQgPSB0cnVlXG4gICAgZGVzdC5lbmQoKVxuICB9XG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm5cbiAgICBkaWRPbkVuZCA9IHRydWVcbiAgICBpZiAodHlwZW9mIGRlc3QuZGVzdHJveSA9PT0gJ2Z1bmN0aW9uJykgZGVzdC5kZXN0cm95KClcbiAgfVxuXG4gIC8vIERvbid0IGxlYXZlIGRhbmdsaW5nIHBpcGVzIHdoZW4gdGhlcmUgYXJlIGVycm9ycy5cbiAgZnVuY3Rpb24gb25lcnJvcihlcikge1xuICAgIGNsZWFudXAoKVxuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aGlzLmVtaXQoJ2Vycm9yJywgZXIpXG4gICAgfVxuICB9XG4gIHByZXBlbmRMaXN0ZW5lcihzb3VyY2UsICdlcnJvcicsIG9uZXJyb3IpXG4gIHByZXBlbmRMaXN0ZW5lcihkZXN0LCAnZXJyb3InLCBvbmVycm9yKVxuXG4gIC8vIFJlbW92ZSBhbGwgdGhlIGV2ZW50IGxpc3RlbmVycyB0aGF0IHdlcmUgYWRkZWQuXG4gIGZ1bmN0aW9uIGNsZWFudXAoKSB7XG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKVxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2RyYWluJywgb25kcmFpbilcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIG9uZW5kKVxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKVxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKVxuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcilcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2VuZCcsIGNsZWFudXApXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApXG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBjbGVhbnVwKVxuICB9XG4gIHNvdXJjZS5vbignZW5kJywgY2xlYW51cClcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cClcbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKVxuXG4gIC8vIEFsbG93IGZvciB1bml4LWxpa2UgdXNhZ2U6IEEucGlwZShCKS5waXBlKEMpXG4gIHJldHVybiBkZXN0XG59XG5mdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIoZW1pdHRlciwgZXZlbnQsIGZuKSB7XG4gIC8vIFNhZGx5IHRoaXMgaXMgbm90IGNhY2hlYWJsZSBhcyBzb21lIGxpYnJhcmllcyBidW5kbGUgdGhlaXIgb3duXG4gIC8vIGV2ZW50IGVtaXR0ZXIgaW1wbGVtZW50YXRpb24gd2l0aCB0aGVtLlxuICBpZiAodHlwZW9mIGVtaXR0ZXIucHJlcGVuZExpc3RlbmVyID09PSAnZnVuY3Rpb24nKSByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKVxuXG4gIC8vIFRoaXMgaXMgYSBoYWNrIHRvIG1ha2Ugc3VyZSB0aGF0IG91ciBlcnJvciBoYW5kbGVyIGlzIGF0dGFjaGVkIGJlZm9yZSBhbnlcbiAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gIC8vIHRvIGNvbnRpbnVlIHRvIHdvcmsgd2l0aCBvbGRlciB2ZXJzaW9ucyBvZiBOb2RlLmpzIHRoYXQgZG8gbm90IGluY2x1ZGVcbiAgLy8gdGhlIHByZXBlbmRMaXN0ZW5lcigpIG1ldGhvZC4gVGhlIGdvYWwgaXMgdG8gZXZlbnR1YWxseSByZW1vdmUgdGhpcyBoYWNrLlxuICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSkgZW1pdHRlci5vbihldmVudCwgZm4pXG4gIGVsc2UgaWYgKEFycmF5SXNBcnJheShlbWl0dGVyLl9ldmVudHNbZXZlbnRdKSkgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKVxuICBlbHNlIGVtaXR0ZXIuX2V2ZW50c1tldmVudF0gPSBbZm4sIGVtaXR0ZXIuX2V2ZW50c1tldmVudF1dXG59XG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgU3RyZWFtLFxuICBwcmVwZW5kTGlzdGVuZXJcbn1cbiJdLCJuYW1lcyI6WyJBcnJheUlzQXJyYXkiLCJPYmplY3RTZXRQcm90b3R5cGVPZiIsInJlcXVpcmUiLCJFdmVudEVtaXR0ZXIiLCJFRSIsIlN0cmVhbSIsIm9wdHMiLCJjYWxsIiwicHJvdG90eXBlIiwicGlwZSIsImRlc3QiLCJvcHRpb25zIiwic291cmNlIiwib25kYXRhIiwiY2h1bmsiLCJ3cml0YWJsZSIsIndyaXRlIiwicGF1c2UiLCJvbiIsIm9uZHJhaW4iLCJyZWFkYWJsZSIsInJlc3VtZSIsIl9pc1N0ZGlvIiwiZW5kIiwib25lbmQiLCJvbmNsb3NlIiwiZGlkT25FbmQiLCJkZXN0cm95Iiwib25lcnJvciIsImVyIiwiY2xlYW51cCIsImxpc3RlbmVyQ291bnQiLCJlbWl0IiwicHJlcGVuZExpc3RlbmVyIiwicmVtb3ZlTGlzdGVuZXIiLCJlbWl0dGVyIiwiZXZlbnQiLCJmbiIsIl9ldmVudHMiLCJ1bnNoaWZ0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/legacy.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/operators.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/operators.js ***!
  \*****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst AbortController = globalThis.AbortController || (__webpack_require__(/*! abort-controller */ \"(ssr)/./node_modules/abort-controller/dist/abort-controller.js\").AbortController);\nconst { codes: { ERR_INVALID_ARG_VALUE, ERR_INVALID_ARG_TYPE, ERR_MISSING_ARGS, ERR_OUT_OF_RANGE }, AbortError } = __webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst { validateAbortSignal, validateInteger, validateObject } = __webpack_require__(/*! ../validators */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/validators.js\");\nconst kWeakHandler = (__webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\").Symbol)(\"kWeak\");\nconst { finished } = __webpack_require__(/*! ./end-of-stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\nconst staticCompose = __webpack_require__(/*! ./compose */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/compose.js\");\nconst { addAbortSignalNoValidate } = __webpack_require__(/*! ./add-abort-signal */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js\");\nconst { isWritable, isNodeStream } = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\");\nconst { ArrayPrototypePush, MathFloor, Number, NumberIsNaN, Promise, PromiseReject, PromisePrototypeThen, Symbol } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst kEmpty = Symbol(\"kEmpty\");\nconst kEof = Symbol(\"kEof\");\nfunction compose(stream, options) {\n    if (options != null) {\n        validateObject(options, \"options\");\n    }\n    if ((options === null || options === undefined ? undefined : options.signal) != null) {\n        validateAbortSignal(options.signal, \"options.signal\");\n    }\n    if (isNodeStream(stream) && !isWritable(stream)) {\n        throw new ERR_INVALID_ARG_VALUE(\"stream\", stream, \"must be writable\");\n    }\n    const composedStream = staticCompose(this, stream);\n    if (options !== null && options !== undefined && options.signal) {\n        // Not validating as we already validated before\n        addAbortSignalNoValidate(options.signal, composedStream);\n    }\n    return composedStream;\n}\nfunction map(fn, options) {\n    if (typeof fn !== \"function\") {\n        throw new ERR_INVALID_ARG_TYPE(\"fn\", [\n            \"Function\",\n            \"AsyncFunction\"\n        ], fn);\n    }\n    if (options != null) {\n        validateObject(options, \"options\");\n    }\n    if ((options === null || options === undefined ? undefined : options.signal) != null) {\n        validateAbortSignal(options.signal, \"options.signal\");\n    }\n    let concurrency = 1;\n    if ((options === null || options === undefined ? undefined : options.concurrency) != null) {\n        concurrency = MathFloor(options.concurrency);\n    }\n    validateInteger(concurrency, \"concurrency\", 1);\n    return (async function* map() {\n        var _options$signal, _options$signal2;\n        const ac = new AbortController();\n        const stream = this;\n        const queue = [];\n        const signal = ac.signal;\n        const signalOpt = {\n            signal\n        };\n        const abort = ()=>ac.abort();\n        if (options !== null && options !== undefined && (_options$signal = options.signal) !== null && _options$signal !== undefined && _options$signal.aborted) {\n            abort();\n        }\n        options === null || options === undefined ? undefined : (_options$signal2 = options.signal) === null || _options$signal2 === undefined ? undefined : _options$signal2.addEventListener(\"abort\", abort);\n        let next;\n        let resume;\n        let done = false;\n        function onDone() {\n            done = true;\n        }\n        async function pump() {\n            try {\n                for await (let val of stream){\n                    var _val;\n                    if (done) {\n                        return;\n                    }\n                    if (signal.aborted) {\n                        throw new AbortError();\n                    }\n                    try {\n                        val = fn(val, signalOpt);\n                    } catch (err) {\n                        val = PromiseReject(err);\n                    }\n                    if (val === kEmpty) {\n                        continue;\n                    }\n                    if (typeof ((_val = val) === null || _val === undefined ? undefined : _val.catch) === \"function\") {\n                        val.catch(onDone);\n                    }\n                    queue.push(val);\n                    if (next) {\n                        next();\n                        next = null;\n                    }\n                    if (!done && queue.length && queue.length >= concurrency) {\n                        await new Promise((resolve)=>{\n                            resume = resolve;\n                        });\n                    }\n                }\n                queue.push(kEof);\n            } catch (err) {\n                const val = PromiseReject(err);\n                PromisePrototypeThen(val, undefined, onDone);\n                queue.push(val);\n            } finally{\n                var _options$signal3;\n                done = true;\n                if (next) {\n                    next();\n                    next = null;\n                }\n                options === null || options === undefined ? undefined : (_options$signal3 = options.signal) === null || _options$signal3 === undefined ? undefined : _options$signal3.removeEventListener(\"abort\", abort);\n            }\n        }\n        pump();\n        try {\n            while(true){\n                while(queue.length > 0){\n                    const val = await queue[0];\n                    if (val === kEof) {\n                        return;\n                    }\n                    if (signal.aborted) {\n                        throw new AbortError();\n                    }\n                    if (val !== kEmpty) {\n                        yield val;\n                    }\n                    queue.shift();\n                    if (resume) {\n                        resume();\n                        resume = null;\n                    }\n                }\n                await new Promise((resolve)=>{\n                    next = resolve;\n                });\n            }\n        } finally{\n            ac.abort();\n            done = true;\n            if (resume) {\n                resume();\n                resume = null;\n            }\n        }\n    }).call(this);\n}\nfunction asIndexedPairs(options = undefined) {\n    if (options != null) {\n        validateObject(options, \"options\");\n    }\n    if ((options === null || options === undefined ? undefined : options.signal) != null) {\n        validateAbortSignal(options.signal, \"options.signal\");\n    }\n    return (async function* asIndexedPairs() {\n        let index = 0;\n        for await (const val of this){\n            var _options$signal4;\n            if (options !== null && options !== undefined && (_options$signal4 = options.signal) !== null && _options$signal4 !== undefined && _options$signal4.aborted) {\n                throw new AbortError({\n                    cause: options.signal.reason\n                });\n            }\n            yield [\n                index++,\n                val\n            ];\n        }\n    }).call(this);\n}\nasync function some(fn, options = undefined) {\n    for await (const unused of filter.call(this, fn, options)){\n        return true;\n    }\n    return false;\n}\nasync function every(fn, options = undefined) {\n    if (typeof fn !== \"function\") {\n        throw new ERR_INVALID_ARG_TYPE(\"fn\", [\n            \"Function\",\n            \"AsyncFunction\"\n        ], fn);\n    }\n    // https://en.wikipedia.org/wiki/De_Morgan%27s_laws\n    return !await some.call(this, async (...args)=>{\n        return !await fn(...args);\n    }, options);\n}\nasync function find(fn, options) {\n    for await (const result of filter.call(this, fn, options)){\n        return result;\n    }\n    return undefined;\n}\nasync function forEach(fn, options) {\n    if (typeof fn !== \"function\") {\n        throw new ERR_INVALID_ARG_TYPE(\"fn\", [\n            \"Function\",\n            \"AsyncFunction\"\n        ], fn);\n    }\n    async function forEachFn(value, options) {\n        await fn(value, options);\n        return kEmpty;\n    }\n    // eslint-disable-next-line no-unused-vars\n    for await (const unused of map.call(this, forEachFn, options));\n}\nfunction filter(fn, options) {\n    if (typeof fn !== \"function\") {\n        throw new ERR_INVALID_ARG_TYPE(\"fn\", [\n            \"Function\",\n            \"AsyncFunction\"\n        ], fn);\n    }\n    async function filterFn(value, options) {\n        if (await fn(value, options)) {\n            return value;\n        }\n        return kEmpty;\n    }\n    return map.call(this, filterFn, options);\n}\n// Specific to provide better error to reduce since the argument is only\n// missing if the stream has no items in it - but the code is still appropriate\nclass ReduceAwareErrMissingArgs extends ERR_MISSING_ARGS {\n    constructor(){\n        super(\"reduce\");\n        this.message = \"Reduce of an empty stream requires an initial value\";\n    }\n}\nasync function reduce(reducer, initialValue, options) {\n    var _options$signal5;\n    if (typeof reducer !== \"function\") {\n        throw new ERR_INVALID_ARG_TYPE(\"reducer\", [\n            \"Function\",\n            \"AsyncFunction\"\n        ], reducer);\n    }\n    if (options != null) {\n        validateObject(options, \"options\");\n    }\n    if ((options === null || options === undefined ? undefined : options.signal) != null) {\n        validateAbortSignal(options.signal, \"options.signal\");\n    }\n    let hasInitialValue = arguments.length > 1;\n    if (options !== null && options !== undefined && (_options$signal5 = options.signal) !== null && _options$signal5 !== undefined && _options$signal5.aborted) {\n        const err = new AbortError(undefined, {\n            cause: options.signal.reason\n        });\n        this.once(\"error\", ()=>{}) // The error is already propagated\n        ;\n        await finished(this.destroy(err));\n        throw err;\n    }\n    const ac = new AbortController();\n    const signal = ac.signal;\n    if (options !== null && options !== undefined && options.signal) {\n        const opts = {\n            once: true,\n            [kWeakHandler]: this\n        };\n        options.signal.addEventListener(\"abort\", ()=>ac.abort(), opts);\n    }\n    let gotAnyItemFromStream = false;\n    try {\n        for await (const value of this){\n            var _options$signal6;\n            gotAnyItemFromStream = true;\n            if (options !== null && options !== undefined && (_options$signal6 = options.signal) !== null && _options$signal6 !== undefined && _options$signal6.aborted) {\n                throw new AbortError();\n            }\n            if (!hasInitialValue) {\n                initialValue = value;\n                hasInitialValue = true;\n            } else {\n                initialValue = await reducer(initialValue, value, {\n                    signal\n                });\n            }\n        }\n        if (!gotAnyItemFromStream && !hasInitialValue) {\n            throw new ReduceAwareErrMissingArgs();\n        }\n    } finally{\n        ac.abort();\n    }\n    return initialValue;\n}\nasync function toArray(options) {\n    if (options != null) {\n        validateObject(options, \"options\");\n    }\n    if ((options === null || options === undefined ? undefined : options.signal) != null) {\n        validateAbortSignal(options.signal, \"options.signal\");\n    }\n    const result = [];\n    for await (const val of this){\n        var _options$signal7;\n        if (options !== null && options !== undefined && (_options$signal7 = options.signal) !== null && _options$signal7 !== undefined && _options$signal7.aborted) {\n            throw new AbortError(undefined, {\n                cause: options.signal.reason\n            });\n        }\n        ArrayPrototypePush(result, val);\n    }\n    return result;\n}\nfunction flatMap(fn, options) {\n    const values = map.call(this, fn, options);\n    return (async function* flatMap() {\n        for await (const val of values){\n            yield* val;\n        }\n    }).call(this);\n}\nfunction toIntegerOrInfinity(number) {\n    // We coerce here to align with the spec\n    // https://github.com/tc39/proposal-iterator-helpers/issues/169\n    number = Number(number);\n    if (NumberIsNaN(number)) {\n        return 0;\n    }\n    if (number < 0) {\n        throw new ERR_OUT_OF_RANGE(\"number\", \">= 0\", number);\n    }\n    return number;\n}\nfunction drop(number, options = undefined) {\n    if (options != null) {\n        validateObject(options, \"options\");\n    }\n    if ((options === null || options === undefined ? undefined : options.signal) != null) {\n        validateAbortSignal(options.signal, \"options.signal\");\n    }\n    number = toIntegerOrInfinity(number);\n    return (async function* drop() {\n        var _options$signal8;\n        if (options !== null && options !== undefined && (_options$signal8 = options.signal) !== null && _options$signal8 !== undefined && _options$signal8.aborted) {\n            throw new AbortError();\n        }\n        for await (const val of this){\n            var _options$signal9;\n            if (options !== null && options !== undefined && (_options$signal9 = options.signal) !== null && _options$signal9 !== undefined && _options$signal9.aborted) {\n                throw new AbortError();\n            }\n            if (number-- <= 0) {\n                yield val;\n            }\n        }\n    }).call(this);\n}\nfunction take(number, options = undefined) {\n    if (options != null) {\n        validateObject(options, \"options\");\n    }\n    if ((options === null || options === undefined ? undefined : options.signal) != null) {\n        validateAbortSignal(options.signal, \"options.signal\");\n    }\n    number = toIntegerOrInfinity(number);\n    return (async function* take() {\n        var _options$signal10;\n        if (options !== null && options !== undefined && (_options$signal10 = options.signal) !== null && _options$signal10 !== undefined && _options$signal10.aborted) {\n            throw new AbortError();\n        }\n        for await (const val of this){\n            var _options$signal11;\n            if (options !== null && options !== undefined && (_options$signal11 = options.signal) !== null && _options$signal11 !== undefined && _options$signal11.aborted) {\n                throw new AbortError();\n            }\n            if (number-- > 0) {\n                yield val;\n            } else {\n                return;\n            }\n        }\n    }).call(this);\n}\nmodule.exports.streamReturningOperators = {\n    asIndexedPairs,\n    drop,\n    filter,\n    flatMap,\n    map,\n    take,\n    compose\n};\nmodule.exports.promiseReturningOperators = {\n    every,\n    forEach,\n    reduce,\n    toArray,\n    some,\n    find\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/operators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/passthrough.js":
/*!*******************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/passthrough.js ***!
  \*******************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a passthrough stream.\n// basically just the most minimal sort of Transform stream.\n// Every written chunk gets output as-is.\n\nconst { ObjectSetPrototypeOf } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nmodule.exports = PassThrough;\nconst Transform = __webpack_require__(/*! ./transform */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/transform.js\");\nObjectSetPrototypeOf(PassThrough.prototype, Transform.prototype);\nObjectSetPrototypeOf(PassThrough, Transform);\nfunction PassThrough(options) {\n    if (!(this instanceof PassThrough)) return new PassThrough(options);\n    Transform.call(this, options);\n}\nPassThrough.prototype._transform = function(chunk, encoding, cb) {\n    cb(null, chunk);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvcGFzc3Rocm91Z2guanMiLCJtYXBwaW5ncyI6IkFBQUEsc0RBQXNEO0FBQ3RELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsZ0VBQWdFO0FBQ2hFLHNFQUFzRTtBQUN0RSxzRUFBc0U7QUFDdEUsNEVBQTRFO0FBQzVFLHFFQUFxRTtBQUNyRSx3QkFBd0I7QUFDeEIsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSx5REFBeUQ7QUFDekQsRUFBRTtBQUNGLDBFQUEwRTtBQUMxRSw2REFBNkQ7QUFDN0QsNEVBQTRFO0FBQzVFLDJFQUEyRTtBQUMzRSx3RUFBd0U7QUFDeEUsNEVBQTRFO0FBQzVFLHlDQUF5QztBQUV6Qyx3QkFBd0I7QUFDeEIsNERBQTREO0FBQzVELHlDQUF5QztBQUV6QztBQUVBLE1BQU0sRUFBRUEsb0JBQW9CLEVBQUUsR0FBR0MsbUJBQU9BLENBQUM7QUFDekNDLE9BQU9DLE9BQU8sR0FBR0M7QUFDakIsTUFBTUMsWUFBWUosbUJBQU9BLENBQUM7QUFDMUJELHFCQUFxQkksWUFBWUUsU0FBUyxFQUFFRCxVQUFVQyxTQUFTO0FBQy9ETixxQkFBcUJJLGFBQWFDO0FBQ2xDLFNBQVNELFlBQVlHLE9BQU87SUFDMUIsSUFBSSxDQUFFLEtBQUksWUFBWUgsV0FBVSxHQUFJLE9BQU8sSUFBSUEsWUFBWUc7SUFDM0RGLFVBQVVHLElBQUksQ0FBQyxJQUFJLEVBQUVEO0FBQ3ZCO0FBQ0FILFlBQVlFLFNBQVMsQ0FBQ0csVUFBVSxHQUFHLFNBQVVDLEtBQUssRUFBRUMsUUFBUSxFQUFFQyxFQUFFO0lBQzlEQSxHQUFHLE1BQU1GO0FBQ1giLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvcGFzc3Rocm91Z2guanM/NjJiYiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuLy8gYSBwYXNzdGhyb3VnaCBzdHJlYW0uXG4vLyBiYXNpY2FsbHkganVzdCB0aGUgbW9zdCBtaW5pbWFsIHNvcnQgb2YgVHJhbnNmb3JtIHN0cmVhbS5cbi8vIEV2ZXJ5IHdyaXR0ZW4gY2h1bmsgZ2V0cyBvdXRwdXQgYXMtaXMuXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IE9iamVjdFNldFByb3RvdHlwZU9mIH0gPSByZXF1aXJlKCcuLi8uLi9vdXJzL3ByaW1vcmRpYWxzJylcbm1vZHVsZS5leHBvcnRzID0gUGFzc1Rocm91Z2hcbmNvbnN0IFRyYW5zZm9ybSA9IHJlcXVpcmUoJy4vdHJhbnNmb3JtJylcbk9iamVjdFNldFByb3RvdHlwZU9mKFBhc3NUaHJvdWdoLnByb3RvdHlwZSwgVHJhbnNmb3JtLnByb3RvdHlwZSlcbk9iamVjdFNldFByb3RvdHlwZU9mKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pXG5mdW5jdGlvbiBQYXNzVGhyb3VnaChvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBQYXNzVGhyb3VnaCkpIHJldHVybiBuZXcgUGFzc1Rocm91Z2gob3B0aW9ucylcbiAgVHJhbnNmb3JtLmNhbGwodGhpcywgb3B0aW9ucylcbn1cblBhc3NUaHJvdWdoLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobnVsbCwgY2h1bmspXG59XG4iXSwibmFtZXMiOlsiT2JqZWN0U2V0UHJvdG90eXBlT2YiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIlBhc3NUaHJvdWdoIiwiVHJhbnNmb3JtIiwicHJvdG90eXBlIiwib3B0aW9ucyIsImNhbGwiLCJfdHJhbnNmb3JtIiwiY2h1bmsiLCJlbmNvZGluZyIsImNiIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/passthrough.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/pipeline.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/pipeline.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* replacement start */ const process = __webpack_require__(/*! process/ */ \"(ssr)/./node_modules/process/index.js\");\n\"use strict\";\nconst { ArrayIsArray, Promise, SymbolAsyncIterator } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst eos = __webpack_require__(/*! ./end-of-stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\nconst { once } = __webpack_require__(/*! ../../ours/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\");\nconst destroyImpl = __webpack_require__(/*! ./destroy */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nconst Duplex = __webpack_require__(/*! ./duplex */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\");\nconst { aggregateTwoErrors, codes: { ERR_INVALID_ARG_TYPE, ERR_INVALID_RETURN_VALUE, ERR_MISSING_ARGS, ERR_STREAM_DESTROYED, ERR_STREAM_PREMATURE_CLOSE }, AbortError } = __webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst { validateFunction, validateAbortSignal } = __webpack_require__(/*! ../validators */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/validators.js\");\nconst { isIterable, isReadable, isReadableNodeStream, isNodeStream, isTransformStream, isWebStream, isReadableStream, isReadableEnded } = __webpack_require__(/*! ./utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\");\nconst AbortController = globalThis.AbortController || (__webpack_require__(/*! abort-controller */ \"(ssr)/./node_modules/abort-controller/dist/abort-controller.js\").AbortController);\nlet PassThrough;\nlet Readable;\nfunction destroyer(stream, reading, writing) {\n    let finished = false;\n    stream.on(\"close\", ()=>{\n        finished = true;\n    });\n    const cleanup = eos(stream, {\n        readable: reading,\n        writable: writing\n    }, (err)=>{\n        finished = !err;\n    });\n    return {\n        destroy: (err)=>{\n            if (finished) return;\n            finished = true;\n            destroyImpl.destroyer(stream, err || new ERR_STREAM_DESTROYED(\"pipe\"));\n        },\n        cleanup\n    };\n}\nfunction popCallback(streams) {\n    // Streams should never be an empty array. It should always contain at least\n    // a single stream. Therefore optimize for the average case instead of\n    // checking for length === 0 as well.\n    validateFunction(streams[streams.length - 1], \"streams[stream.length - 1]\");\n    return streams.pop();\n}\nfunction makeAsyncIterable(val) {\n    if (isIterable(val)) {\n        return val;\n    } else if (isReadableNodeStream(val)) {\n        // Legacy streams are not Iterable.\n        return fromReadable(val);\n    }\n    throw new ERR_INVALID_ARG_TYPE(\"val\", [\n        \"Readable\",\n        \"Iterable\",\n        \"AsyncIterable\"\n    ], val);\n}\nasync function* fromReadable(val) {\n    if (!Readable) {\n        Readable = __webpack_require__(/*! ./readable */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/readable.js\");\n    }\n    yield* Readable.prototype[SymbolAsyncIterator].call(val);\n}\nasync function pumpToNode(iterable, writable, finish, { end }) {\n    let error;\n    let onresolve = null;\n    const resume = (err)=>{\n        if (err) {\n            error = err;\n        }\n        if (onresolve) {\n            const callback = onresolve;\n            onresolve = null;\n            callback();\n        }\n    };\n    const wait = ()=>new Promise((resolve, reject)=>{\n            if (error) {\n                reject(error);\n            } else {\n                onresolve = ()=>{\n                    if (error) {\n                        reject(error);\n                    } else {\n                        resolve();\n                    }\n                };\n            }\n        });\n    writable.on(\"drain\", resume);\n    const cleanup = eos(writable, {\n        readable: false\n    }, resume);\n    try {\n        if (writable.writableNeedDrain) {\n            await wait();\n        }\n        for await (const chunk of iterable){\n            if (!writable.write(chunk)) {\n                await wait();\n            }\n        }\n        if (end) {\n            writable.end();\n        }\n        await wait();\n        finish();\n    } catch (err) {\n        finish(error !== err ? aggregateTwoErrors(error, err) : err);\n    } finally{\n        cleanup();\n        writable.off(\"drain\", resume);\n    }\n}\nasync function pumpToWeb(readable, writable, finish, { end }) {\n    if (isTransformStream(writable)) {\n        writable = writable.writable;\n    }\n    // https://streams.spec.whatwg.org/#example-manual-write-with-backpressure\n    const writer = writable.getWriter();\n    try {\n        for await (const chunk of readable){\n            await writer.ready;\n            writer.write(chunk).catch(()=>{});\n        }\n        await writer.ready;\n        if (end) {\n            await writer.close();\n        }\n        finish();\n    } catch (err) {\n        try {\n            await writer.abort(err);\n            finish(err);\n        } catch (err) {\n            finish(err);\n        }\n    }\n}\nfunction pipeline(...streams) {\n    return pipelineImpl(streams, once(popCallback(streams)));\n}\nfunction pipelineImpl(streams, callback, opts) {\n    if (streams.length === 1 && ArrayIsArray(streams[0])) {\n        streams = streams[0];\n    }\n    if (streams.length < 2) {\n        throw new ERR_MISSING_ARGS(\"streams\");\n    }\n    const ac = new AbortController();\n    const signal = ac.signal;\n    const outerSignal = opts === null || opts === undefined ? undefined : opts.signal;\n    // Need to cleanup event listeners if last stream is readable\n    // https://github.com/nodejs/node/issues/35452\n    const lastStreamCleanup = [];\n    validateAbortSignal(outerSignal, \"options.signal\");\n    function abort() {\n        finishImpl(new AbortError());\n    }\n    outerSignal === null || outerSignal === undefined ? undefined : outerSignal.addEventListener(\"abort\", abort);\n    let error;\n    let value;\n    const destroys = [];\n    let finishCount = 0;\n    function finish(err) {\n        finishImpl(err, --finishCount === 0);\n    }\n    function finishImpl(err, final) {\n        if (err && (!error || error.code === \"ERR_STREAM_PREMATURE_CLOSE\")) {\n            error = err;\n        }\n        if (!error && !final) {\n            return;\n        }\n        while(destroys.length){\n            destroys.shift()(error);\n        }\n        outerSignal === null || outerSignal === undefined ? undefined : outerSignal.removeEventListener(\"abort\", abort);\n        ac.abort();\n        if (final) {\n            if (!error) {\n                lastStreamCleanup.forEach((fn)=>fn());\n            }\n            process.nextTick(callback, error, value);\n        }\n    }\n    let ret;\n    for(let i = 0; i < streams.length; i++){\n        const stream = streams[i];\n        const reading = i < streams.length - 1;\n        const writing = i > 0;\n        const end = reading || (opts === null || opts === undefined ? undefined : opts.end) !== false;\n        const isLastStream = i === streams.length - 1;\n        if (isNodeStream(stream)) {\n            if (end) {\n                const { destroy, cleanup } = destroyer(stream, reading, writing);\n                destroys.push(destroy);\n                if (isReadable(stream) && isLastStream) {\n                    lastStreamCleanup.push(cleanup);\n                }\n            }\n            // Catch stream errors that occur after pipe/pump has completed.\n            function onError(err) {\n                if (err && err.name !== \"AbortError\" && err.code !== \"ERR_STREAM_PREMATURE_CLOSE\") {\n                    finish(err);\n                }\n            }\n            stream.on(\"error\", onError);\n            if (isReadable(stream) && isLastStream) {\n                lastStreamCleanup.push(()=>{\n                    stream.removeListener(\"error\", onError);\n                });\n            }\n        }\n        if (i === 0) {\n            if (typeof stream === \"function\") {\n                ret = stream({\n                    signal\n                });\n                if (!isIterable(ret)) {\n                    throw new ERR_INVALID_RETURN_VALUE(\"Iterable, AsyncIterable or Stream\", \"source\", ret);\n                }\n            } else if (isIterable(stream) || isReadableNodeStream(stream) || isTransformStream(stream)) {\n                ret = stream;\n            } else {\n                ret = Duplex.from(stream);\n            }\n        } else if (typeof stream === \"function\") {\n            if (isTransformStream(ret)) {\n                var _ret;\n                ret = makeAsyncIterable((_ret = ret) === null || _ret === undefined ? undefined : _ret.readable);\n            } else {\n                ret = makeAsyncIterable(ret);\n            }\n            ret = stream(ret, {\n                signal\n            });\n            if (reading) {\n                if (!isIterable(ret, true)) {\n                    throw new ERR_INVALID_RETURN_VALUE(\"AsyncIterable\", `transform[${i - 1}]`, ret);\n                }\n            } else {\n                var _ret2;\n                if (!PassThrough) {\n                    PassThrough = __webpack_require__(/*! ./passthrough */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/passthrough.js\");\n                }\n                // If the last argument to pipeline is not a stream\n                // we must create a proxy stream so that pipeline(...)\n                // always returns a stream which can be further\n                // composed through `.pipe(stream)`.\n                const pt = new PassThrough({\n                    objectMode: true\n                });\n                // Handle Promises/A+ spec, `then` could be a getter that throws on\n                // second use.\n                const then = (_ret2 = ret) === null || _ret2 === undefined ? undefined : _ret2.then;\n                if (typeof then === \"function\") {\n                    finishCount++;\n                    then.call(ret, (val)=>{\n                        value = val;\n                        if (val != null) {\n                            pt.write(val);\n                        }\n                        if (end) {\n                            pt.end();\n                        }\n                        process.nextTick(finish);\n                    }, (err)=>{\n                        pt.destroy(err);\n                        process.nextTick(finish, err);\n                    });\n                } else if (isIterable(ret, true)) {\n                    finishCount++;\n                    pumpToNode(ret, pt, finish, {\n                        end\n                    });\n                } else if (isReadableStream(ret) || isTransformStream(ret)) {\n                    const toRead = ret.readable || ret;\n                    finishCount++;\n                    pumpToNode(toRead, pt, finish, {\n                        end\n                    });\n                } else {\n                    throw new ERR_INVALID_RETURN_VALUE(\"AsyncIterable or Promise\", \"destination\", ret);\n                }\n                ret = pt;\n                const { destroy, cleanup } = destroyer(ret, false, true);\n                destroys.push(destroy);\n                if (isLastStream) {\n                    lastStreamCleanup.push(cleanup);\n                }\n            }\n        } else if (isNodeStream(stream)) {\n            if (isReadableNodeStream(ret)) {\n                finishCount += 2;\n                const cleanup = pipe(ret, stream, finish, {\n                    end\n                });\n                if (isReadable(stream) && isLastStream) {\n                    lastStreamCleanup.push(cleanup);\n                }\n            } else if (isTransformStream(ret) || isReadableStream(ret)) {\n                const toRead = ret.readable || ret;\n                finishCount++;\n                pumpToNode(toRead, stream, finish, {\n                    end\n                });\n            } else if (isIterable(ret)) {\n                finishCount++;\n                pumpToNode(ret, stream, finish, {\n                    end\n                });\n            } else {\n                throw new ERR_INVALID_ARG_TYPE(\"val\", [\n                    \"Readable\",\n                    \"Iterable\",\n                    \"AsyncIterable\",\n                    \"ReadableStream\",\n                    \"TransformStream\"\n                ], ret);\n            }\n            ret = stream;\n        } else if (isWebStream(stream)) {\n            if (isReadableNodeStream(ret)) {\n                finishCount++;\n                pumpToWeb(makeAsyncIterable(ret), stream, finish, {\n                    end\n                });\n            } else if (isReadableStream(ret) || isIterable(ret)) {\n                finishCount++;\n                pumpToWeb(ret, stream, finish, {\n                    end\n                });\n            } else if (isTransformStream(ret)) {\n                finishCount++;\n                pumpToWeb(ret.readable, stream, finish, {\n                    end\n                });\n            } else {\n                throw new ERR_INVALID_ARG_TYPE(\"val\", [\n                    \"Readable\",\n                    \"Iterable\",\n                    \"AsyncIterable\",\n                    \"ReadableStream\",\n                    \"TransformStream\"\n                ], ret);\n            }\n            ret = stream;\n        } else {\n            ret = Duplex.from(stream);\n        }\n    }\n    if (signal !== null && signal !== undefined && signal.aborted || outerSignal !== null && outerSignal !== undefined && outerSignal.aborted) {\n        process.nextTick(abort);\n    }\n    return ret;\n}\nfunction pipe(src, dst, finish, { end }) {\n    let ended = false;\n    dst.on(\"close\", ()=>{\n        if (!ended) {\n            // Finish if the destination closes before the source has completed.\n            finish(new ERR_STREAM_PREMATURE_CLOSE());\n        }\n    });\n    src.pipe(dst, {\n        end: false\n    }) // If end is true we already will have a listener to end dst.\n    ;\n    if (end) {\n        // Compat. Before node v10.12.0 stdio used to throw an error so\n        // pipe() did/does not end() stdio destinations.\n        // Now they allow it but \"secretly\" don't close the underlying fd.\n        function endFn() {\n            ended = true;\n            dst.end();\n        }\n        if (isReadableEnded(src)) {\n            // End the destination if the source has already ended.\n            process.nextTick(endFn);\n        } else {\n            src.once(\"end\", endFn);\n        }\n    } else {\n        finish();\n    }\n    eos(src, {\n        readable: true,\n        writable: false\n    }, (err)=>{\n        const rState = src._readableState;\n        if (err && err.code === \"ERR_STREAM_PREMATURE_CLOSE\" && rState && rState.ended && !rState.errored && !rState.errorEmitted) {\n            // Some readable streams will emit 'close' before 'end'. However, since\n            // this is on the readable side 'end' should still be emitted if the\n            // stream has been ended and no error emitted. This should be allowed in\n            // favor of backwards compatibility. Since the stream is piped to a\n            // destination this should not result in any observable difference.\n            // We don't need to check if this is a writable premature close since\n            // eos will only fail with premature close on the reading side for\n            // duplex streams.\n            src.once(\"end\", finish).once(\"error\", finish);\n        } else {\n            finish(err);\n        }\n    });\n    return eos(dst, {\n        readable: false,\n        writable: true\n    }, finish);\n}\nmodule.exports = {\n    pipelineImpl,\n    pipeline\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/pipeline.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/readable.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/readable.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* replacement start */ const process = __webpack_require__(/*! process/ */ \"(ssr)/./node_modules/process/index.js\");\n\"use strict\";\nconst { ArrayPrototypeIndexOf, NumberIsInteger, NumberIsNaN, NumberParseInt, ObjectDefineProperties, ObjectKeys, ObjectSetPrototypeOf, Promise, SafeSet, SymbolAsyncIterator, Symbol } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nmodule.exports = Readable;\nReadable.ReadableState = ReadableState;\nconst { EventEmitter: EE } = __webpack_require__(/*! events */ \"events\");\nconst { Stream, prependListener } = __webpack_require__(/*! ./legacy */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/legacy.js\");\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\nconst { addAbortSignal } = __webpack_require__(/*! ./add-abort-signal */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js\");\nconst eos = __webpack_require__(/*! ./end-of-stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\nlet debug = (__webpack_require__(/*! ../../ours/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\").debuglog)(\"stream\", (fn)=>{\n    debug = fn;\n});\nconst BufferList = __webpack_require__(/*! ./buffer_list */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/buffer_list.js\");\nconst destroyImpl = __webpack_require__(/*! ./destroy */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nconst { getHighWaterMark, getDefaultHighWaterMark } = __webpack_require__(/*! ./state */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/state.js\");\nconst { aggregateTwoErrors, codes: { ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED, ERR_OUT_OF_RANGE, ERR_STREAM_PUSH_AFTER_EOF, ERR_STREAM_UNSHIFT_AFTER_END_EVENT } } = __webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst { validateObject } = __webpack_require__(/*! ../validators */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/validators.js\");\nconst kPaused = Symbol(\"kPaused\");\nconst { StringDecoder } = __webpack_require__(/*! string_decoder */ \"string_decoder\");\nconst from = __webpack_require__(/*! ./from */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/from.js\");\nObjectSetPrototypeOf(Readable.prototype, Stream.prototype);\nObjectSetPrototypeOf(Readable, Stream);\nconst nop = ()=>{};\nconst { errorOrDestroy } = destroyImpl;\nfunction ReadableState(options, stream, isDuplex) {\n    // Duplex streams are both readable and writable, but share\n    // the same options object.\n    // However, some cases require setting options to different\n    // values for the readable and the writable sides of the duplex stream.\n    // These options can be provided separately as readableXXX and writableXXX.\n    if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof __webpack_require__(/*! ./duplex */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\");\n    // Object stream flag. Used to make read(n) ignore n and to\n    // make all the buffer merging and length checks go away.\n    this.objectMode = !!(options && options.objectMode);\n    if (isDuplex) this.objectMode = this.objectMode || !!(options && options.readableObjectMode);\n    // The point at which it stops calling _read() to fill the buffer\n    // Note: 0 is a valid value, means \"don't call _read preemptively ever\"\n    this.highWaterMark = options ? getHighWaterMark(this, options, \"readableHighWaterMark\", isDuplex) : getDefaultHighWaterMark(false);\n    // A linked list is used to store data chunks instead of an array because the\n    // linked list can remove elements from the beginning faster than\n    // array.shift().\n    this.buffer = new BufferList();\n    this.length = 0;\n    this.pipes = [];\n    this.flowing = null;\n    this.ended = false;\n    this.endEmitted = false;\n    this.reading = false;\n    // Stream is still being constructed and cannot be\n    // destroyed until construction finished or failed.\n    // Async construction is opt in, therefore we start as\n    // constructed.\n    this.constructed = true;\n    // A flag to be able to tell if the event 'readable'/'data' is emitted\n    // immediately, or on a later tick.  We set this to true at first, because\n    // any actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first read call.\n    this.sync = true;\n    // Whenever we return null, then we set a flag to say\n    // that we're awaiting a 'readable' event emission.\n    this.needReadable = false;\n    this.emittedReadable = false;\n    this.readableListening = false;\n    this.resumeScheduled = false;\n    this[kPaused] = null;\n    // True if the error was already emitted and should not be thrown again.\n    this.errorEmitted = false;\n    // Should close be emitted on destroy. Defaults to true.\n    this.emitClose = !options || options.emitClose !== false;\n    // Should .destroy() be called after 'end' (and potentially 'finish').\n    this.autoDestroy = !options || options.autoDestroy !== false;\n    // Has it been destroyed.\n    this.destroyed = false;\n    // Indicates whether the stream has errored. When true no further\n    // _read calls, 'data' or 'readable' events should occur. This is needed\n    // since when autoDestroy is disabled we need a way to tell whether the\n    // stream has failed.\n    this.errored = null;\n    // Indicates whether the stream has finished destroying.\n    this.closed = false;\n    // True if close has been emitted or would have been emitted\n    // depending on emitClose.\n    this.closeEmitted = false;\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options && options.defaultEncoding || \"utf8\";\n    // Ref the piped dest which we need a drain event on it\n    // type: null | Writable | Set<Writable>.\n    this.awaitDrainWriters = null;\n    this.multiAwaitDrain = false;\n    // If true, a maybeReadMore has been scheduled.\n    this.readingMore = false;\n    this.dataEmitted = false;\n    this.decoder = null;\n    this.encoding = null;\n    if (options && options.encoding) {\n        this.decoder = new StringDecoder(options.encoding);\n        this.encoding = options.encoding;\n    }\n}\nfunction Readable(options) {\n    if (!(this instanceof Readable)) return new Readable(options);\n    // Checking for a Stream.Duplex instance is faster here instead of inside\n    // the ReadableState constructor, at least with V8 6.5.\n    const isDuplex = this instanceof __webpack_require__(/*! ./duplex */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\");\n    this._readableState = new ReadableState(options, this, isDuplex);\n    if (options) {\n        if (typeof options.read === \"function\") this._read = options.read;\n        if (typeof options.destroy === \"function\") this._destroy = options.destroy;\n        if (typeof options.construct === \"function\") this._construct = options.construct;\n        if (options.signal && !isDuplex) addAbortSignal(options.signal, this);\n    }\n    Stream.call(this, options);\n    destroyImpl.construct(this, ()=>{\n        if (this._readableState.needReadable) {\n            maybeReadMore(this, this._readableState);\n        }\n    });\n}\nReadable.prototype.destroy = destroyImpl.destroy;\nReadable.prototype._undestroy = destroyImpl.undestroy;\nReadable.prototype._destroy = function(err, cb) {\n    cb(err);\n};\nReadable.prototype[EE.captureRejectionSymbol] = function(err) {\n    this.destroy(err);\n};\n// Manually shove something into the read() buffer.\n// This returns true if the highWaterMark has not been hit yet,\n// similar to how Writable.write() returns true if you should\n// write() some more.\nReadable.prototype.push = function(chunk, encoding) {\n    return readableAddChunk(this, chunk, encoding, false);\n};\n// Unshift should *always* be something directly out of read().\nReadable.prototype.unshift = function(chunk, encoding) {\n    return readableAddChunk(this, chunk, encoding, true);\n};\nfunction readableAddChunk(stream, chunk, encoding, addToFront) {\n    debug(\"readableAddChunk\", chunk);\n    const state = stream._readableState;\n    let err;\n    if (!state.objectMode) {\n        if (typeof chunk === \"string\") {\n            encoding = encoding || state.defaultEncoding;\n            if (state.encoding !== encoding) {\n                if (addToFront && state.encoding) {\n                    // When unshifting, if state.encoding is set, we have to save\n                    // the string in the BufferList with the state encoding.\n                    chunk = Buffer.from(chunk, encoding).toString(state.encoding);\n                } else {\n                    chunk = Buffer.from(chunk, encoding);\n                    encoding = \"\";\n                }\n            }\n        } else if (chunk instanceof Buffer) {\n            encoding = \"\";\n        } else if (Stream._isUint8Array(chunk)) {\n            chunk = Stream._uint8ArrayToBuffer(chunk);\n            encoding = \"\";\n        } else if (chunk != null) {\n            err = new ERR_INVALID_ARG_TYPE(\"chunk\", [\n                \"string\",\n                \"Buffer\",\n                \"Uint8Array\"\n            ], chunk);\n        }\n    }\n    if (err) {\n        errorOrDestroy(stream, err);\n    } else if (chunk === null) {\n        state.reading = false;\n        onEofChunk(stream, state);\n    } else if (state.objectMode || chunk && chunk.length > 0) {\n        if (addToFront) {\n            if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());\n            else if (state.destroyed || state.errored) return false;\n            else addChunk(stream, state, chunk, true);\n        } else if (state.ended) {\n            errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());\n        } else if (state.destroyed || state.errored) {\n            return false;\n        } else {\n            state.reading = false;\n            if (state.decoder && !encoding) {\n                chunk = state.decoder.write(chunk);\n                if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);\n                else maybeReadMore(stream, state);\n            } else {\n                addChunk(stream, state, chunk, false);\n            }\n        }\n    } else if (!addToFront) {\n        state.reading = false;\n        maybeReadMore(stream, state);\n    }\n    // We can push more data if we are below the highWaterMark.\n    // Also, if we have no data yet, we can stand some more bytes.\n    // This is to work around cases where hwm=0, such as the repl.\n    return !state.ended && (state.length < state.highWaterMark || state.length === 0);\n}\nfunction addChunk(stream, state, chunk, addToFront) {\n    if (state.flowing && state.length === 0 && !state.sync && stream.listenerCount(\"data\") > 0) {\n        // Use the guard to avoid creating `Set()` repeatedly\n        // when we have multiple pipes.\n        if (state.multiAwaitDrain) {\n            state.awaitDrainWriters.clear();\n        } else {\n            state.awaitDrainWriters = null;\n        }\n        state.dataEmitted = true;\n        stream.emit(\"data\", chunk);\n    } else {\n        // Update the buffer info.\n        state.length += state.objectMode ? 1 : chunk.length;\n        if (addToFront) state.buffer.unshift(chunk);\n        else state.buffer.push(chunk);\n        if (state.needReadable) emitReadable(stream);\n    }\n    maybeReadMore(stream, state);\n}\nReadable.prototype.isPaused = function() {\n    const state = this._readableState;\n    return state[kPaused] === true || state.flowing === false;\n};\n// Backwards compatibility.\nReadable.prototype.setEncoding = function(enc) {\n    const decoder = new StringDecoder(enc);\n    this._readableState.decoder = decoder;\n    // If setEncoding(null), decoder.encoding equals utf8.\n    this._readableState.encoding = this._readableState.decoder.encoding;\n    const buffer = this._readableState.buffer;\n    // Iterate over current buffer to convert already stored Buffers:\n    let content = \"\";\n    for (const data of buffer){\n        content += decoder.write(data);\n    }\n    buffer.clear();\n    if (content !== \"\") buffer.push(content);\n    this._readableState.length = content.length;\n    return this;\n};\n// Don't raise the hwm > 1GB.\nconst MAX_HWM = 0x40000000;\nfunction computeNewHighWaterMark(n) {\n    if (n > MAX_HWM) {\n        throw new ERR_OUT_OF_RANGE(\"size\", \"<= 1GiB\", n);\n    } else {\n        // Get the next highest power of 2 to prevent increasing hwm excessively in\n        // tiny amounts.\n        n--;\n        n |= n >>> 1;\n        n |= n >>> 2;\n        n |= n >>> 4;\n        n |= n >>> 8;\n        n |= n >>> 16;\n        n++;\n    }\n    return n;\n}\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction howMuchToRead(n, state) {\n    if (n <= 0 || state.length === 0 && state.ended) return 0;\n    if (state.objectMode) return 1;\n    if (NumberIsNaN(n)) {\n        // Only flow one buffer at a time.\n        if (state.flowing && state.length) return state.buffer.first().length;\n        return state.length;\n    }\n    if (n <= state.length) return n;\n    return state.ended ? state.length : 0;\n}\n// You can override either this method, or the async _read(n) below.\nReadable.prototype.read = function(n) {\n    debug(\"read\", n);\n    // Same as parseInt(undefined, 10), however V8 7.3 performance regressed\n    // in this scenario, so we are doing it manually.\n    if (n === undefined) {\n        n = NaN;\n    } else if (!NumberIsInteger(n)) {\n        n = NumberParseInt(n, 10);\n    }\n    const state = this._readableState;\n    const nOrig = n;\n    // If we're asking for more than the current hwm, then raise the hwm.\n    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);\n    if (n !== 0) state.emittedReadable = false;\n    // If we're doing read(0) to trigger a readable event, but we\n    // already have a bunch of data in the buffer, then just trigger\n    // the 'readable' event and move on.\n    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {\n        debug(\"read: emitReadable\", state.length, state.ended);\n        if (state.length === 0 && state.ended) endReadable(this);\n        else emitReadable(this);\n        return null;\n    }\n    n = howMuchToRead(n, state);\n    // If we've ended, and we're now clear, then finish it up.\n    if (n === 0 && state.ended) {\n        if (state.length === 0) endReadable(this);\n        return null;\n    }\n    // All the actual chunk generation logic needs to be\n    // *below* the call to _read.  The reason is that in certain\n    // synthetic stream cases, such as passthrough streams, _read\n    // may be a completely synchronous operation which may change\n    // the state of the read buffer, providing enough data when\n    // before there was *not* enough.\n    //\n    // So, the steps are:\n    // 1. Figure out what the state of things will be after we do\n    // a read from the buffer.\n    //\n    // 2. If that resulting state will trigger a _read, then call _read.\n    // Note that this may be asynchronous, or synchronous.  Yes, it is\n    // deeply ugly to write APIs this way, but that still doesn't mean\n    // that the Readable class should behave improperly, as streams are\n    // designed to be sync/async agnostic.\n    // Take note if the _read call is sync or async (ie, if the read call\n    // has returned yet), so that we know whether or not it's safe to emit\n    // 'readable' etc.\n    //\n    // 3. Actually pull the requested chunks out of the buffer and return.\n    // if we need a readable event, then we need to do some reading.\n    let doRead = state.needReadable;\n    debug(\"need readable\", doRead);\n    // If we currently have less than the highWaterMark, then also read some.\n    if (state.length === 0 || state.length - n < state.highWaterMark) {\n        doRead = true;\n        debug(\"length less than watermark\", doRead);\n    }\n    // However, if we've ended, then there's no point, if we're already\n    // reading, then it's unnecessary, if we're constructing we have to wait,\n    // and if we're destroyed or errored, then it's not allowed,\n    if (state.ended || state.reading || state.destroyed || state.errored || !state.constructed) {\n        doRead = false;\n        debug(\"reading, ended or constructing\", doRead);\n    } else if (doRead) {\n        debug(\"do read\");\n        state.reading = true;\n        state.sync = true;\n        // If the length is currently zero, then we *need* a readable event.\n        if (state.length === 0) state.needReadable = true;\n        // Call internal read method\n        try {\n            this._read(state.highWaterMark);\n        } catch (err) {\n            errorOrDestroy(this, err);\n        }\n        state.sync = false;\n        // If _read pushed data synchronously, then `reading` will be false,\n        // and we need to re-evaluate how much data we can return to the user.\n        if (!state.reading) n = howMuchToRead(nOrig, state);\n    }\n    let ret;\n    if (n > 0) ret = fromList(n, state);\n    else ret = null;\n    if (ret === null) {\n        state.needReadable = state.length <= state.highWaterMark;\n        n = 0;\n    } else {\n        state.length -= n;\n        if (state.multiAwaitDrain) {\n            state.awaitDrainWriters.clear();\n        } else {\n            state.awaitDrainWriters = null;\n        }\n    }\n    if (state.length === 0) {\n        // If we have nothing in the buffer, then we want to know\n        // as soon as we *do* get something into the buffer.\n        if (!state.ended) state.needReadable = true;\n        // If we tried to read() past the EOF, then emit end on the next tick.\n        if (nOrig !== n && state.ended) endReadable(this);\n    }\n    if (ret !== null && !state.errorEmitted && !state.closeEmitted) {\n        state.dataEmitted = true;\n        this.emit(\"data\", ret);\n    }\n    return ret;\n};\nfunction onEofChunk(stream, state) {\n    debug(\"onEofChunk\");\n    if (state.ended) return;\n    if (state.decoder) {\n        const chunk = state.decoder.end();\n        if (chunk && chunk.length) {\n            state.buffer.push(chunk);\n            state.length += state.objectMode ? 1 : chunk.length;\n        }\n    }\n    state.ended = true;\n    if (state.sync) {\n        // If we are sync, wait until next tick to emit the data.\n        // Otherwise we risk emitting data in the flow()\n        // the readable code triggers during a read() call.\n        emitReadable(stream);\n    } else {\n        // Emit 'readable' now to make sure it gets picked up.\n        state.needReadable = false;\n        state.emittedReadable = true;\n        // We have to emit readable now that we are EOF. Modules\n        // in the ecosystem (e.g. dicer) rely on this event being sync.\n        emitReadable_(stream);\n    }\n}\n// Don't emit readable right away in sync mode, because this can trigger\n// another read() call => stack overflow.  This way, it might trigger\n// a nextTick recursion warning, but that's not so bad.\nfunction emitReadable(stream) {\n    const state = stream._readableState;\n    debug(\"emitReadable\", state.needReadable, state.emittedReadable);\n    state.needReadable = false;\n    if (!state.emittedReadable) {\n        debug(\"emitReadable\", state.flowing);\n        state.emittedReadable = true;\n        process.nextTick(emitReadable_, stream);\n    }\n}\nfunction emitReadable_(stream) {\n    const state = stream._readableState;\n    debug(\"emitReadable_\", state.destroyed, state.length, state.ended);\n    if (!state.destroyed && !state.errored && (state.length || state.ended)) {\n        stream.emit(\"readable\");\n        state.emittedReadable = false;\n    }\n    // The stream needs another readable event if:\n    // 1. It is not flowing, as the flow mechanism will take\n    //    care of it.\n    // 2. It is not ended.\n    // 3. It is below the highWaterMark, so we can schedule\n    //    another readable later.\n    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;\n    flow(stream);\n}\n// At this point, the user has presumably seen the 'readable' event,\n// and called read() to consume some data.  that may have triggered\n// in turn another _read(n) call, in which case reading = true if\n// it's in progress.\n// However, if we're not ended, or reading, and the length < hwm,\n// then go ahead and try to read some more preemptively.\nfunction maybeReadMore(stream, state) {\n    if (!state.readingMore && state.constructed) {\n        state.readingMore = true;\n        process.nextTick(maybeReadMore_, stream, state);\n    }\n}\nfunction maybeReadMore_(stream, state) {\n    // Attempt to read more data if we should.\n    //\n    // The conditions for reading more data are (one of):\n    // - Not enough data buffered (state.length < state.highWaterMark). The loop\n    //   is responsible for filling the buffer with enough data if such data\n    //   is available. If highWaterMark is 0 and we are not in the flowing mode\n    //   we should _not_ attempt to buffer any extra data. We'll get more data\n    //   when the stream consumer calls read() instead.\n    // - No data in the buffer, and the stream is in flowing mode. In this mode\n    //   the loop below is responsible for ensuring read() is called. Failing to\n    //   call read here would abort the flow and there's no other mechanism for\n    //   continuing the flow if the stream consumer has just subscribed to the\n    //   'data' event.\n    //\n    // In addition to the above conditions to keep reading data, the following\n    // conditions prevent the data from being read:\n    // - The stream has ended (state.ended).\n    // - There is already a pending 'read' operation (state.reading). This is a\n    //   case where the stream has called the implementation defined _read()\n    //   method, but they are processing the call asynchronously and have _not_\n    //   called push() with new data. In this case we skip performing more\n    //   read()s. The execution ends in this method again after the _read() ends\n    //   up calling push() with more data.\n    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){\n        const len = state.length;\n        debug(\"maybeReadMore read 0\");\n        stream.read(0);\n        if (len === state.length) break;\n    }\n    state.readingMore = false;\n}\n// Abstract method.  to be overridden in specific implementation classes.\n// call cb(er, data) where data is <= n in length.\n// for virtual (non-string, non-buffer) streams, \"length\" is somewhat\n// arbitrary, and perhaps not very meaningful.\nReadable.prototype._read = function(n) {\n    throw new ERR_METHOD_NOT_IMPLEMENTED(\"_read()\");\n};\nReadable.prototype.pipe = function(dest, pipeOpts) {\n    const src = this;\n    const state = this._readableState;\n    if (state.pipes.length === 1) {\n        if (!state.multiAwaitDrain) {\n            state.multiAwaitDrain = true;\n            state.awaitDrainWriters = new SafeSet(state.awaitDrainWriters ? [\n                state.awaitDrainWriters\n            ] : []);\n        }\n    }\n    state.pipes.push(dest);\n    debug(\"pipe count=%d opts=%j\", state.pipes.length, pipeOpts);\n    const doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;\n    const endFn = doEnd ? onend : unpipe;\n    if (state.endEmitted) process.nextTick(endFn);\n    else src.once(\"end\", endFn);\n    dest.on(\"unpipe\", onunpipe);\n    function onunpipe(readable, unpipeInfo) {\n        debug(\"onunpipe\");\n        if (readable === src) {\n            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {\n                unpipeInfo.hasUnpiped = true;\n                cleanup();\n            }\n        }\n    }\n    function onend() {\n        debug(\"onend\");\n        dest.end();\n    }\n    let ondrain;\n    let cleanedUp = false;\n    function cleanup() {\n        debug(\"cleanup\");\n        // Cleanup event handlers once the pipe is broken.\n        dest.removeListener(\"close\", onclose);\n        dest.removeListener(\"finish\", onfinish);\n        if (ondrain) {\n            dest.removeListener(\"drain\", ondrain);\n        }\n        dest.removeListener(\"error\", onerror);\n        dest.removeListener(\"unpipe\", onunpipe);\n        src.removeListener(\"end\", onend);\n        src.removeListener(\"end\", unpipe);\n        src.removeListener(\"data\", ondata);\n        cleanedUp = true;\n        // If the reader is waiting for a drain event from this\n        // specific writer, then it would cause it to never start\n        // flowing again.\n        // So, if this is awaiting a drain, then we just call it now.\n        // If we don't know, then assume that we are waiting for one.\n        if (ondrain && state.awaitDrainWriters && (!dest._writableState || dest._writableState.needDrain)) ondrain();\n    }\n    function pause() {\n        // If the user unpiped during `dest.write()`, it is possible\n        // to get stuck in a permanently paused state if that write\n        // also returned false.\n        // => Check whether `dest` is still a piping destination.\n        if (!cleanedUp) {\n            if (state.pipes.length === 1 && state.pipes[0] === dest) {\n                debug(\"false write response, pause\", 0);\n                state.awaitDrainWriters = dest;\n                state.multiAwaitDrain = false;\n            } else if (state.pipes.length > 1 && state.pipes.includes(dest)) {\n                debug(\"false write response, pause\", state.awaitDrainWriters.size);\n                state.awaitDrainWriters.add(dest);\n            }\n            src.pause();\n        }\n        if (!ondrain) {\n            // When the dest drains, it reduces the awaitDrain counter\n            // on the source.  This would be more elegant with a .once()\n            // handler in flow(), but adding and removing repeatedly is\n            // too slow.\n            ondrain = pipeOnDrain(src, dest);\n            dest.on(\"drain\", ondrain);\n        }\n    }\n    src.on(\"data\", ondata);\n    function ondata(chunk) {\n        debug(\"ondata\");\n        const ret = dest.write(chunk);\n        debug(\"dest.write\", ret);\n        if (ret === false) {\n            pause();\n        }\n    }\n    // If the dest has an error, then stop piping into it.\n    // However, don't suppress the throwing behavior for this.\n    function onerror(er) {\n        debug(\"onerror\", er);\n        unpipe();\n        dest.removeListener(\"error\", onerror);\n        if (dest.listenerCount(\"error\") === 0) {\n            const s = dest._writableState || dest._readableState;\n            if (s && !s.errorEmitted) {\n                // User incorrectly emitted 'error' directly on the stream.\n                errorOrDestroy(dest, er);\n            } else {\n                dest.emit(\"error\", er);\n            }\n        }\n    }\n    // Make sure our error handler is attached before userland ones.\n    prependListener(dest, \"error\", onerror);\n    // Both close and finish should trigger unpipe, but only once.\n    function onclose() {\n        dest.removeListener(\"finish\", onfinish);\n        unpipe();\n    }\n    dest.once(\"close\", onclose);\n    function onfinish() {\n        debug(\"onfinish\");\n        dest.removeListener(\"close\", onclose);\n        unpipe();\n    }\n    dest.once(\"finish\", onfinish);\n    function unpipe() {\n        debug(\"unpipe\");\n        src.unpipe(dest);\n    }\n    // Tell the dest that it's being piped to.\n    dest.emit(\"pipe\", src);\n    // Start the flow if it hasn't been started already.\n    if (dest.writableNeedDrain === true) {\n        if (state.flowing) {\n            pause();\n        }\n    } else if (!state.flowing) {\n        debug(\"pipe resume\");\n        src.resume();\n    }\n    return dest;\n};\nfunction pipeOnDrain(src, dest) {\n    return function pipeOnDrainFunctionResult() {\n        const state = src._readableState;\n        // `ondrain` will call directly,\n        // `this` maybe not a reference to dest,\n        // so we use the real dest here.\n        if (state.awaitDrainWriters === dest) {\n            debug(\"pipeOnDrain\", 1);\n            state.awaitDrainWriters = null;\n        } else if (state.multiAwaitDrain) {\n            debug(\"pipeOnDrain\", state.awaitDrainWriters.size);\n            state.awaitDrainWriters.delete(dest);\n        }\n        if ((!state.awaitDrainWriters || state.awaitDrainWriters.size === 0) && src.listenerCount(\"data\")) {\n            src.resume();\n        }\n    };\n}\nReadable.prototype.unpipe = function(dest) {\n    const state = this._readableState;\n    const unpipeInfo = {\n        hasUnpiped: false\n    };\n    // If we're not piping anywhere, then do nothing.\n    if (state.pipes.length === 0) return this;\n    if (!dest) {\n        // remove all.\n        const dests = state.pipes;\n        state.pipes = [];\n        this.pause();\n        for(let i = 0; i < dests.length; i++)dests[i].emit(\"unpipe\", this, {\n            hasUnpiped: false\n        });\n        return this;\n    }\n    // Try to find the right one.\n    const index = ArrayPrototypeIndexOf(state.pipes, dest);\n    if (index === -1) return this;\n    state.pipes.splice(index, 1);\n    if (state.pipes.length === 0) this.pause();\n    dest.emit(\"unpipe\", this, unpipeInfo);\n    return this;\n};\n// Set up data events if they are asked for\n// Ensure readable listeners eventually get something.\nReadable.prototype.on = function(ev, fn) {\n    const res = Stream.prototype.on.call(this, ev, fn);\n    const state = this._readableState;\n    if (ev === \"data\") {\n        // Update readableListening so that resume() may be a no-op\n        // a few lines down. This is needed to support once('readable').\n        state.readableListening = this.listenerCount(\"readable\") > 0;\n        // Try start flowing on next tick if stream isn't explicitly paused.\n        if (state.flowing !== false) this.resume();\n    } else if (ev === \"readable\") {\n        if (!state.endEmitted && !state.readableListening) {\n            state.readableListening = state.needReadable = true;\n            state.flowing = false;\n            state.emittedReadable = false;\n            debug(\"on readable\", state.length, state.reading);\n            if (state.length) {\n                emitReadable(this);\n            } else if (!state.reading) {\n                process.nextTick(nReadingNextTick, this);\n            }\n        }\n    }\n    return res;\n};\nReadable.prototype.addListener = Readable.prototype.on;\nReadable.prototype.removeListener = function(ev, fn) {\n    const res = Stream.prototype.removeListener.call(this, ev, fn);\n    if (ev === \"readable\") {\n        // We need to check if there is someone still listening to\n        // readable and reset the state. However this needs to happen\n        // after readable has been emitted but before I/O (nextTick) to\n        // support once('readable', fn) cycles. This means that calling\n        // resume within the same tick will have no\n        // effect.\n        process.nextTick(updateReadableListening, this);\n    }\n    return res;\n};\nReadable.prototype.off = Readable.prototype.removeListener;\nReadable.prototype.removeAllListeners = function(ev) {\n    const res = Stream.prototype.removeAllListeners.apply(this, arguments);\n    if (ev === \"readable\" || ev === undefined) {\n        // We need to check if there is someone still listening to\n        // readable and reset the state. However this needs to happen\n        // after readable has been emitted but before I/O (nextTick) to\n        // support once('readable', fn) cycles. This means that calling\n        // resume within the same tick will have no\n        // effect.\n        process.nextTick(updateReadableListening, this);\n    }\n    return res;\n};\nfunction updateReadableListening(self) {\n    const state = self._readableState;\n    state.readableListening = self.listenerCount(\"readable\") > 0;\n    if (state.resumeScheduled && state[kPaused] === false) {\n        // Flowing needs to be set to true now, otherwise\n        // the upcoming resume will not flow.\n        state.flowing = true;\n    // Crude way to check if we should resume.\n    } else if (self.listenerCount(\"data\") > 0) {\n        self.resume();\n    } else if (!state.readableListening) {\n        state.flowing = null;\n    }\n}\nfunction nReadingNextTick(self) {\n    debug(\"readable nexttick read 0\");\n    self.read(0);\n}\n// pause() and resume() are remnants of the legacy readable stream API\n// If the user uses them, then switch into old mode.\nReadable.prototype.resume = function() {\n    const state = this._readableState;\n    if (!state.flowing) {\n        debug(\"resume\");\n        // We flow only if there is no one listening\n        // for readable, but we still have to call\n        // resume().\n        state.flowing = !state.readableListening;\n        resume(this, state);\n    }\n    state[kPaused] = false;\n    return this;\n};\nfunction resume(stream, state) {\n    if (!state.resumeScheduled) {\n        state.resumeScheduled = true;\n        process.nextTick(resume_, stream, state);\n    }\n}\nfunction resume_(stream, state) {\n    debug(\"resume\", state.reading);\n    if (!state.reading) {\n        stream.read(0);\n    }\n    state.resumeScheduled = false;\n    stream.emit(\"resume\");\n    flow(stream);\n    if (state.flowing && !state.reading) stream.read(0);\n}\nReadable.prototype.pause = function() {\n    debug(\"call pause flowing=%j\", this._readableState.flowing);\n    if (this._readableState.flowing !== false) {\n        debug(\"pause\");\n        this._readableState.flowing = false;\n        this.emit(\"pause\");\n    }\n    this._readableState[kPaused] = true;\n    return this;\n};\nfunction flow(stream) {\n    const state = stream._readableState;\n    debug(\"flow\", state.flowing);\n    while(state.flowing && stream.read() !== null);\n}\n// Wrap an old-style stream as the async data source.\n// This is *not* part of the readable stream interface.\n// It is an ugly unfortunate mess of history.\nReadable.prototype.wrap = function(stream) {\n    let paused = false;\n    // TODO (ronag): Should this.destroy(err) emit\n    // 'error' on the wrapped stream? Would require\n    // a static factory method, e.g. Readable.wrap(stream).\n    stream.on(\"data\", (chunk)=>{\n        if (!this.push(chunk) && stream.pause) {\n            paused = true;\n            stream.pause();\n        }\n    });\n    stream.on(\"end\", ()=>{\n        this.push(null);\n    });\n    stream.on(\"error\", (err)=>{\n        errorOrDestroy(this, err);\n    });\n    stream.on(\"close\", ()=>{\n        this.destroy();\n    });\n    stream.on(\"destroy\", ()=>{\n        this.destroy();\n    });\n    this._read = ()=>{\n        if (paused && stream.resume) {\n            paused = false;\n            stream.resume();\n        }\n    };\n    // Proxy all the other methods. Important when wrapping filters and duplexes.\n    const streamKeys = ObjectKeys(stream);\n    for(let j = 1; j < streamKeys.length; j++){\n        const i = streamKeys[j];\n        if (this[i] === undefined && typeof stream[i] === \"function\") {\n            this[i] = stream[i].bind(stream);\n        }\n    }\n    return this;\n};\nReadable.prototype[SymbolAsyncIterator] = function() {\n    return streamToAsyncIterator(this);\n};\nReadable.prototype.iterator = function(options) {\n    if (options !== undefined) {\n        validateObject(options, \"options\");\n    }\n    return streamToAsyncIterator(this, options);\n};\nfunction streamToAsyncIterator(stream, options) {\n    if (typeof stream.read !== \"function\") {\n        stream = Readable.wrap(stream, {\n            objectMode: true\n        });\n    }\n    const iter = createAsyncIterator(stream, options);\n    iter.stream = stream;\n    return iter;\n}\nasync function* createAsyncIterator(stream, options) {\n    let callback = nop;\n    function next(resolve) {\n        if (this === stream) {\n            callback();\n            callback = nop;\n        } else {\n            callback = resolve;\n        }\n    }\n    stream.on(\"readable\", next);\n    let error;\n    const cleanup = eos(stream, {\n        writable: false\n    }, (err)=>{\n        error = err ? aggregateTwoErrors(error, err) : null;\n        callback();\n        callback = nop;\n    });\n    try {\n        while(true){\n            const chunk = stream.destroyed ? null : stream.read();\n            if (chunk !== null) {\n                yield chunk;\n            } else if (error) {\n                throw error;\n            } else if (error === null) {\n                return;\n            } else {\n                await new Promise(next);\n            }\n        }\n    } catch (err) {\n        error = aggregateTwoErrors(error, err);\n        throw error;\n    } finally{\n        if ((error || (options === null || options === undefined ? undefined : options.destroyOnReturn) !== false) && (error === undefined || stream._readableState.autoDestroy)) {\n            destroyImpl.destroyer(stream, null);\n        } else {\n            stream.off(\"readable\", next);\n            cleanup();\n        }\n    }\n}\n// Making it explicit these properties are not enumerable\n// because otherwise some prototype manipulation in\n// userland will fail.\nObjectDefineProperties(Readable.prototype, {\n    readable: {\n        __proto__: null,\n        get () {\n            const r = this._readableState;\n            // r.readable === false means that this is part of a Duplex stream\n            // where the readable side was disabled upon construction.\n            // Compat. The user might manually disable readable side through\n            // deprecated setter.\n            return !!r && r.readable !== false && !r.destroyed && !r.errorEmitted && !r.endEmitted;\n        },\n        set (val) {\n            // Backwards compat.\n            if (this._readableState) {\n                this._readableState.readable = !!val;\n            }\n        }\n    },\n    readableDidRead: {\n        __proto__: null,\n        enumerable: false,\n        get: function() {\n            return this._readableState.dataEmitted;\n        }\n    },\n    readableAborted: {\n        __proto__: null,\n        enumerable: false,\n        get: function() {\n            return !!(this._readableState.readable !== false && (this._readableState.destroyed || this._readableState.errored) && !this._readableState.endEmitted);\n        }\n    },\n    readableHighWaterMark: {\n        __proto__: null,\n        enumerable: false,\n        get: function() {\n            return this._readableState.highWaterMark;\n        }\n    },\n    readableBuffer: {\n        __proto__: null,\n        enumerable: false,\n        get: function() {\n            return this._readableState && this._readableState.buffer;\n        }\n    },\n    readableFlowing: {\n        __proto__: null,\n        enumerable: false,\n        get: function() {\n            return this._readableState.flowing;\n        },\n        set: function(state) {\n            if (this._readableState) {\n                this._readableState.flowing = state;\n            }\n        }\n    },\n    readableLength: {\n        __proto__: null,\n        enumerable: false,\n        get () {\n            return this._readableState.length;\n        }\n    },\n    readableObjectMode: {\n        __proto__: null,\n        enumerable: false,\n        get () {\n            return this._readableState ? this._readableState.objectMode : false;\n        }\n    },\n    readableEncoding: {\n        __proto__: null,\n        enumerable: false,\n        get () {\n            return this._readableState ? this._readableState.encoding : null;\n        }\n    },\n    errored: {\n        __proto__: null,\n        enumerable: false,\n        get () {\n            return this._readableState ? this._readableState.errored : null;\n        }\n    },\n    closed: {\n        __proto__: null,\n        get () {\n            return this._readableState ? this._readableState.closed : false;\n        }\n    },\n    destroyed: {\n        __proto__: null,\n        enumerable: false,\n        get () {\n            return this._readableState ? this._readableState.destroyed : false;\n        },\n        set (value) {\n            // We ignore the value if the stream\n            // has not been initialized yet.\n            if (!this._readableState) {\n                return;\n            }\n            // Backward compatibility, the user is explicitly\n            // managing destroyed.\n            this._readableState.destroyed = value;\n        }\n    },\n    readableEnded: {\n        __proto__: null,\n        enumerable: false,\n        get () {\n            return this._readableState ? this._readableState.endEmitted : false;\n        }\n    }\n});\nObjectDefineProperties(ReadableState.prototype, {\n    // Legacy getter for `pipesCount`.\n    pipesCount: {\n        __proto__: null,\n        get () {\n            return this.pipes.length;\n        }\n    },\n    // Legacy property for `paused`.\n    paused: {\n        __proto__: null,\n        get () {\n            return this[kPaused] !== false;\n        },\n        set (value) {\n            this[kPaused] = !!value;\n        }\n    }\n});\n// Exposed for testing purposes only.\nReadable._fromList = fromList;\n// Pluck off n bytes from an array of buffers.\n// Length is the combined lengths of all the buffers in the list.\n// This function is designed to be inlinable, so please take care when making\n// changes to the function body.\nfunction fromList(n, state) {\n    // nothing buffered.\n    if (state.length === 0) return null;\n    let ret;\n    if (state.objectMode) ret = state.buffer.shift();\n    else if (!n || n >= state.length) {\n        // Read it all, truncate the list.\n        if (state.decoder) ret = state.buffer.join(\"\");\n        else if (state.buffer.length === 1) ret = state.buffer.first();\n        else ret = state.buffer.concat(state.length);\n        state.buffer.clear();\n    } else {\n        // read part of list.\n        ret = state.buffer.consume(n, state.decoder);\n    }\n    return ret;\n}\nfunction endReadable(stream) {\n    const state = stream._readableState;\n    debug(\"endReadable\", state.endEmitted);\n    if (!state.endEmitted) {\n        state.ended = true;\n        process.nextTick(endReadableNT, state, stream);\n    }\n}\nfunction endReadableNT(state, stream) {\n    debug(\"endReadableNT\", state.endEmitted, state.length);\n    // Check that we didn't get one last unshift.\n    if (!state.errored && !state.closeEmitted && !state.endEmitted && state.length === 0) {\n        state.endEmitted = true;\n        stream.emit(\"end\");\n        if (stream.writable && stream.allowHalfOpen === false) {\n            process.nextTick(endWritableNT, stream);\n        } else if (state.autoDestroy) {\n            // In case of duplex streams we need a way to detect\n            // if the writable side is ready for autoDestroy as well.\n            const wState = stream._writableState;\n            const autoDestroy = !wState || wState.autoDestroy && // We don't expect the writable to ever 'finish'\n            // if writable is explicitly set to false.\n            (wState.finished || wState.writable === false);\n            if (autoDestroy) {\n                stream.destroy();\n            }\n        }\n    }\n}\nfunction endWritableNT(stream) {\n    const writable = stream.writable && !stream.writableEnded && !stream.destroyed;\n    if (writable) {\n        stream.end();\n    }\n}\nReadable.from = function(iterable, opts) {\n    return from(Readable, iterable, opts);\n};\nlet webStreamsAdapters;\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n    if (webStreamsAdapters === undefined) webStreamsAdapters = {};\n    return webStreamsAdapters;\n}\nReadable.fromWeb = function(readableStream, options) {\n    return lazyWebStreams().newStreamReadableFromReadableStream(readableStream, options);\n};\nReadable.toWeb = function(streamReadable, options) {\n    return lazyWebStreams().newReadableStreamFromStreamReadable(streamReadable, options);\n};\nReadable.wrap = function(src, options) {\n    var _ref, _src$readableObjectMo;\n    return new Readable({\n        objectMode: (_ref = (_src$readableObjectMo = src.readableObjectMode) !== null && _src$readableObjectMo !== undefined ? _src$readableObjectMo : src.objectMode) !== null && _ref !== undefined ? _ref : true,\n        ...options,\n        destroy (err, callback) {\n            destroyImpl.destroyer(src, err);\n            callback(err);\n        }\n    }).wrap(src);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/readable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/state.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/state.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { MathFloor, NumberIsInteger } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst { ERR_INVALID_ARG_VALUE } = (__webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\").codes);\nfunction highWaterMarkFrom(options, isDuplex, duplexKey) {\n    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;\n}\nfunction getDefaultHighWaterMark(objectMode) {\n    return objectMode ? 16 : 16 * 1024;\n}\nfunction getHighWaterMark(state, options, duplexKey, isDuplex) {\n    const hwm = highWaterMarkFrom(options, isDuplex, duplexKey);\n    if (hwm != null) {\n        if (!NumberIsInteger(hwm) || hwm < 0) {\n            const name = isDuplex ? `options.${duplexKey}` : \"options.highWaterMark\";\n            throw new ERR_INVALID_ARG_VALUE(name, hwm);\n        }\n        return MathFloor(hwm);\n    }\n    // Default value\n    return getDefaultHighWaterMark(state.objectMode);\n}\nmodule.exports = {\n    getHighWaterMark,\n    getDefaultHighWaterMark\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvc3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNLEVBQUVBLFNBQVMsRUFBRUMsZUFBZSxFQUFFLEdBQUdDLG1CQUFPQSxDQUFDO0FBQy9DLE1BQU0sRUFBRUMscUJBQXFCLEVBQUUsR0FBR0Qsd0pBQWtDO0FBQ3BFLFNBQVNHLGtCQUFrQkMsT0FBTyxFQUFFQyxRQUFRLEVBQUVDLFNBQVM7SUFDckQsT0FBT0YsUUFBUUcsYUFBYSxJQUFJLE9BQU9ILFFBQVFHLGFBQWEsR0FBR0YsV0FBV0QsT0FBTyxDQUFDRSxVQUFVLEdBQUc7QUFDakc7QUFDQSxTQUFTRSx3QkFBd0JDLFVBQVU7SUFDekMsT0FBT0EsYUFBYSxLQUFLLEtBQUs7QUFDaEM7QUFDQSxTQUFTQyxpQkFBaUJDLEtBQUssRUFBRVAsT0FBTyxFQUFFRSxTQUFTLEVBQUVELFFBQVE7SUFDM0QsTUFBTU8sTUFBTVQsa0JBQWtCQyxTQUFTQyxVQUFVQztJQUNqRCxJQUFJTSxPQUFPLE1BQU07UUFDZixJQUFJLENBQUNiLGdCQUFnQmEsUUFBUUEsTUFBTSxHQUFHO1lBQ3BDLE1BQU1DLE9BQU9SLFdBQVcsQ0FBQyxRQUFRLEVBQUVDLFVBQVUsQ0FBQyxHQUFHO1lBQ2pELE1BQU0sSUFBSUwsc0JBQXNCWSxNQUFNRDtRQUN4QztRQUNBLE9BQU9kLFVBQVVjO0lBQ25CO0lBRUEsZ0JBQWdCO0lBQ2hCLE9BQU9KLHdCQUF3QkcsTUFBTUYsVUFBVTtBQUNqRDtBQUNBSyxPQUFPQyxPQUFPLEdBQUc7SUFDZkw7SUFDQUY7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvaW50ZXJuYWwvc3RyZWFtcy9zdGF0ZS5qcz8wZjNhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IE1hdGhGbG9vciwgTnVtYmVySXNJbnRlZ2VyIH0gPSByZXF1aXJlKCcuLi8uLi9vdXJzL3ByaW1vcmRpYWxzJylcbmNvbnN0IHsgRVJSX0lOVkFMSURfQVJHX1ZBTFVFIH0gPSByZXF1aXJlKCcuLi8uLi9vdXJzL2Vycm9ycycpLmNvZGVzXG5mdW5jdGlvbiBoaWdoV2F0ZXJNYXJrRnJvbShvcHRpb25zLCBpc0R1cGxleCwgZHVwbGV4S2V5KSB7XG4gIHJldHVybiBvcHRpb25zLmhpZ2hXYXRlck1hcmsgIT0gbnVsbCA/IG9wdGlvbnMuaGlnaFdhdGVyTWFyayA6IGlzRHVwbGV4ID8gb3B0aW9uc1tkdXBsZXhLZXldIDogbnVsbFxufVxuZnVuY3Rpb24gZ2V0RGVmYXVsdEhpZ2hXYXRlck1hcmsob2JqZWN0TW9kZSkge1xuICByZXR1cm4gb2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0XG59XG5mdW5jdGlvbiBnZXRIaWdoV2F0ZXJNYXJrKHN0YXRlLCBvcHRpb25zLCBkdXBsZXhLZXksIGlzRHVwbGV4KSB7XG4gIGNvbnN0IGh3bSA9IGhpZ2hXYXRlck1hcmtGcm9tKG9wdGlvbnMsIGlzRHVwbGV4LCBkdXBsZXhLZXkpXG4gIGlmIChod20gIT0gbnVsbCkge1xuICAgIGlmICghTnVtYmVySXNJbnRlZ2VyKGh3bSkgfHwgaHdtIDwgMCkge1xuICAgICAgY29uc3QgbmFtZSA9IGlzRHVwbGV4ID8gYG9wdGlvbnMuJHtkdXBsZXhLZXl9YCA6ICdvcHRpb25zLmhpZ2hXYXRlck1hcmsnXG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1ZBTFVFKG5hbWUsIGh3bSlcbiAgICB9XG4gICAgcmV0dXJuIE1hdGhGbG9vcihod20pXG4gIH1cblxuICAvLyBEZWZhdWx0IHZhbHVlXG4gIHJldHVybiBnZXREZWZhdWx0SGlnaFdhdGVyTWFyayhzdGF0ZS5vYmplY3RNb2RlKVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGdldEhpZ2hXYXRlck1hcmssXG4gIGdldERlZmF1bHRIaWdoV2F0ZXJNYXJrXG59XG4iXSwibmFtZXMiOlsiTWF0aEZsb29yIiwiTnVtYmVySXNJbnRlZ2VyIiwicmVxdWlyZSIsIkVSUl9JTlZBTElEX0FSR19WQUxVRSIsImNvZGVzIiwiaGlnaFdhdGVyTWFya0Zyb20iLCJvcHRpb25zIiwiaXNEdXBsZXgiLCJkdXBsZXhLZXkiLCJoaWdoV2F0ZXJNYXJrIiwiZ2V0RGVmYXVsdEhpZ2hXYXRlck1hcmsiLCJvYmplY3RNb2RlIiwiZ2V0SGlnaFdhdGVyTWFyayIsInN0YXRlIiwiaHdtIiwibmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/state.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/transform.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/transform.js ***!
  \*****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n// a transform stream is a readable/writable stream where you do\n// something with the data.  Sometimes it's called a \"filter\",\n// but that's not a great name for it, since that implies a thing where\n// some bits pass through, and others are simply ignored.  (That would\n// be a valid example of a transform, of course.)\n//\n// While the output is causally related to the input, it's not a\n// necessarily symmetric or synchronous transformation.  For example,\n// a zlib stream might take multiple plain-text writes(), and then\n// emit a single compressed chunk some time in the future.\n//\n// Here's how this works:\n//\n// The Transform stream has all the aspects of the readable and writable\n// stream classes.  When you write(chunk), that calls _write(chunk,cb)\n// internally, and returns false if there's a lot of pending writes\n// buffered up.  When you call read(), that calls _read(n) until\n// there's enough pending readable data buffered up.\n//\n// In a transform stream, the written data is placed in a buffer.  When\n// _read(n) is called, it transforms the queued up data, calling the\n// buffered _write cb's as it consumes chunks.  If consuming a single\n// written chunk would result in multiple output chunks, then the first\n// outputted bit calls the readcb, and subsequent chunks just go into\n// the read buffer, and will cause it to emit 'readable' if necessary.\n//\n// This way, back-pressure is actually determined by the reading side,\n// since _read has to be called to start processing a new chunk.  However,\n// a pathological inflate type of transform can cause excessive buffering\n// here.  For example, imagine a stream where every byte of input is\n// interpreted as an integer from 0-255, and then results in that many\n// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in\n// 1kb of data being output.  In this case, you could write a very small\n// amount of input, and end up with a very large amount of output.  In\n// such a pathological inflating mechanism, there'd be no way to tell\n// the system to stop doing the transform.  A single 4MB write could\n// cause the system to run out of memory.\n//\n// However, even in such a pathological case, only a single written chunk\n// would be consumed, and then the rest would wait (un-transformed) until\n// the results of the previous transformed chunk were consumed.\n\nconst { ObjectSetPrototypeOf, Symbol } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nmodule.exports = Transform;\nconst { ERR_METHOD_NOT_IMPLEMENTED } = (__webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\").codes);\nconst Duplex = __webpack_require__(/*! ./duplex */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\");\nconst { getHighWaterMark } = __webpack_require__(/*! ./state */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/state.js\");\nObjectSetPrototypeOf(Transform.prototype, Duplex.prototype);\nObjectSetPrototypeOf(Transform, Duplex);\nconst kCallback = Symbol(\"kCallback\");\nfunction Transform(options) {\n    if (!(this instanceof Transform)) return new Transform(options);\n    // TODO (ronag): This should preferably always be\n    // applied but would be semver-major. Or even better;\n    // make Transform a Readable with the Writable interface.\n    const readableHighWaterMark = options ? getHighWaterMark(this, options, \"readableHighWaterMark\", true) : null;\n    if (readableHighWaterMark === 0) {\n        // A Duplex will buffer both on the writable and readable side while\n        // a Transform just wants to buffer hwm number of elements. To avoid\n        // buffering twice we disable buffering on the writable side.\n        options = {\n            ...options,\n            highWaterMark: null,\n            readableHighWaterMark,\n            // TODO (ronag): 0 is not optimal since we have\n            // a \"bug\" where we check needDrain before calling _write and not after.\n            // Refs: https://github.com/nodejs/node/pull/32887\n            // Refs: https://github.com/nodejs/node/pull/35941\n            writableHighWaterMark: options.writableHighWaterMark || 0\n        };\n    }\n    Duplex.call(this, options);\n    // We have implemented the _read method, and done the other things\n    // that Readable wants before the first _read call, so unset the\n    // sync guard flag.\n    this._readableState.sync = false;\n    this[kCallback] = null;\n    if (options) {\n        if (typeof options.transform === \"function\") this._transform = options.transform;\n        if (typeof options.flush === \"function\") this._flush = options.flush;\n    }\n    // When the writable side finishes, then flush out anything remaining.\n    // Backwards compat. Some Transform streams incorrectly implement _final\n    // instead of or in addition to _flush. By using 'prefinish' instead of\n    // implementing _final we continue supporting this unfortunate use case.\n    this.on(\"prefinish\", prefinish);\n}\nfunction final(cb) {\n    if (typeof this._flush === \"function\" && !this.destroyed) {\n        this._flush((er, data)=>{\n            if (er) {\n                if (cb) {\n                    cb(er);\n                } else {\n                    this.destroy(er);\n                }\n                return;\n            }\n            if (data != null) {\n                this.push(data);\n            }\n            this.push(null);\n            if (cb) {\n                cb();\n            }\n        });\n    } else {\n        this.push(null);\n        if (cb) {\n            cb();\n        }\n    }\n}\nfunction prefinish() {\n    if (this._final !== final) {\n        final.call(this);\n    }\n}\nTransform.prototype._final = final;\nTransform.prototype._transform = function(chunk, encoding, callback) {\n    throw new ERR_METHOD_NOT_IMPLEMENTED(\"_transform()\");\n};\nTransform.prototype._write = function(chunk, encoding, callback) {\n    const rState = this._readableState;\n    const wState = this._writableState;\n    const length = rState.length;\n    this._transform(chunk, encoding, (err, val)=>{\n        if (err) {\n            callback(err);\n            return;\n        }\n        if (val != null) {\n            this.push(val);\n        }\n        if (wState.ended || // Backwards compat.\n        length === rState.length || // Backwards compat.\n        rState.length < rState.highWaterMark) {\n            callback();\n        } else {\n            this[kCallback] = callback;\n        }\n    });\n};\nTransform.prototype._read = function() {\n    if (this[kCallback]) {\n        const callback = this[kCallback];\n        this[kCallback] = null;\n        callback();\n    }\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3N0cmVhbXMvdHJhbnNmb3JtLmpzIiwibWFwcGluZ3MiOiJBQUFBLHNEQUFzRDtBQUN0RCxFQUFFO0FBQ0YsMEVBQTBFO0FBQzFFLGdFQUFnRTtBQUNoRSxzRUFBc0U7QUFDdEUsc0VBQXNFO0FBQ3RFLDRFQUE0RTtBQUM1RSxxRUFBcUU7QUFDckUsd0JBQXdCO0FBQ3hCLEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUseURBQXlEO0FBQ3pELEVBQUU7QUFDRiwwRUFBMEU7QUFDMUUsNkRBQTZEO0FBQzdELDRFQUE0RTtBQUM1RSwyRUFBMkU7QUFDM0Usd0VBQXdFO0FBQ3hFLDRFQUE0RTtBQUM1RSx5Q0FBeUM7QUFFekMsZ0VBQWdFO0FBQ2hFLDhEQUE4RDtBQUM5RCx1RUFBdUU7QUFDdkUsc0VBQXNFO0FBQ3RFLGlEQUFpRDtBQUNqRCxFQUFFO0FBQ0YsZ0VBQWdFO0FBQ2hFLHFFQUFxRTtBQUNyRSxrRUFBa0U7QUFDbEUsMERBQTBEO0FBQzFELEVBQUU7QUFDRix5QkFBeUI7QUFDekIsRUFBRTtBQUNGLHdFQUF3RTtBQUN4RSxzRUFBc0U7QUFDdEUsbUVBQW1FO0FBQ25FLGdFQUFnRTtBQUNoRSxvREFBb0Q7QUFDcEQsRUFBRTtBQUNGLHVFQUF1RTtBQUN2RSxvRUFBb0U7QUFDcEUscUVBQXFFO0FBQ3JFLHVFQUF1RTtBQUN2RSxxRUFBcUU7QUFDckUsc0VBQXNFO0FBQ3RFLEVBQUU7QUFDRixzRUFBc0U7QUFDdEUsMEVBQTBFO0FBQzFFLHlFQUF5RTtBQUN6RSxvRUFBb0U7QUFDcEUsc0VBQXNFO0FBQ3RFLHNFQUFzRTtBQUN0RSx3RUFBd0U7QUFDeEUsc0VBQXNFO0FBQ3RFLHFFQUFxRTtBQUNyRSxvRUFBb0U7QUFDcEUseUNBQXlDO0FBQ3pDLEVBQUU7QUFDRix5RUFBeUU7QUFDekUseUVBQXlFO0FB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SSxDQUFDcEIsY0FBYztJQUNsQyxNQUFNcUIsU0FBUyxJQUFJLENBQUNDLGNBQWM7SUFDbEMsTUFBTUMsU0FBU0gsT0FBT0csTUFBTTtJQUM1QixJQUFJLENBQUNwQixVQUFVLENBQUNhLE9BQU9DLFVBQVUsQ0FBQ08sS0FBS0M7UUFDckMsSUFBSUQsS0FBSztZQUNQTixTQUFTTTtZQUNUO1FBQ0Y7UUFDQSxJQUFJQyxPQUFPLE1BQU07WUFDZixJQUFJLENBQUNYLElBQUksQ0FBQ1c7UUFDWjtRQUNBLElBQ0VKLE9BQU9LLEtBQUssSUFDWixvQkFBb0I7UUFDcEJILFdBQVdILE9BQU9HLE1BQU0sSUFDeEIsb0JBQW9CO1FBQ3BCSCxPQUFPRyxNQUFNLEdBQUdILE9BQU92QixhQUFhLEVBQ3BDO1lBQ0FxQjtRQUNGLE9BQU87WUFDTCxJQUFJLENBQUN4QixVQUFVLEdBQUd3QjtRQUNwQjtJQUNGO0FBQ0Y7QUFDQTlCLFVBQVVLLFNBQVMsQ0FBQ2tDLEtBQUssR0FBRztJQUMxQixJQUFJLElBQUksQ0FBQ2pDLFVBQVUsRUFBRTtRQUNuQixNQUFNd0IsV0FBVyxJQUFJLENBQUN4QixVQUFVO1FBQ2hDLElBQUksQ0FBQ0EsVUFBVSxHQUFHO1FBQ2xCd0I7SUFDRjtBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYmFzZS1jb250cm9sbGVycy9ub2RlX21vZHVsZXMvcmVhZGFibGUtc3RyZWFtL2xpYi9pbnRlcm5hbC9zdHJlYW1zL3RyYW5zZm9ybS5qcz9hZDUwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG4vLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7IE9iamVjdFNldFByb3RvdHlwZU9mLCBTeW1ib2wgfSA9IHJlcXVpcmUoJy4uLy4uL291cnMvcHJpbW9yZGlhbHMnKVxubW9kdWxlLmV4cG9ydHMgPSBUcmFuc2Zvcm1cbmNvbnN0IHsgRVJSX01FVEhPRF9OT1RfSU1QTEVNRU5URUQgfSA9IHJlcXVpcmUoJy4uLy4uL291cnMvZXJyb3JzJykuY29kZXNcbmNvbnN0IER1cGxleCA9IHJlcXVpcmUoJy4vZHVwbGV4JylcbmNvbnN0IHsgZ2V0SGlnaFdhdGVyTWFyayB9ID0gcmVxdWlyZSgnLi9zdGF0ZScpXG5PYmplY3RTZXRQcm90b3R5cGVPZihUcmFuc2Zvcm0ucHJvdG90eXBlLCBEdXBsZXgucHJvdG90eXBlKVxuT2JqZWN0U2V0UHJvdG90eXBlT2YoVHJhbnNmb3JtLCBEdXBsZXgpXG5jb25zdCBrQ2FsbGJhY2sgPSBTeW1ib2woJ2tDYWxsYmFjaycpXG5mdW5jdGlvbiBUcmFuc2Zvcm0ob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVHJhbnNmb3JtKSkgcmV0dXJuIG5ldyBUcmFuc2Zvcm0ob3B0aW9ucylcblxuICAvLyBUT0RPIChyb25hZyk6IFRoaXMgc2hvdWxkIHByZWZlcmFibHkgYWx3YXlzIGJlXG4gIC8vIGFwcGxpZWQgYnV0IHdvdWxkIGJlIHNlbXZlci1tYWpvci4gT3IgZXZlbiBiZXR0ZXI7XG4gIC8vIG1ha2UgVHJhbnNmb3JtIGEgUmVhZGFibGUgd2l0aCB0aGUgV3JpdGFibGUgaW50ZXJmYWNlLlxuICBjb25zdCByZWFkYWJsZUhpZ2hXYXRlck1hcmsgPSBvcHRpb25zID8gZ2V0SGlnaFdhdGVyTWFyayh0aGlzLCBvcHRpb25zLCAncmVhZGFibGVIaWdoV2F0ZXJNYXJrJywgdHJ1ZSkgOiBudWxsXG4gIGlmIChyZWFkYWJsZUhpZ2hXYXRlck1hcmsgPT09IDApIHtcbiAgICAvLyBBIER1cGxleCB3aWxsIGJ1ZmZlciBib3RoIG9uIHRoZSB3cml0YWJsZSBhbmQgcmVhZGFibGUgc2lkZSB3aGlsZVxuICAgIC8vIGEgVHJhbnNmb3JtIGp1c3Qgd2FudHMgdG8gYnVmZmVyIGh3bSBudW1iZXIgb2YgZWxlbWVudHMuIFRvIGF2b2lkXG4gICAgLy8gYnVmZmVyaW5nIHR3aWNlIHdlIGRpc2FibGUgYnVmZmVyaW5nIG9uIHRoZSB3cml0YWJsZSBzaWRlLlxuICAgIG9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgaGlnaFdhdGVyTWFyazogbnVsbCxcbiAgICAgIHJlYWRhYmxlSGlnaFdhdGVyTWFyayxcbiAgICAgIC8vIFRPRE8gKHJvbmFnKTogMCBpcyBub3Qgb3B0aW1hbCBzaW5jZSB3ZSBoYXZlXG4gICAgICAvLyBhIFwiYnVnXCIgd2hlcmUgd2UgY2hlY2sgbmVlZERyYWluIGJlZm9yZSBjYWxsaW5nIF93cml0ZSBhbmQgbm90IGFmdGVyLlxuICAgICAgLy8gUmVmczogaHR0cHM6Ly9naXRodWIuY29tL25vZGVqcy9ub2RlL3B1bGwvMzI4ODdcbiAgICAgIC8vIFJlZnM6IGh0dHBzOi8vZ2l0aHViLmNvbS9ub2RlanMvbm9kZS9wdWxsLzM1OTQxXG4gICAgICB3cml0YWJsZUhpZ2hXYXRlck1hcms6IG9wdGlvbnMud3JpdGFibGVIaWdoV2F0ZXJNYXJrIHx8IDBcbiAgICB9XG4gIH1cbiAgRHVwbGV4LmNhbGwodGhpcywgb3B0aW9ucylcblxuICAvLyBXZSBoYXZlIGltcGxlbWVudGVkIHRoZSBfcmVhZCBtZXRob2QsIGFuZCBkb25lIHRoZSBvdGhlciB0aGluZ3NcbiAgLy8gdGhhdCBSZWFkYWJsZSB3YW50cyBiZWZvcmUgdGhlIGZpcnN0IF9yZWFkIGNhbGwsIHNvIHVuc2V0IHRoZVxuICAvLyBzeW5jIGd1YXJkIGZsYWcuXG4gIHRoaXMuX3JlYWRhYmxlU3RhdGUuc3luYyA9IGZhbHNlXG4gIHRoaXNba0NhbGxiYWNrXSA9IG51bGxcbiAgaWYgKG9wdGlvbnMpIHtcbiAgICBpZiAodHlwZW9mIG9wdGlvbnMudHJhbnNmb3JtID09PSAnZnVuY3Rpb24nKSB0aGlzLl90cmFuc2Zvcm0gPSBvcHRpb25zLnRyYW5zZm9ybVxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy5mbHVzaCA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fZmx1c2ggPSBvcHRpb25zLmZsdXNoXG4gIH1cblxuICAvLyBXaGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIC8vIEJhY2t3YXJkcyBjb21wYXQuIFNvbWUgVHJhbnNmb3JtIHN0cmVhbXMgaW5jb3JyZWN0bHkgaW1wbGVtZW50IF9maW5hbFxuICAvLyBpbnN0ZWFkIG9mIG9yIGluIGFkZGl0aW9uIHRvIF9mbHVzaC4gQnkgdXNpbmcgJ3ByZWZpbmlzaCcgaW5zdGVhZCBvZlxuICAvLyBpbXBsZW1lbnRpbmcgX2ZpbmFsIHdlIGNvbnRpbnVlIHN1cHBvcnRpbmcgdGhpcyB1bmZvcnR1bmF0ZSB1c2UgY2FzZS5cbiAgdGhpcy5vbigncHJlZmluaXNoJywgcHJlZmluaXNoKVxufVxuZnVuY3Rpb24gZmluYWwoY2IpIHtcbiAgaWYgKHR5cGVvZiB0aGlzLl9mbHVzaCA9PT0gJ2Z1bmN0aW9uJyAmJiAhdGhpcy5kZXN0cm95ZWQpIHtcbiAgICB0aGlzLl9mbHVzaCgoZXIsIGRhdGEpID0+IHtcbiAgICAgIGlmIChlcikge1xuICAgICAgICBpZiAoY2IpIHtcbiAgICAgICAgICBjYihlcilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmRlc3Ryb3koZXIpXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBpZiAoZGF0YSAhPSBudWxsKSB7XG4gICAgICAgIHRoaXMucHVzaChkYXRhKVxuICAgICAgfVxuICAgICAgdGhpcy5wdXNoKG51bGwpXG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgY2IoKVxuICAgICAgfVxuICAgIH0pXG4gIH0gZWxzZSB7XG4gICAgdGhpcy5wdXNoKG51bGwpXG4gICAgaWYgKGNiKSB7XG4gICAgICBjYigpXG4gICAgfVxuICB9XG59XG5mdW5jdGlvbiBwcmVmaW5pc2goKSB7XG4gIGlmICh0aGlzLl9maW5hbCAhPT0gZmluYWwpIHtcbiAgICBmaW5hbC5jYWxsKHRoaXMpXG4gIH1cbn1cblRyYW5zZm9ybS5wcm90b3R5cGUuX2ZpbmFsID0gZmluYWxcblRyYW5zZm9ybS5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNhbGxiYWNrKSB7XG4gIHRocm93IG5ldyBFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCgnX3RyYW5zZm9ybSgpJylcbn1cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2FsbGJhY2spIHtcbiAgY29uc3QgclN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZVxuICBjb25zdCB3U3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlXG4gIGNvbnN0IGxlbmd0aCA9IHJTdGF0ZS5sZW5ndGhcbiAgdGhpcy5fdHJhbnNmb3JtKGNodW5rLCBlbmNvZGluZywgKGVyciwgdmFsKSA9PiB7XG4gICAgaWYgKGVycikge1xuICAgICAgY2FsbGJhY2soZXJyKVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgdGhpcy5wdXNoKHZhbClcbiAgICB9XG4gICAgaWYgKFxuICAgICAgd1N0YXRlLmVuZGVkIHx8XG4gICAgICAvLyBCYWNrd2FyZHMgY29tcGF0LlxuICAgICAgbGVuZ3RoID09PSByU3RhdGUubGVuZ3RoIHx8XG4gICAgICAvLyBCYWNrd2FyZHMgY29tcGF0LlxuICAgICAgclN0YXRlLmxlbmd0aCA8IHJTdGF0ZS5oaWdoV2F0ZXJNYXJrXG4gICAgKSB7XG4gICAgICBjYWxsYmFjaygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXNba0NhbGxiYWNrXSA9IGNhbGxiYWNrXG4gICAgfVxuICB9KVxufVxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXNba0NhbGxiYWNrXSkge1xuICAgIGNvbnN0IGNhbGxiYWNrID0gdGhpc1trQ2FsbGJhY2tdXG4gICAgdGhpc1trQ2FsbGJhY2tdID0gbnVsbFxuICAgIGNhbGxiYWNrKClcbiAgfVxufVxuIl0sIm5hbWVzIjpbIk9iamVjdFNldFByb3RvdHlwZU9mIiwiU3ltYm9sIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJUcmFuc2Zvcm0iLCJFUlJfTUVUSE9EX05PVF9JTVBMRU1FTlRFRCIsImNvZGVzIiwiRHVwbGV4IiwiZ2V0SGlnaFdhdGVyTWFyayIsInByb3RvdHlwZSIsImtDYWxsYmFjayIsIm9wdGlvbnMiLCJyZWFkYWJsZUhpZ2hXYXRlck1hcmsiLCJoaWdoV2F0ZXJNYXJrIiwid3JpdGFibGVIaWdoV2F0ZXJNYXJrIiwiY2FsbCIsIl9yZWFkYWJsZVN0YXRlIiwic3luYyIsInRyYW5zZm9ybSIsIl90cmFuc2Zvcm0iLCJmbHVzaCIsIl9mbHVzaCIsIm9uIiwicHJlZmluaXNoIiwiZmluYWwiLCJjYiIsImRlc3Ryb3llZCIsImVyIiwiZGF0YSIsImRlc3Ryb3kiLCJwdXNoIiwiX2ZpbmFsIiwiY2h1bmsiLCJlbmNvZGluZyIsImNhbGxiYWNrIiwiX3dyaXRlIiwiclN0YXRlIiwid1N0YXRlIiwiX3dyaXRhYmxlU3RhdGUiLCJsZW5ndGgiLCJlcnIiLCJ2YWwiLCJlbmRlZCIsIl9yZWFkIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/transform.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js ***!
  \*************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { Symbol, SymbolAsyncIterator, SymbolIterator, SymbolFor } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst kDestroyed = Symbol(\"kDestroyed\");\nconst kIsErrored = Symbol(\"kIsErrored\");\nconst kIsReadable = Symbol(\"kIsReadable\");\nconst kIsDisturbed = Symbol(\"kIsDisturbed\");\nconst kIsClosedPromise = SymbolFor(\"nodejs.webstream.isClosedPromise\");\nconst kControllerErrorFunction = SymbolFor(\"nodejs.webstream.controllerErrorFunction\");\nfunction isReadableNodeStream(obj, strict = false) {\n    var _obj$_readableState;\n    return !!(obj && typeof obj.pipe === \"function\" && typeof obj.on === \"function\" && (!strict || typeof obj.pause === \"function\" && typeof obj.resume === \"function\") && (!obj._writableState || ((_obj$_readableState = obj._readableState) === null || _obj$_readableState === undefined ? undefined : _obj$_readableState.readable) !== false) && // Duplex\n    (!obj._writableState || obj._readableState) // Writable has .pipe.\n    );\n}\nfunction isWritableNodeStream(obj) {\n    var _obj$_writableState;\n    return !!(obj && typeof obj.write === \"function\" && typeof obj.on === \"function\" && (!obj._readableState || ((_obj$_writableState = obj._writableState) === null || _obj$_writableState === undefined ? undefined : _obj$_writableState.writable) !== false) // Duplex\n    );\n}\nfunction isDuplexNodeStream(obj) {\n    return !!(obj && typeof obj.pipe === \"function\" && obj._readableState && typeof obj.on === \"function\" && typeof obj.write === \"function\");\n}\nfunction isNodeStream(obj) {\n    return obj && (obj._readableState || obj._writableState || typeof obj.write === \"function\" && typeof obj.on === \"function\" || typeof obj.pipe === \"function\" && typeof obj.on === \"function\");\n}\nfunction isReadableStream(obj) {\n    return !!(obj && !isNodeStream(obj) && typeof obj.pipeThrough === \"function\" && typeof obj.getReader === \"function\" && typeof obj.cancel === \"function\");\n}\nfunction isWritableStream(obj) {\n    return !!(obj && !isNodeStream(obj) && typeof obj.getWriter === \"function\" && typeof obj.abort === \"function\");\n}\nfunction isTransformStream(obj) {\n    return !!(obj && !isNodeStream(obj) && typeof obj.readable === \"object\" && typeof obj.writable === \"object\");\n}\nfunction isWebStream(obj) {\n    return isReadableStream(obj) || isWritableStream(obj) || isTransformStream(obj);\n}\nfunction isIterable(obj, isAsync) {\n    if (obj == null) return false;\n    if (isAsync === true) return typeof obj[SymbolAsyncIterator] === \"function\";\n    if (isAsync === false) return typeof obj[SymbolIterator] === \"function\";\n    return typeof obj[SymbolAsyncIterator] === \"function\" || typeof obj[SymbolIterator] === \"function\";\n}\nfunction isDestroyed(stream) {\n    if (!isNodeStream(stream)) return null;\n    const wState = stream._writableState;\n    const rState = stream._readableState;\n    const state = wState || rState;\n    return !!(stream.destroyed || stream[kDestroyed] || state !== null && state !== undefined && state.destroyed);\n}\n// Have been end():d.\nfunction isWritableEnded(stream) {\n    if (!isWritableNodeStream(stream)) return null;\n    if (stream.writableEnded === true) return true;\n    const wState = stream._writableState;\n    if (wState !== null && wState !== undefined && wState.errored) return false;\n    if (typeof (wState === null || wState === undefined ? undefined : wState.ended) !== \"boolean\") return null;\n    return wState.ended;\n}\n// Have emitted 'finish'.\nfunction isWritableFinished(stream, strict) {\n    if (!isWritableNodeStream(stream)) return null;\n    if (stream.writableFinished === true) return true;\n    const wState = stream._writableState;\n    if (wState !== null && wState !== undefined && wState.errored) return false;\n    if (typeof (wState === null || wState === undefined ? undefined : wState.finished) !== \"boolean\") return null;\n    return !!(wState.finished || strict === false && wState.ended === true && wState.length === 0);\n}\n// Have been push(null):d.\nfunction isReadableEnded(stream) {\n    if (!isReadableNodeStream(stream)) return null;\n    if (stream.readableEnded === true) return true;\n    const rState = stream._readableState;\n    if (!rState || rState.errored) return false;\n    if (typeof (rState === null || rState === undefined ? undefined : rState.ended) !== \"boolean\") return null;\n    return rState.ended;\n}\n// Have emitted 'end'.\nfunction isReadableFinished(stream, strict) {\n    if (!isReadableNodeStream(stream)) return null;\n    const rState = stream._readableState;\n    if (rState !== null && rState !== undefined && rState.errored) return false;\n    if (typeof (rState === null || rState === undefined ? undefined : rState.endEmitted) !== \"boolean\") return null;\n    return !!(rState.endEmitted || strict === false && rState.ended === true && rState.length === 0);\n}\nfunction isReadable(stream) {\n    if (stream && stream[kIsReadable] != null) return stream[kIsReadable];\n    if (typeof (stream === null || stream === undefined ? undefined : stream.readable) !== \"boolean\") return null;\n    if (isDestroyed(stream)) return false;\n    return isReadableNodeStream(stream) && stream.readable && !isReadableFinished(stream);\n}\nfunction isWritable(stream) {\n    if (typeof (stream === null || stream === undefined ? undefined : stream.writable) !== \"boolean\") return null;\n    if (isDestroyed(stream)) return false;\n    return isWritableNodeStream(stream) && stream.writable && !isWritableEnded(stream);\n}\nfunction isFinished(stream, opts) {\n    if (!isNodeStream(stream)) {\n        return null;\n    }\n    if (isDestroyed(stream)) {\n        return true;\n    }\n    if ((opts === null || opts === undefined ? undefined : opts.readable) !== false && isReadable(stream)) {\n        return false;\n    }\n    if ((opts === null || opts === undefined ? undefined : opts.writable) !== false && isWritable(stream)) {\n        return false;\n    }\n    return true;\n}\nfunction isWritableErrored(stream) {\n    var _stream$_writableStat, _stream$_writableStat2;\n    if (!isNodeStream(stream)) {\n        return null;\n    }\n    if (stream.writableErrored) {\n        return stream.writableErrored;\n    }\n    return (_stream$_writableStat = (_stream$_writableStat2 = stream._writableState) === null || _stream$_writableStat2 === undefined ? undefined : _stream$_writableStat2.errored) !== null && _stream$_writableStat !== undefined ? _stream$_writableStat : null;\n}\nfunction isReadableErrored(stream) {\n    var _stream$_readableStat, _stream$_readableStat2;\n    if (!isNodeStream(stream)) {\n        return null;\n    }\n    if (stream.readableErrored) {\n        return stream.readableErrored;\n    }\n    return (_stream$_readableStat = (_stream$_readableStat2 = stream._readableState) === null || _stream$_readableStat2 === undefined ? undefined : _stream$_readableStat2.errored) !== null && _stream$_readableStat !== undefined ? _stream$_readableStat : null;\n}\nfunction isClosed(stream) {\n    if (!isNodeStream(stream)) {\n        return null;\n    }\n    if (typeof stream.closed === \"boolean\") {\n        return stream.closed;\n    }\n    const wState = stream._writableState;\n    const rState = stream._readableState;\n    if (typeof (wState === null || wState === undefined ? undefined : wState.closed) === \"boolean\" || typeof (rState === null || rState === undefined ? undefined : rState.closed) === \"boolean\") {\n        return (wState === null || wState === undefined ? undefined : wState.closed) || (rState === null || rState === undefined ? undefined : rState.closed);\n    }\n    if (typeof stream._closed === \"boolean\" && isOutgoingMessage(stream)) {\n        return stream._closed;\n    }\n    return null;\n}\nfunction isOutgoingMessage(stream) {\n    return typeof stream._closed === \"boolean\" && typeof stream._defaultKeepAlive === \"boolean\" && typeof stream._removedConnection === \"boolean\" && typeof stream._removedContLen === \"boolean\";\n}\nfunction isServerResponse(stream) {\n    return typeof stream._sent100 === \"boolean\" && isOutgoingMessage(stream);\n}\nfunction isServerRequest(stream) {\n    var _stream$req;\n    return typeof stream._consuming === \"boolean\" && typeof stream._dumped === \"boolean\" && ((_stream$req = stream.req) === null || _stream$req === undefined ? undefined : _stream$req.upgradeOrConnect) === undefined;\n}\nfunction willEmitClose(stream) {\n    if (!isNodeStream(stream)) return null;\n    const wState = stream._writableState;\n    const rState = stream._readableState;\n    const state = wState || rState;\n    return !state && isServerResponse(stream) || !!(state && state.autoDestroy && state.emitClose && state.closed === false);\n}\nfunction isDisturbed(stream) {\n    var _stream$kIsDisturbed;\n    return !!(stream && ((_stream$kIsDisturbed = stream[kIsDisturbed]) !== null && _stream$kIsDisturbed !== undefined ? _stream$kIsDisturbed : stream.readableDidRead || stream.readableAborted));\n}\nfunction isErrored(stream) {\n    var _ref, _ref2, _ref3, _ref4, _ref5, _stream$kIsErrored, _stream$_readableStat3, _stream$_writableStat3, _stream$_readableStat4, _stream$_writableStat4;\n    return !!(stream && ((_ref = (_ref2 = (_ref3 = (_ref4 = (_ref5 = (_stream$kIsErrored = stream[kIsErrored]) !== null && _stream$kIsErrored !== undefined ? _stream$kIsErrored : stream.readableErrored) !== null && _ref5 !== undefined ? _ref5 : stream.writableErrored) !== null && _ref4 !== undefined ? _ref4 : (_stream$_readableStat3 = stream._readableState) === null || _stream$_readableStat3 === undefined ? undefined : _stream$_readableStat3.errorEmitted) !== null && _ref3 !== undefined ? _ref3 : (_stream$_writableStat3 = stream._writableState) === null || _stream$_writableStat3 === undefined ? undefined : _stream$_writableStat3.errorEmitted) !== null && _ref2 !== undefined ? _ref2 : (_stream$_readableStat4 = stream._readableState) === null || _stream$_readableStat4 === undefined ? undefined : _stream$_readableStat4.errored) !== null && _ref !== undefined ? _ref : (_stream$_writableStat4 = stream._writableState) === null || _stream$_writableStat4 === undefined ? undefined : _stream$_writableStat4.errored));\n}\nmodule.exports = {\n    kDestroyed,\n    isDisturbed,\n    kIsDisturbed,\n    isErrored,\n    kIsErrored,\n    isReadable,\n    kIsReadable,\n    kIsClosedPromise,\n    kControllerErrorFunction,\n    isClosed,\n    isDestroyed,\n    isDuplexNodeStream,\n    isFinished,\n    isIterable,\n    isReadableNodeStream,\n    isReadableStream,\n    isReadableEnded,\n    isReadableFinished,\n    isReadableErrored,\n    isNodeStream,\n    isWebStream,\n    isWritable,\n    isWritableNodeStream,\n    isWritableStream,\n    isWritableEnded,\n    isWritableFinished,\n    isWritableErrored,\n    isServerRequest,\n    isServerResponse,\n    willEmitClose,\n    isTransformStream\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/writable.js":
/*!****************************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/writable.js ***!
  \****************************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* replacement start */ const process = __webpack_require__(/*! process/ */ \"(ssr)/./node_modules/process/index.js\");\n\"use strict\";\nconst { ArrayPrototypeSlice, Error, FunctionPrototypeSymbolHasInstance, ObjectDefineProperty, ObjectDefineProperties, ObjectSetPrototypeOf, StringPrototypeToLowerCase, Symbol, SymbolHasInstance } = __webpack_require__(/*! ../../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nmodule.exports = Writable;\nWritable.WritableState = WritableState;\nconst { EventEmitter: EE } = __webpack_require__(/*! events */ \"events\");\nconst Stream = (__webpack_require__(/*! ./legacy */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/legacy.js\").Stream);\nconst { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\nconst destroyImpl = __webpack_require__(/*! ./destroy */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nconst { addAbortSignal } = __webpack_require__(/*! ./add-abort-signal */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js\");\nconst { getHighWaterMark, getDefaultHighWaterMark } = __webpack_require__(/*! ./state */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/state.js\");\nconst { ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED, ERR_STREAM_ALREADY_FINISHED, ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING } = (__webpack_require__(/*! ../../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\").codes);\nconst { errorOrDestroy } = destroyImpl;\nObjectSetPrototypeOf(Writable.prototype, Stream.prototype);\nObjectSetPrototypeOf(Writable, Stream);\nfunction nop() {}\nconst kOnFinished = Symbol(\"kOnFinished\");\nfunction WritableState(options, stream, isDuplex) {\n    // Duplex streams are both readable and writable, but share\n    // the same options object.\n    // However, some cases require setting options to different\n    // values for the readable and the writable sides of the duplex stream,\n    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.\n    if (typeof isDuplex !== \"boolean\") isDuplex = stream instanceof __webpack_require__(/*! ./duplex */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\");\n    // Object stream flag to indicate whether or not this stream\n    // contains buffers or objects.\n    this.objectMode = !!(options && options.objectMode);\n    if (isDuplex) this.objectMode = this.objectMode || !!(options && options.writableObjectMode);\n    // The point at which write() starts returning false\n    // Note: 0 is a valid value, means that we always return false if\n    // the entire buffer is not flushed immediately on write().\n    this.highWaterMark = options ? getHighWaterMark(this, options, \"writableHighWaterMark\", isDuplex) : getDefaultHighWaterMark(false);\n    // if _final has been called.\n    this.finalCalled = false;\n    // drain event flag.\n    this.needDrain = false;\n    // At the start of calling end()\n    this.ending = false;\n    // When end() has been called, and returned.\n    this.ended = false;\n    // When 'finish' is emitted.\n    this.finished = false;\n    // Has it been destroyed\n    this.destroyed = false;\n    // Should we decode strings into buffers before passing to _write?\n    // this is here so that some node-core streams can optimize string\n    // handling at a lower level.\n    const noDecode = !!(options && options.decodeStrings === false);\n    this.decodeStrings = !noDecode;\n    // Crypto is kind of old and crusty.  Historically, its default string\n    // encoding is 'binary' so we have to make this configurable.\n    // Everything else in the universe uses 'utf8', though.\n    this.defaultEncoding = options && options.defaultEncoding || \"utf8\";\n    // Not an actual buffer we keep track of, but a measurement\n    // of how much we're waiting to get pushed to some underlying\n    // socket or file.\n    this.length = 0;\n    // A flag to see when we're in the middle of a write.\n    this.writing = false;\n    // When true all writes will be buffered until .uncork() call.\n    this.corked = 0;\n    // A flag to be able to tell if the onwrite cb is called immediately,\n    // or on a later tick.  We set this to true at first, because any\n    // actions that shouldn't happen until \"later\" should generally also\n    // not happen before the first write call.\n    this.sync = true;\n    // A flag to know if we're processing previously buffered items, which\n    // may call the _write() callback in the same tick, so that we don't\n    // end up in an overlapped onwrite situation.\n    this.bufferProcessing = false;\n    // The callback that's passed to _write(chunk, cb).\n    this.onwrite = onwrite.bind(undefined, stream);\n    // The callback that the user supplies to write(chunk, encoding, cb).\n    this.writecb = null;\n    // The amount that is being written when _write is called.\n    this.writelen = 0;\n    // Storage for data passed to the afterWrite() callback in case of\n    // synchronous _write() completion.\n    this.afterWriteTickInfo = null;\n    resetBuffer(this);\n    // Number of pending user-supplied write callbacks\n    // this must be 0 before 'finish' can be emitted.\n    this.pendingcb = 0;\n    // Stream is still being constructed and cannot be\n    // destroyed until construction finished or failed.\n    // Async construction is opt in, therefore we start as\n    // constructed.\n    this.constructed = true;\n    // Emit prefinish if the only thing we're waiting for is _write cbs\n    // This is relevant for synchronous Transform streams.\n    this.prefinished = false;\n    // True if the error was already emitted and should not be thrown again.\n    this.errorEmitted = false;\n    // Should close be emitted on destroy. Defaults to true.\n    this.emitClose = !options || options.emitClose !== false;\n    // Should .destroy() be called after 'finish' (and potentially 'end').\n    this.autoDestroy = !options || options.autoDestroy !== false;\n    // Indicates whether the stream has errored. When true all write() calls\n    // should return false. This is needed since when autoDestroy\n    // is disabled we need a way to tell whether the stream has failed.\n    this.errored = null;\n    // Indicates whether the stream has finished destroying.\n    this.closed = false;\n    // True if close has been emitted or would have been emitted\n    // depending on emitClose.\n    this.closeEmitted = false;\n    this[kOnFinished] = [];\n}\nfunction resetBuffer(state) {\n    state.buffered = [];\n    state.bufferedIndex = 0;\n    state.allBuffers = true;\n    state.allNoop = true;\n}\nWritableState.prototype.getBuffer = function getBuffer() {\n    return ArrayPrototypeSlice(this.buffered, this.bufferedIndex);\n};\nObjectDefineProperty(WritableState.prototype, \"bufferedRequestCount\", {\n    __proto__: null,\n    get () {\n        return this.buffered.length - this.bufferedIndex;\n    }\n});\nfunction Writable(options) {\n    // Writable ctor is applied to Duplexes, too.\n    // `realHasInstance` is necessary because using plain `instanceof`\n    // would return false, as no `_writableState` property is attached.\n    // Trying to use the custom `instanceof` for Writable here will also break the\n    // Node.js LazyTransform implementation, which has a non-trivial getter for\n    // `_writableState` that would lead to infinite recursion.\n    // Checking for a Stream.Duplex instance is faster here instead of inside\n    // the WritableState constructor, at least with V8 6.5.\n    const isDuplex = this instanceof __webpack_require__(/*! ./duplex */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\");\n    if (!isDuplex && !FunctionPrototypeSymbolHasInstance(Writable, this)) return new Writable(options);\n    this._writableState = new WritableState(options, this, isDuplex);\n    if (options) {\n        if (typeof options.write === \"function\") this._write = options.write;\n        if (typeof options.writev === \"function\") this._writev = options.writev;\n        if (typeof options.destroy === \"function\") this._destroy = options.destroy;\n        if (typeof options.final === \"function\") this._final = options.final;\n        if (typeof options.construct === \"function\") this._construct = options.construct;\n        if (options.signal) addAbortSignal(options.signal, this);\n    }\n    Stream.call(this, options);\n    destroyImpl.construct(this, ()=>{\n        const state = this._writableState;\n        if (!state.writing) {\n            clearBuffer(this, state);\n        }\n        finishMaybe(this, state);\n    });\n}\nObjectDefineProperty(Writable, SymbolHasInstance, {\n    __proto__: null,\n    value: function(object) {\n        if (FunctionPrototypeSymbolHasInstance(this, object)) return true;\n        if (this !== Writable) return false;\n        return object && object._writableState instanceof WritableState;\n    }\n});\n// Otherwise people can pipe Writable streams, which is just wrong.\nWritable.prototype.pipe = function() {\n    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());\n};\nfunction _write(stream, chunk, encoding, cb) {\n    const state = stream._writableState;\n    if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = state.defaultEncoding;\n    } else {\n        if (!encoding) encoding = state.defaultEncoding;\n        else if (encoding !== \"buffer\" && !Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding);\n        if (typeof cb !== \"function\") cb = nop;\n    }\n    if (chunk === null) {\n        throw new ERR_STREAM_NULL_VALUES();\n    } else if (!state.objectMode) {\n        if (typeof chunk === \"string\") {\n            if (state.decodeStrings !== false) {\n                chunk = Buffer.from(chunk, encoding);\n                encoding = \"buffer\";\n            }\n        } else if (chunk instanceof Buffer) {\n            encoding = \"buffer\";\n        } else if (Stream._isUint8Array(chunk)) {\n            chunk = Stream._uint8ArrayToBuffer(chunk);\n            encoding = \"buffer\";\n        } else {\n            throw new ERR_INVALID_ARG_TYPE(\"chunk\", [\n                \"string\",\n                \"Buffer\",\n                \"Uint8Array\"\n            ], chunk);\n        }\n    }\n    let err;\n    if (state.ending) {\n        err = new ERR_STREAM_WRITE_AFTER_END();\n    } else if (state.destroyed) {\n        err = new ERR_STREAM_DESTROYED(\"write\");\n    }\n    if (err) {\n        process.nextTick(cb, err);\n        errorOrDestroy(stream, err, true);\n        return err;\n    }\n    state.pendingcb++;\n    return writeOrBuffer(stream, state, chunk, encoding, cb);\n}\nWritable.prototype.write = function(chunk, encoding, cb) {\n    return _write(this, chunk, encoding, cb) === true;\n};\nWritable.prototype.cork = function() {\n    this._writableState.corked++;\n};\nWritable.prototype.uncork = function() {\n    const state = this._writableState;\n    if (state.corked) {\n        state.corked--;\n        if (!state.writing) clearBuffer(this, state);\n    }\n};\nWritable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {\n    // node::ParseEncoding() requires lower case.\n    if (typeof encoding === \"string\") encoding = StringPrototypeToLowerCase(encoding);\n    if (!Buffer.isEncoding(encoding)) throw new ERR_UNKNOWN_ENCODING(encoding);\n    this._writableState.defaultEncoding = encoding;\n    return this;\n};\n// If we're already writing something, then just put this\n// in the queue, and wait our turn.  Otherwise, call _write\n// If we return false, then we need a drain event, so set that flag.\nfunction writeOrBuffer(stream, state, chunk, encoding, callback) {\n    const len = state.objectMode ? 1 : chunk.length;\n    state.length += len;\n    // stream._write resets state.length\n    const ret = state.length < state.highWaterMark;\n    // We must ensure that previous needDrain will not be reset to false.\n    if (!ret) state.needDrain = true;\n    if (state.writing || state.corked || state.errored || !state.constructed) {\n        state.buffered.push({\n            chunk,\n            encoding,\n            callback\n        });\n        if (state.allBuffers && encoding !== \"buffer\") {\n            state.allBuffers = false;\n        }\n        if (state.allNoop && callback !== nop) {\n            state.allNoop = false;\n        }\n    } else {\n        state.writelen = len;\n        state.writecb = callback;\n        state.writing = true;\n        state.sync = true;\n        stream._write(chunk, encoding, state.onwrite);\n        state.sync = false;\n    }\n    // Return false if errored or destroyed in order to break\n    // any synchronous while(stream.write(data)) loops.\n    return ret && !state.errored && !state.destroyed;\n}\nfunction doWrite(stream, state, writev, len, chunk, encoding, cb) {\n    state.writelen = len;\n    state.writecb = cb;\n    state.writing = true;\n    state.sync = true;\n    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED(\"write\"));\n    else if (writev) stream._writev(chunk, state.onwrite);\n    else stream._write(chunk, encoding, state.onwrite);\n    state.sync = false;\n}\nfunction onwriteError(stream, state, er, cb) {\n    --state.pendingcb;\n    cb(er);\n    // Ensure callbacks are invoked even when autoDestroy is\n    // not enabled. Passing `er` here doesn't make sense since\n    // it's related to one specific write, not to the buffered\n    // writes.\n    errorBuffer(state);\n    // This can emit error, but error must always follow cb.\n    errorOrDestroy(stream, er);\n}\nfunction onwrite(stream, er) {\n    const state = stream._writableState;\n    const sync = state.sync;\n    const cb = state.writecb;\n    if (typeof cb !== \"function\") {\n        errorOrDestroy(stream, new ERR_MULTIPLE_CALLBACK());\n        return;\n    }\n    state.writing = false;\n    state.writecb = null;\n    state.length -= state.writelen;\n    state.writelen = 0;\n    if (er) {\n        // Avoid V8 leak, https://github.com/nodejs/node/pull/34103#issuecomment-652002364\n        er.stack // eslint-disable-line no-unused-expressions\n        ;\n        if (!state.errored) {\n            state.errored = er;\n        }\n        // In case of duplex streams we need to notify the readable side of the\n        // error.\n        if (stream._readableState && !stream._readableState.errored) {\n            stream._readableState.errored = er;\n        }\n        if (sync) {\n            process.nextTick(onwriteError, stream, state, er, cb);\n        } else {\n            onwriteError(stream, state, er, cb);\n        }\n    } else {\n        if (state.buffered.length > state.bufferedIndex) {\n            clearBuffer(stream, state);\n        }\n        if (sync) {\n            // It is a common case that the callback passed to .write() is always\n            // the same. In that case, we do not schedule a new nextTick(), but\n            // rather just increase a counter, to improve performance and avoid\n            // memory allocations.\n            if (state.afterWriteTickInfo !== null && state.afterWriteTickInfo.cb === cb) {\n                state.afterWriteTickInfo.count++;\n            } else {\n                state.afterWriteTickInfo = {\n                    count: 1,\n                    cb,\n                    stream,\n                    state\n                };\n                process.nextTick(afterWriteTick, state.afterWriteTickInfo);\n            }\n        } else {\n            afterWrite(stream, state, 1, cb);\n        }\n    }\n}\nfunction afterWriteTick({ stream, state, count, cb }) {\n    state.afterWriteTickInfo = null;\n    return afterWrite(stream, state, count, cb);\n}\nfunction afterWrite(stream, state, count, cb) {\n    const needDrain = !state.ending && !stream.destroyed && state.length === 0 && state.needDrain;\n    if (needDrain) {\n        state.needDrain = false;\n        stream.emit(\"drain\");\n    }\n    while(count-- > 0){\n        state.pendingcb--;\n        cb();\n    }\n    if (state.destroyed) {\n        errorBuffer(state);\n    }\n    finishMaybe(stream, state);\n}\n// If there's something in the buffer waiting, then invoke callbacks.\nfunction errorBuffer(state) {\n    if (state.writing) {\n        return;\n    }\n    for(let n = state.bufferedIndex; n < state.buffered.length; ++n){\n        var _state$errored;\n        const { chunk, callback } = state.buffered[n];\n        const len = state.objectMode ? 1 : chunk.length;\n        state.length -= len;\n        callback((_state$errored = state.errored) !== null && _state$errored !== undefined ? _state$errored : new ERR_STREAM_DESTROYED(\"write\"));\n    }\n    const onfinishCallbacks = state[kOnFinished].splice(0);\n    for(let i = 0; i < onfinishCallbacks.length; i++){\n        var _state$errored2;\n        onfinishCallbacks[i]((_state$errored2 = state.errored) !== null && _state$errored2 !== undefined ? _state$errored2 : new ERR_STREAM_DESTROYED(\"end\"));\n    }\n    resetBuffer(state);\n}\n// If there's something in the buffer waiting, then process it.\nfunction clearBuffer(stream, state) {\n    if (state.corked || state.bufferProcessing || state.destroyed || !state.constructed) {\n        return;\n    }\n    const { buffered, bufferedIndex, objectMode } = state;\n    const bufferedLength = buffered.length - bufferedIndex;\n    if (!bufferedLength) {\n        return;\n    }\n    let i = bufferedIndex;\n    state.bufferProcessing = true;\n    if (bufferedLength > 1 && stream._writev) {\n        state.pendingcb -= bufferedLength - 1;\n        const callback = state.allNoop ? nop : (err)=>{\n            for(let n = i; n < buffered.length; ++n){\n                buffered[n].callback(err);\n            }\n        };\n        // Make a copy of `buffered` if it's going to be used by `callback` above,\n        // since `doWrite` will mutate the array.\n        const chunks = state.allNoop && i === 0 ? buffered : ArrayPrototypeSlice(buffered, i);\n        chunks.allBuffers = state.allBuffers;\n        doWrite(stream, state, true, state.length, chunks, \"\", callback);\n        resetBuffer(state);\n    } else {\n        do {\n            const { chunk, encoding, callback } = buffered[i];\n            buffered[i++] = null;\n            const len = objectMode ? 1 : chunk.length;\n            doWrite(stream, state, false, len, chunk, encoding, callback);\n        }while (i < buffered.length && !state.writing);\n        if (i === buffered.length) {\n            resetBuffer(state);\n        } else if (i > 256) {\n            buffered.splice(0, i);\n            state.bufferedIndex = 0;\n        } else {\n            state.bufferedIndex = i;\n        }\n    }\n    state.bufferProcessing = false;\n}\nWritable.prototype._write = function(chunk, encoding, cb) {\n    if (this._writev) {\n        this._writev([\n            {\n                chunk,\n                encoding\n            }\n        ], cb);\n    } else {\n        throw new ERR_METHOD_NOT_IMPLEMENTED(\"_write()\");\n    }\n};\nWritable.prototype._writev = null;\nWritable.prototype.end = function(chunk, encoding, cb) {\n    const state = this._writableState;\n    if (typeof chunk === \"function\") {\n        cb = chunk;\n        chunk = null;\n        encoding = null;\n    } else if (typeof encoding === \"function\") {\n        cb = encoding;\n        encoding = null;\n    }\n    let err;\n    if (chunk !== null && chunk !== undefined) {\n        const ret = _write(this, chunk, encoding);\n        if (ret instanceof Error) {\n            err = ret;\n        }\n    }\n    // .end() fully uncorks.\n    if (state.corked) {\n        state.corked = 1;\n        this.uncork();\n    }\n    if (err) {\n    // Do nothing...\n    } else if (!state.errored && !state.ending) {\n        // This is forgiving in terms of unnecessary calls to end() and can hide\n        // logic errors. However, usually such errors are harmless and causing a\n        // hard error can be disproportionately destructive. It is not always\n        // trivial for the user to determine whether end() needs to be called\n        // or not.\n        state.ending = true;\n        finishMaybe(this, state, true);\n        state.ended = true;\n    } else if (state.finished) {\n        err = new ERR_STREAM_ALREADY_FINISHED(\"end\");\n    } else if (state.destroyed) {\n        err = new ERR_STREAM_DESTROYED(\"end\");\n    }\n    if (typeof cb === \"function\") {\n        if (err || state.finished) {\n            process.nextTick(cb, err);\n        } else {\n            state[kOnFinished].push(cb);\n        }\n    }\n    return this;\n};\nfunction needFinish(state) {\n    return state.ending && !state.destroyed && state.constructed && state.length === 0 && !state.errored && state.buffered.length === 0 && !state.finished && !state.writing && !state.errorEmitted && !state.closeEmitted;\n}\nfunction callFinal(stream, state) {\n    let called = false;\n    function onFinish(err) {\n        if (called) {\n            errorOrDestroy(stream, err !== null && err !== undefined ? err : ERR_MULTIPLE_CALLBACK());\n            return;\n        }\n        called = true;\n        state.pendingcb--;\n        if (err) {\n            const onfinishCallbacks = state[kOnFinished].splice(0);\n            for(let i = 0; i < onfinishCallbacks.length; i++){\n                onfinishCallbacks[i](err);\n            }\n            errorOrDestroy(stream, err, state.sync);\n        } else if (needFinish(state)) {\n            state.prefinished = true;\n            stream.emit(\"prefinish\");\n            // Backwards compat. Don't check state.sync here.\n            // Some streams assume 'finish' will be emitted\n            // asynchronously relative to _final callback.\n            state.pendingcb++;\n            process.nextTick(finish, stream, state);\n        }\n    }\n    state.sync = true;\n    state.pendingcb++;\n    try {\n        stream._final(onFinish);\n    } catch (err) {\n        onFinish(err);\n    }\n    state.sync = false;\n}\nfunction prefinish(stream, state) {\n    if (!state.prefinished && !state.finalCalled) {\n        if (typeof stream._final === \"function\" && !state.destroyed) {\n            state.finalCalled = true;\n            callFinal(stream, state);\n        } else {\n            state.prefinished = true;\n            stream.emit(\"prefinish\");\n        }\n    }\n}\nfunction finishMaybe(stream, state, sync) {\n    if (needFinish(state)) {\n        prefinish(stream, state);\n        if (state.pendingcb === 0) {\n            if (sync) {\n                state.pendingcb++;\n                process.nextTick((stream, state)=>{\n                    if (needFinish(state)) {\n                        finish(stream, state);\n                    } else {\n                        state.pendingcb--;\n                    }\n                }, stream, state);\n            } else if (needFinish(state)) {\n                state.pendingcb++;\n                finish(stream, state);\n            }\n        }\n    }\n}\nfunction finish(stream, state) {\n    state.pendingcb--;\n    state.finished = true;\n    const onfinishCallbacks = state[kOnFinished].splice(0);\n    for(let i = 0; i < onfinishCallbacks.length; i++){\n        onfinishCallbacks[i]();\n    }\n    stream.emit(\"finish\");\n    if (state.autoDestroy) {\n        // In case of duplex streams we need a way to detect\n        // if the readable side is ready for autoDestroy as well.\n        const rState = stream._readableState;\n        const autoDestroy = !rState || rState.autoDestroy && // We don't expect the readable to ever 'end'\n        // if readable is explicitly set to false.\n        (rState.endEmitted || rState.readable === false);\n        if (autoDestroy) {\n            stream.destroy();\n        }\n    }\n}\nObjectDefineProperties(Writable.prototype, {\n    closed: {\n        __proto__: null,\n        get () {\n            return this._writableState ? this._writableState.closed : false;\n        }\n    },\n    destroyed: {\n        __proto__: null,\n        get () {\n            return this._writableState ? this._writableState.destroyed : false;\n        },\n        set (value) {\n            // Backward compatibility, the user is explicitly managing destroyed.\n            if (this._writableState) {\n                this._writableState.destroyed = value;\n            }\n        }\n    },\n    writable: {\n        __proto__: null,\n        get () {\n            const w = this._writableState;\n            // w.writable === false means that this is part of a Duplex stream\n            // where the writable side was disabled upon construction.\n            // Compat. The user might manually disable writable side through\n            // deprecated setter.\n            return !!w && w.writable !== false && !w.destroyed && !w.errored && !w.ending && !w.ended;\n        },\n        set (val) {\n            // Backwards compatible.\n            if (this._writableState) {\n                this._writableState.writable = !!val;\n            }\n        }\n    },\n    writableFinished: {\n        __proto__: null,\n        get () {\n            return this._writableState ? this._writableState.finished : false;\n        }\n    },\n    writableObjectMode: {\n        __proto__: null,\n        get () {\n            return this._writableState ? this._writableState.objectMode : false;\n        }\n    },\n    writableBuffer: {\n        __proto__: null,\n        get () {\n            return this._writableState && this._writableState.getBuffer();\n        }\n    },\n    writableEnded: {\n        __proto__: null,\n        get () {\n            return this._writableState ? this._writableState.ending : false;\n        }\n    },\n    writableNeedDrain: {\n        __proto__: null,\n        get () {\n            const wState = this._writableState;\n            if (!wState) return false;\n            return !wState.destroyed && !wState.ending && wState.needDrain;\n        }\n    },\n    writableHighWaterMark: {\n        __proto__: null,\n        get () {\n            return this._writableState && this._writableState.highWaterMark;\n        }\n    },\n    writableCorked: {\n        __proto__: null,\n        get () {\n            return this._writableState ? this._writableState.corked : 0;\n        }\n    },\n    writableLength: {\n        __proto__: null,\n        get () {\n            return this._writableState && this._writableState.length;\n        }\n    },\n    errored: {\n        __proto__: null,\n        enumerable: false,\n        get () {\n            return this._writableState ? this._writableState.errored : null;\n        }\n    },\n    writableAborted: {\n        __proto__: null,\n        enumerable: false,\n        get: function() {\n            return !!(this._writableState.writable !== false && (this._writableState.destroyed || this._writableState.errored) && !this._writableState.finished);\n        }\n    }\n});\nconst destroy = destroyImpl.destroy;\nWritable.prototype.destroy = function(err, cb) {\n    const state = this._writableState;\n    // Invoke pending callbacks.\n    if (!state.destroyed && (state.bufferedIndex < state.buffered.length || state[kOnFinished].length)) {\n        process.nextTick(errorBuffer, state);\n    }\n    destroy.call(this, err, cb);\n    return this;\n};\nWritable.prototype._undestroy = destroyImpl.undestroy;\nWritable.prototype._destroy = function(err, cb) {\n    cb(err);\n};\nWritable.prototype[EE.captureRejectionSymbol] = function(err) {\n    this.destroy(err);\n};\nlet webStreamsAdapters;\n// Lazy to avoid circular references\nfunction lazyWebStreams() {\n    if (webStreamsAdapters === undefined) webStreamsAdapters = {};\n    return webStreamsAdapters;\n}\nWritable.fromWeb = function(writableStream, options) {\n    return lazyWebStreams().newStreamWritableFromWritableStream(writableStream, options);\n};\nWritable.toWeb = function(streamWritable) {\n    return lazyWebStreams().newWritableStreamFromStreamWritable(streamWritable);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/writable.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/validators.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/validators.js ***!
  \**********************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("/* eslint jsdoc/require-jsdoc: \"error\" */ \nconst { ArrayIsArray, ArrayPrototypeIncludes, ArrayPrototypeJoin, ArrayPrototypeMap, NumberIsInteger, NumberIsNaN, NumberMAX_SAFE_INTEGER, NumberMIN_SAFE_INTEGER, NumberParseInt, ObjectPrototypeHasOwnProperty, RegExpPrototypeExec, String, StringPrototypeToUpperCase, StringPrototypeTrim } = __webpack_require__(/*! ../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst { hideStackFrames, codes: { ERR_SOCKET_BAD_PORT, ERR_INVALID_ARG_TYPE, ERR_INVALID_ARG_VALUE, ERR_OUT_OF_RANGE, ERR_UNKNOWN_SIGNAL } } = __webpack_require__(/*! ../ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst { normalizeEncoding } = __webpack_require__(/*! ../ours/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\");\nconst { isAsyncFunction, isArrayBufferView } = (__webpack_require__(/*! ../ours/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\").types);\nconst signals = {};\n/**\n * @param {*} value\n * @returns {boolean}\n */ function isInt32(value) {\n    return value === (value | 0);\n}\n/**\n * @param {*} value\n * @returns {boolean}\n */ function isUint32(value) {\n    return value === value >>> 0;\n}\nconst octalReg = /^[0-7]+$/;\nconst modeDesc = \"must be a 32-bit unsigned integer or an octal string\";\n/**\n * Parse and validate values that will be converted into mode_t (the S_*\n * constants). Only valid numbers and octal strings are allowed. They could be\n * converted to 32-bit unsigned integers or non-negative signed integers in the\n * C++ land, but any value higher than 0o777 will result in platform-specific\n * behaviors.\n *\n * @param {*} value Values to be validated\n * @param {string} name Name of the argument\n * @param {number} [def] If specified, will be returned for invalid values\n * @returns {number}\n */ function parseFileMode(value, name, def) {\n    if (typeof value === \"undefined\") {\n        value = def;\n    }\n    if (typeof value === \"string\") {\n        if (RegExpPrototypeExec(octalReg, value) === null) {\n            throw new ERR_INVALID_ARG_VALUE(name, value, modeDesc);\n        }\n        value = NumberParseInt(value, 8);\n    }\n    validateUint32(value, name);\n    return value;\n}\n/**\n * @callback validateInteger\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */ /** @type {validateInteger} */ const validateInteger = hideStackFrames((value, name, min = NumberMIN_SAFE_INTEGER, max = NumberMAX_SAFE_INTEGER)=>{\n    if (typeof value !== \"number\") throw new ERR_INVALID_ARG_TYPE(name, \"number\", value);\n    if (!NumberIsInteger(value)) throw new ERR_OUT_OF_RANGE(name, \"an integer\", value);\n    if (value < min || value > max) throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\n});\n/**\n * @callback validateInt32\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */ /** @type {validateInt32} */ const validateInt32 = hideStackFrames((value, name, min = -2147483648, max = 2147483647)=>{\n    // The defaults for min and max correspond to the limits of 32-bit integers.\n    if (typeof value !== \"number\") {\n        throw new ERR_INVALID_ARG_TYPE(name, \"number\", value);\n    }\n    if (!NumberIsInteger(value)) {\n        throw new ERR_OUT_OF_RANGE(name, \"an integer\", value);\n    }\n    if (value < min || value > max) {\n        throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\n    }\n});\n/**\n * @callback validateUint32\n * @param {*} value\n * @param {string} name\n * @param {number|boolean} [positive=false]\n * @returns {asserts value is number}\n */ /** @type {validateUint32} */ const validateUint32 = hideStackFrames((value, name, positive = false)=>{\n    if (typeof value !== \"number\") {\n        throw new ERR_INVALID_ARG_TYPE(name, \"number\", value);\n    }\n    if (!NumberIsInteger(value)) {\n        throw new ERR_OUT_OF_RANGE(name, \"an integer\", value);\n    }\n    const min = positive ? 1 : 0;\n    // 2 ** 32 === 4294967296\n    const max = 4294967295;\n    if (value < min || value > max) {\n        throw new ERR_OUT_OF_RANGE(name, `>= ${min} && <= ${max}`, value);\n    }\n});\n/**\n * @callback validateString\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is string}\n */ /** @type {validateString} */ function validateString(value, name) {\n    if (typeof value !== \"string\") throw new ERR_INVALID_ARG_TYPE(name, \"string\", value);\n}\n/**\n * @callback validateNumber\n * @param {*} value\n * @param {string} name\n * @param {number} [min]\n * @param {number} [max]\n * @returns {asserts value is number}\n */ /** @type {validateNumber} */ function validateNumber(value, name, min = undefined, max) {\n    if (typeof value !== \"number\") throw new ERR_INVALID_ARG_TYPE(name, \"number\", value);\n    if (min != null && value < min || max != null && value > max || (min != null || max != null) && NumberIsNaN(value)) {\n        throw new ERR_OUT_OF_RANGE(name, `${min != null ? `>= ${min}` : \"\"}${min != null && max != null ? \" && \" : \"\"}${max != null ? `<= ${max}` : \"\"}`, value);\n    }\n}\n/**\n * @callback validateOneOf\n * @template T\n * @param {T} value\n * @param {string} name\n * @param {T[]} oneOf\n */ /** @type {validateOneOf} */ const validateOneOf = hideStackFrames((value, name, oneOf)=>{\n    if (!ArrayPrototypeIncludes(oneOf, value)) {\n        const allowed = ArrayPrototypeJoin(ArrayPrototypeMap(oneOf, (v)=>typeof v === \"string\" ? `'${v}'` : String(v)), \", \");\n        const reason = \"must be one of: \" + allowed;\n        throw new ERR_INVALID_ARG_VALUE(name, value, reason);\n    }\n});\n/**\n * @callback validateBoolean\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is boolean}\n */ /** @type {validateBoolean} */ function validateBoolean(value, name) {\n    if (typeof value !== \"boolean\") throw new ERR_INVALID_ARG_TYPE(name, \"boolean\", value);\n}\n/**\n * @param {any} options\n * @param {string} key\n * @param {boolean} defaultValue\n * @returns {boolean}\n */ function getOwnPropertyValueOrDefault(options, key, defaultValue) {\n    return options == null || !ObjectPrototypeHasOwnProperty(options, key) ? defaultValue : options[key];\n}\n/**\n * @callback validateObject\n * @param {*} value\n * @param {string} name\n * @param {{\n *   allowArray?: boolean,\n *   allowFunction?: boolean,\n *   nullable?: boolean\n * }} [options]\n */ /** @type {validateObject} */ const validateObject = hideStackFrames((value, name, options = null)=>{\n    const allowArray = getOwnPropertyValueOrDefault(options, \"allowArray\", false);\n    const allowFunction = getOwnPropertyValueOrDefault(options, \"allowFunction\", false);\n    const nullable = getOwnPropertyValueOrDefault(options, \"nullable\", false);\n    if (!nullable && value === null || !allowArray && ArrayIsArray(value) || typeof value !== \"object\" && (!allowFunction || typeof value !== \"function\")) {\n        throw new ERR_INVALID_ARG_TYPE(name, \"Object\", value);\n    }\n});\n/**\n * @callback validateDictionary - We are using the Web IDL Standard definition\n *                                of \"dictionary\" here, which means any value\n *                                whose Type is either Undefined, Null, or\n *                                Object (which includes functions).\n * @param {*} value\n * @param {string} name\n * @see https://webidl.spec.whatwg.org/#es-dictionary\n * @see https://tc39.es/ecma262/#table-typeof-operator-results\n */ /** @type {validateDictionary} */ const validateDictionary = hideStackFrames((value, name)=>{\n    if (value != null && typeof value !== \"object\" && typeof value !== \"function\") {\n        throw new ERR_INVALID_ARG_TYPE(name, \"a dictionary\", value);\n    }\n});\n/**\n * @callback validateArray\n * @param {*} value\n * @param {string} name\n * @param {number} [minLength]\n * @returns {asserts value is any[]}\n */ /** @type {validateArray} */ const validateArray = hideStackFrames((value, name, minLength = 0)=>{\n    if (!ArrayIsArray(value)) {\n        throw new ERR_INVALID_ARG_TYPE(name, \"Array\", value);\n    }\n    if (value.length < minLength) {\n        const reason = `must be longer than ${minLength}`;\n        throw new ERR_INVALID_ARG_VALUE(name, value, reason);\n    }\n});\n/**\n * @callback validateStringArray\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is string[]}\n */ /** @type {validateStringArray} */ function validateStringArray(value, name) {\n    validateArray(value, name);\n    for(let i = 0; i < value.length; i++){\n        validateString(value[i], `${name}[${i}]`);\n    }\n}\n/**\n * @callback validateBooleanArray\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is boolean[]}\n */ /** @type {validateBooleanArray} */ function validateBooleanArray(value, name) {\n    validateArray(value, name);\n    for(let i = 0; i < value.length; i++){\n        validateBoolean(value[i], `${name}[${i}]`);\n    }\n}\n/**\n * @param {*} signal\n * @param {string} [name='signal']\n * @returns {asserts signal is keyof signals}\n */ function validateSignalName(signal, name = \"signal\") {\n    validateString(signal, name);\n    if (signals[signal] === undefined) {\n        if (signals[StringPrototypeToUpperCase(signal)] !== undefined) {\n            throw new ERR_UNKNOWN_SIGNAL(signal + \" (signals must use all capital letters)\");\n        }\n        throw new ERR_UNKNOWN_SIGNAL(signal);\n    }\n}\n/**\n * @callback validateBuffer\n * @param {*} buffer\n * @param {string} [name='buffer']\n * @returns {asserts buffer is ArrayBufferView}\n */ /** @type {validateBuffer} */ const validateBuffer = hideStackFrames((buffer, name = \"buffer\")=>{\n    if (!isArrayBufferView(buffer)) {\n        throw new ERR_INVALID_ARG_TYPE(name, [\n            \"Buffer\",\n            \"TypedArray\",\n            \"DataView\"\n        ], buffer);\n    }\n});\n/**\n * @param {string} data\n * @param {string} encoding\n */ function validateEncoding(data, encoding) {\n    const normalizedEncoding = normalizeEncoding(encoding);\n    const length = data.length;\n    if (normalizedEncoding === \"hex\" && length % 2 !== 0) {\n        throw new ERR_INVALID_ARG_VALUE(\"encoding\", encoding, `is invalid for data of length ${length}`);\n    }\n}\n/**\n * Check that the port number is not NaN when coerced to a number,\n * is an integer and that it falls within the legal range of port numbers.\n * @param {*} port\n * @param {string} [name='Port']\n * @param {boolean} [allowZero=true]\n * @returns {number}\n */ function validatePort(port, name = \"Port\", allowZero = true) {\n    if (typeof port !== \"number\" && typeof port !== \"string\" || typeof port === \"string\" && StringPrototypeTrim(port).length === 0 || +port !== +port >>> 0 || port > 0xffff || port === 0 && !allowZero) {\n        throw new ERR_SOCKET_BAD_PORT(name, port, allowZero);\n    }\n    return port | 0;\n}\n/**\n * @callback validateAbortSignal\n * @param {*} signal\n * @param {string} name\n */ /** @type {validateAbortSignal} */ const validateAbortSignal = hideStackFrames((signal, name)=>{\n    if (signal !== undefined && (signal === null || typeof signal !== \"object\" || !(\"aborted\" in signal))) {\n        throw new ERR_INVALID_ARG_TYPE(name, \"AbortSignal\", signal);\n    }\n});\n/**\n * @callback validateFunction\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is Function}\n */ /** @type {validateFunction} */ const validateFunction = hideStackFrames((value, name)=>{\n    if (typeof value !== \"function\") throw new ERR_INVALID_ARG_TYPE(name, \"Function\", value);\n});\n/**\n * @callback validatePlainFunction\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is Function}\n */ /** @type {validatePlainFunction} */ const validatePlainFunction = hideStackFrames((value, name)=>{\n    if (typeof value !== \"function\" || isAsyncFunction(value)) throw new ERR_INVALID_ARG_TYPE(name, \"Function\", value);\n});\n/**\n * @callback validateUndefined\n * @param {*} value\n * @param {string} name\n * @returns {asserts value is undefined}\n */ /** @type {validateUndefined} */ const validateUndefined = hideStackFrames((value, name)=>{\n    if (value !== undefined) throw new ERR_INVALID_ARG_TYPE(name, \"undefined\", value);\n});\n/**\n * @template T\n * @param {T} value\n * @param {string} name\n * @param {T[]} union\n */ function validateUnion(value, name, union) {\n    if (!ArrayPrototypeIncludes(union, value)) {\n        throw new ERR_INVALID_ARG_TYPE(name, `('${ArrayPrototypeJoin(union, \"|\")}')`, value);\n    }\n}\n/*\n  The rules for the Link header field are described here:\n  https://www.rfc-editor.org/rfc/rfc8288.html#section-3\n\n  This regex validates any string surrounded by angle brackets\n  (not necessarily a valid URI reference) followed by zero or more\n  link-params separated by semicolons.\n*/ const linkValueRegExp = /^(?:<[^>]*>)(?:\\s*;\\s*[^;\"\\s]+(?:=(\")?[^;\"\\s]*\\1)?)*$/;\n/**\n * @param {any} value\n * @param {string} name\n */ function validateLinkHeaderFormat(value, name) {\n    if (typeof value === \"undefined\" || !RegExpPrototypeExec(linkValueRegExp, value)) {\n        throw new ERR_INVALID_ARG_VALUE(name, value, 'must be an array or string of format \"</styles.css>; rel=preload; as=style\"');\n    }\n}\n/**\n * @param {any} hints\n * @return {string}\n */ function validateLinkHeaderValue(hints) {\n    if (typeof hints === \"string\") {\n        validateLinkHeaderFormat(hints, \"hints\");\n        return hints;\n    } else if (ArrayIsArray(hints)) {\n        const hintsLength = hints.length;\n        let result = \"\";\n        if (hintsLength === 0) {\n            return result;\n        }\n        for(let i = 0; i < hintsLength; i++){\n            const link = hints[i];\n            validateLinkHeaderFormat(link, \"hints\");\n            result += link;\n            if (i !== hintsLength - 1) {\n                result += \", \";\n            }\n        }\n        return result;\n    }\n    throw new ERR_INVALID_ARG_VALUE(\"hints\", hints, 'must be an array or string of format \"</styles.css>; rel=preload; as=style\"');\n}\nmodule.exports = {\n    isInt32,\n    isUint32,\n    parseFileMode,\n    validateArray,\n    validateStringArray,\n    validateBooleanArray,\n    validateBoolean,\n    validateBuffer,\n    validateDictionary,\n    validateEncoding,\n    validateFunction,\n    validateInt32,\n    validateInteger,\n    validateNumber,\n    validateObject,\n    validateOneOf,\n    validatePlainFunction,\n    validatePort,\n    validateSignalName,\n    validateString,\n    validateUint32,\n    validateUndefined,\n    validateUnion,\n    validateAbortSignal,\n    validateLinkHeaderValue\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3ZhbGlkYXRvcnMuanMiLCJtYXBwaW5ncyI6IkFBQUEsdUNBQXVDLEdBRXZDO0FBRUEsTUFBTSxFQUNKQSxZQUFZLEVBQ1pDLHNCQUFzQixFQUN0QkMsa0JBQWtCLEVBQ2xCQyxpQkFBaUIsRUFDakJDLGVBQWUsRUFDZkMsV0FBVyxFQUNYQyxzQkFBc0IsRUFDdEJDLHNCQUFzQixFQUN0QkMsY0FBYyxFQUNkQyw2QkFBNkIsRUFDN0JDLG1CQUFtQixFQUNuQkMsTUFBTSxFQUNOQywwQkFBMEIsRUFDMUJDLG1CQUFtQixFQUNwQixHQUFHQyxtQkFBT0EsQ0FBQztBQUNaLE1BQU0sRUFDSkMsZUFBZSxFQUNmQyxPQUFPLEVBQUVDLG1CQUFtQixFQUFFQyxvQkFBb0IsRUFBRUMscUJBQXFCLEVBQUVDLGdCQUFnQixFQUFFQyxrQkFBa0IsRUFBRSxFQUNsSCxHQUFHUCxtQkFBT0EsQ0FBQztBQUNaLE1BQU0sRUFBRVEsaUJBQWlCLEVBQUUsR0FBR1IsbUJBQU9BLENBQUM7QUFDdEMsTUFBTSxFQUFFUyxlQUFlLEVBQUVDLGlCQUFpQixFQUFFLEdBQUdWLGlKQUE2QjtBQUM1RSxNQUFNWSxVQUFVLENBQUM7QUFFakI7OztDQUdDLEdBQ0QsU0FBU0MsUUFBUUMsS0FBSztJQUNwQixPQUFPQSxVQUFXQSxDQUFBQSxRQUFRO0FBQzVCO0FBRUE7OztDQUdDLEdBQ0QsU0FBU0MsU0FBU0QsS0FBSztJQUNyQixPQUFPQSxVQUFVQSxVQUFVO0FBQzdCO0FBQ0EsTUFBTUUsV0FBVztBQUNqQixNQUFNQyxXQUFXO0FBRWpCOzs7Ozs7Ozs7OztDQVdDLEdBQ0QsU0FBU0MsY0FBY0osS0FBSyxFQUFFSyxJQUFJLEVBQUVDLEdBQUc7SUFDckMsSUFBSSxPQUFPTixVQUFVLGFBQWE7UUFDaENBLFFBQVFNO0lBQ1Y7SUFDQSxJ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X21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL2ludGVybmFsL3ZhbGlkYXRvcnMuanM/NDg0YyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQganNkb2MvcmVxdWlyZS1qc2RvYzogXCJlcnJvclwiICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCB7XG4gIEFycmF5SXNBcnJheSxcbiAgQXJyYXlQcm90b3R5cGVJbmNsdWRlcyxcbiAgQXJyYXlQcm90b3R5cGVKb2luLFxuICBBcnJheVByb3RvdHlwZU1hcCxcbiAgTnVtYmVySXNJbnRlZ2VyLFxuICBOdW1iZXJJc05hTixcbiAgTnVtYmVyTUFYX1NBRkVfSU5URUdFUixcbiAgTnVtYmVyTUlOX1NBRkVfSU5URUdFUixcbiAgTnVtYmVyUGFyc2VJbnQsXG4gIE9iamVjdFByb3RvdHlwZUhhc093blByb3BlcnR5LFxuICBSZWdFeHBQcm90b3R5cGVFeGVjLFxuICBTdHJpbmcsXG4gIFN0cmluZ1Byb3RvdHlwZVRvVXBwZXJDYXNlLFxuICBTdHJpbmdQcm90b3R5cGVUcmltXG59ID0gcmVxdWlyZSgnLi4vb3Vycy9wcmltb3JkaWFscycpXG5jb25zdCB7XG4gIGhpZGVTdGFja0ZyYW1lcyxcbiAgY29kZXM6IHsgRVJSX1NPQ0tFVF9CQURfUE9SVCwgRVJSX0lOVkFMSURfQVJHX1RZUEUsIEVSUl9JTlZBTElEX0FSR19WQUxVRSwgRVJSX09VVF9PRl9SQU5HRSwgRVJSX1VOS05PV05fU0lHTkFMIH1cbn0gPSByZXF1aXJlKCcuLi9vdXJzL2Vycm9ycycpXG5jb25zdCB7IG5vcm1hbGl6ZUVuY29kaW5nIH0gPSByZXF1aXJlKCcuLi9vdXJzL3V0aWwnKVxuY29uc3QgeyBpc0FzeW5jRnVuY3Rpb24sIGlzQXJyYXlCdWZmZXJWaWV3IH0gPSByZXF1aXJlKCcuLi9vdXJzL3V0aWwnKS50eXBlc1xuY29uc3Qgc2lnbmFscyA9IHt9XG5cbi8qKlxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzSW50MzIodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSAodmFsdWUgfCAwKVxufVxuXG4vKipcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEByZXR1cm5zIHtib29sZWFufVxuICovXG5mdW5jdGlvbiBpc1VpbnQzMih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT09IHZhbHVlID4+PiAwXG59XG5jb25zdCBvY3RhbFJlZyA9IC9eWzAtN10rJC9cbmNvbnN0IG1vZGVEZXNjID0gJ211c3QgYmUgYSAzMi1iaXQgdW5zaWduZWQgaW50ZWdlciBvciBhbiBvY3RhbCBzdHJpbmcnXG5cbi8qKlxuICogUGFyc2UgYW5kIHZhbGlkYXRlIHZhbHVlcyB0aGF0IHdpbGwgYmUgY29udmVydGVkIGludG8gbW9kZV90ICh0aGUgU18qXG4gKiBjb25zdGFudHMpLiBPbmx5IHZhbGlkIG51bWJlcnMgYW5kIG9jdGFsIHN0cmluZ3MgYXJlIGFsbG93ZWQuIFRoZXkgY291bGQgYmVcbiAqIGNvbnZlcnRlZCB0byAzMi1iaXQgdW5zaWduZWQgaW50ZWdlcnMgb3Igbm9uLW5lZ2F0aXZlIHNpZ25lZCBpbnRlZ2VycyBpbiB0aGVcbiAqIEMrKyBsYW5kLCBidXQgYW55IHZhbHVlIGhpZ2hlciB0aGFuIDBvNzc3IHdpbGwgcmVzdWx0IGluIHBsYXRmb3JtLXNwZWNpZmljXG4gKiBiZWhhdmlvcnMuXG4gKlxuICogQHBhcmFtIHsqfSB2YWx1ZSBWYWx1ZXMgdG8gYmUgdmFsaWRhdGVkXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZSBOYW1lIG9mIHRoZSBhcmd1bWVudFxuICogQHBhcmFtIHtudW1iZXJ9IFtkZWZdIElmIHNwZWNpZmllZCwgd2lsbCBiZSByZXR1cm5lZCBmb3IgaW52YWxpZCB2YWx1ZXNcbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHBhcnNlRmlsZU1vZGUodmFsdWUsIG5hbWUsIGRlZikge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJykge1xuICAgIHZhbHVlID0gZGVmXG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAoUmVnRXhwUHJvdG90eXBlRXhlYyhvY3RhbFJlZywgdmFsdWUpID09PSBudWxsKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1ZBTFVFKG5hbWUsIHZhbHVlLCBtb2RlRGVzYylcbiAgICB9XG4gICAgdmFsdWUgPSBOdW1iZXJQYXJzZUludCh2YWx1ZSwgOClcbiAgfVxuICB2YWxpZGF0ZVVpbnQzMih2YWx1ZSwgbmFtZSlcbiAgcmV0dXJuIHZhbHVlXG59XG5cbi8qKlxuICogQGNhbGxiYWNrIHZhbGlkYXRlSW50ZWdlclxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWluXVxuICogQHBhcmFtIHtudW1iZXJ9IFttYXhdXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBudW1iZXJ9XG4gKi9cblxuLyoqIEB0eXBlIHt2YWxpZGF0ZUludGVnZXJ9ICovXG5jb25zdCB2YWxpZGF0ZUludGVnZXIgPSBoaWRlU3RhY2tGcmFtZXMoKHZhbHVlLCBuYW1lLCBtaW4gPSBOdW1iZXJNSU5fU0FGRV9JTlRFR0VSLCBtYXggPSBOdW1iZXJNQVhfU0FGRV9JTlRFR0VSKSA9PiB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ251bWJlcicsIHZhbHVlKVxuICBpZiAoIU51bWJlcklzSW50ZWdlcih2YWx1ZSkpIHRocm93IG5ldyBFUlJfT1VUX09GX1JBTkdFKG5hbWUsICdhbiBpbnRlZ2VyJywgdmFsdWUpXG4gIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkgdGhyb3cgbmV3IEVSUl9PVVRfT0ZfUkFOR0UobmFtZSwgYD49ICR7bWlufSAmJiA8PSAke21heH1gLCB2YWx1ZSlcbn0pXG5cbi8qKlxuICogQGNhbGxiYWNrIHZhbGlkYXRlSW50MzJcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcGFyYW0ge251bWJlcn0gW21pbl1cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWF4XVxuICogQHJldHVybnMge2Fzc2VydHMgdmFsdWUgaXMgbnVtYmVyfVxuICovXG5cbi8qKiBAdHlwZSB7dmFsaWRhdGVJbnQzMn0gKi9cbmNvbnN0IHZhbGlkYXRlSW50MzIgPSBoaWRlU3RhY2tGcmFtZXMoKHZhbHVlLCBuYW1lLCBtaW4gPSAtMjE0NzQ4MzY0OCwgbWF4ID0gMjE0NzQ4MzY0NykgPT4ge1xuICAvLyBUaGUgZGVmYXVsdHMgZm9yIG1pbiBhbmQgbWF4IGNvcnJlc3BvbmQgdG8gdGhlIGxpbWl0cyBvZiAzMi1iaXQgaW50ZWdlcnMuXG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdudW1iZXInKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKG5hbWUsICdudW1iZXInLCB2YWx1ZSlcbiAgfVxuICBpZiAoIU51bWJlcklzSW50ZWdlcih2YWx1ZSkpIHtcbiAgICB0aHJvdyBuZXcgRVJSX09VVF9PRl9SQU5HRShuYW1lLCAnYW4gaW50ZWdlcicsIHZhbHVlKVxuICB9XG4gIGlmICh2YWx1ZSA8IG1pbiB8fCB2YWx1ZSA+IG1heCkge1xuICAgIHRocm93IG5ldyBFUlJfT1VUX09GX1JBTkdFKG5hbWUsIGA+PSAke21pbn0gJiYgPD0gJHttYXh9YCwgdmFsdWUpXG4gIH1cbn0pXG5cbi8qKlxuICogQGNhbGxiYWNrIHZhbGlkYXRlVWludDMyXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHtudW1iZXJ8Ym9vbGVhbn0gW3Bvc2l0aXZlPWZhbHNlXVxuICogQHJldHVybnMge2Fzc2VydHMgdmFsdWUgaXMgbnVtYmVyfVxuICovXG5cbi8qKiBAdHlwZSB7dmFsaWRhdGVVaW50MzJ9ICovXG5jb25zdCB2YWxpZGF0ZVVpbnQzMiA9IGhpZGVTdGFja0ZyYW1lcygodmFsdWUsIG5hbWUsIHBvc2l0aXZlID0gZmFsc2UpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ251bWJlcicsIHZhbHVlKVxuICB9XG4gIGlmICghTnVtYmVySXNJbnRlZ2VyKHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFUlJfT1VUX09GX1JBTkdFKG5hbWUsICdhbiBpbnRlZ2VyJywgdmFsdWUpXG4gIH1cbiAgY29uc3QgbWluID0gcG9zaXRpdmUgPyAxIDogMFxuICAvLyAyICoqIDMyID09PSA0Mjk0OTY3Mjk2XG4gIGNvbnN0IG1heCA9IDQyOTQ5NjcyOTVcbiAgaWYgKHZhbHVlIDwgbWluIHx8IHZhbHVlID4gbWF4KSB7XG4gICAgdGhyb3cgbmV3IEVSUl9PVVRfT0ZfUkFOR0UobmFtZSwgYD49ICR7bWlufSAmJiA8PSAke21heH1gLCB2YWx1ZSlcbiAgfVxufSlcblxuLyoqXG4gKiBAY2FsbGJhY2sgdmFsaWRhdGVTdHJpbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBzdHJpbmd9XG4gKi9cblxuLyoqIEB0eXBlIHt2YWxpZGF0ZVN0cmluZ30gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlU3RyaW5nKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ3N0cmluZycsIHZhbHVlKVxufVxuXG4vKipcbiAqIEBjYWxsYmFjayB2YWxpZGF0ZU51bWJlclxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWluXVxuICogQHBhcmFtIHtudW1iZXJ9IFttYXhdXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBudW1iZXJ9XG4gKi9cblxuLyoqIEB0eXBlIHt2YWxpZGF0ZU51bWJlcn0gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlTnVtYmVyKHZhbHVlLCBuYW1lLCBtaW4gPSB1bmRlZmluZWQsIG1heCkge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnbnVtYmVyJykgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKG5hbWUsICdudW1iZXInLCB2YWx1ZSlcbiAgaWYgKFxuICAgIChtaW4gIT0gbnVsbCAmJiB2YWx1ZSA8IG1pbikgfHxcbiAgICAobWF4ICE9IG51bGwgJiYgdmFsdWUgPiBtYXgpIHx8XG4gICAgKChtaW4gIT0gbnVsbCB8fCBtYXggIT0gbnVsbCkgJiYgTnVtYmVySXNOYU4odmFsdWUpKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRVJSX09VVF9PRl9SQU5HRShcbiAgICAgIG5hbWUsXG4gICAgICBgJHttaW4gIT0gbnVsbCA/IGA+PSAke21pbn1gIDogJyd9JHttaW4gIT0gbnVsbCAmJiBtYXggIT0gbnVsbCA/ICcgJiYgJyA6ICcnfSR7bWF4ICE9IG51bGwgPyBgPD0gJHttYXh9YCA6ICcnfWAsXG4gICAgICB2YWx1ZVxuICAgIClcbiAgfVxufVxuXG4vKipcbiAqIEBjYWxsYmFjayB2YWxpZGF0ZU9uZU9mXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7VFtdfSBvbmVPZlxuICovXG5cbi8qKiBAdHlwZSB7dmFsaWRhdGVPbmVPZn0gKi9cbmNvbnN0IHZhbGlkYXRlT25lT2YgPSBoaWRlU3RhY2tGcmFtZXMoKHZhbHVlLCBuYW1lLCBvbmVPZikgPT4ge1xuICBpZiAoIUFycmF5UHJvdG90eXBlSW5jbHVkZXMob25lT2YsIHZhbHVlKSkge1xuICAgIGNvbnN0IGFsbG93ZWQgPSBBcnJheVByb3RvdHlwZUpvaW4oXG4gICAgICBBcnJheVByb3RvdHlwZU1hcChvbmVPZiwgKHYpID0+ICh0eXBlb2YgdiA9PT0gJ3N0cmluZycgPyBgJyR7dn0nYCA6IFN0cmluZyh2KSkpLFxuICAgICAgJywgJ1xuICAgIClcbiAgICBjb25zdCByZWFzb24gPSAnbXVzdCBiZSBvbmUgb2Y6ICcgKyBhbGxvd2VkXG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19WQUxVRShuYW1lLCB2YWx1ZSwgcmVhc29uKVxuICB9XG59KVxuXG4vKipcbiAqIEBjYWxsYmFjayB2YWxpZGF0ZUJvb2xlYW5cbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBib29sZWFufVxuICovXG5cbi8qKiBAdHlwZSB7dmFsaWRhdGVCb29sZWFufSAqL1xuZnVuY3Rpb24gdmFsaWRhdGVCb29sZWFuKHZhbHVlLCBuYW1lKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdib29sZWFuJykgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKG5hbWUsICdib29sZWFuJywgdmFsdWUpXG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9wdGlvbnNcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXlcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gZGVmYXVsdFZhbHVlXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlWYWx1ZU9yRGVmYXVsdChvcHRpb25zLCBrZXksIGRlZmF1bHRWYWx1ZSkge1xuICByZXR1cm4gb3B0aW9ucyA9PSBudWxsIHx8ICFPYmplY3RQcm90b3R5cGVIYXNPd25Qcm9wZXJ0eShvcHRpb25zLCBrZXkpID8gZGVmYXVsdFZhbHVlIDogb3B0aW9uc1trZXldXG59XG5cbi8qKlxuICogQGNhbGxiYWNrIHZhbGlkYXRlT2JqZWN0XG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHBhcmFtIHt7XG4gKiAgIGFsbG93QXJyYXk/OiBib29sZWFuLFxuICogICBhbGxvd0Z1bmN0aW9uPzogYm9vbGVhbixcbiAqICAgbnVsbGFibGU/OiBib29sZWFuXG4gKiB9fSBbb3B0aW9uc11cbiAqL1xuXG4vKiogQHR5cGUge3ZhbGlkYXRlT2JqZWN0fSAqL1xuY29uc3QgdmFsaWRhdGVPYmplY3QgPSBoaWRlU3RhY2tGcmFtZXMoKHZhbHVlLCBuYW1lLCBvcHRpb25zID0gbnVsbCkgPT4ge1xuICBjb25zdCBhbGxvd0FycmF5ID0gZ2V0T3duUHJvcGVydHlWYWx1ZU9yRGVmYXVsdChvcHRpb25zLCAnYWxsb3dBcnJheScsIGZhbHNlKVxuICBjb25zdCBhbGxvd0Z1bmN0aW9uID0gZ2V0T3duUHJvcGVydHlWYWx1ZU9yRGVmYXVsdChvcHRpb25zLCAnYWxsb3dGdW5jdGlvbicsIGZhbHNlKVxuICBjb25zdCBudWxsYWJsZSA9IGdldE93blByb3BlcnR5VmFsdWVPckRlZmF1bHQob3B0aW9ucywgJ251bGxhYmxlJywgZmFsc2UpXG4gIGlmIChcbiAgICAoIW51bGxhYmxlICYmIHZhbHVlID09PSBudWxsKSB8fFxuICAgICghYWxsb3dBcnJheSAmJiBBcnJheUlzQXJyYXkodmFsdWUpKSB8fFxuICAgICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnICYmICghYWxsb3dGdW5jdGlvbiB8fCB0eXBlb2YgdmFsdWUgIT09ICdmdW5jdGlvbicpKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ09iamVjdCcsIHZhbHVlKVxuICB9XG59KVxuXG4vKipcbiAqIEBjYWxsYmFjayB2YWxpZGF0ZURpY3Rpb25hcnkgLSBXZSBhcmUgdXNpbmcgdGhlIFdlYiBJREwgU3RhbmRhcmQgZGVmaW5pdGlvblxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mIFwiZGljdGlvbmFyeVwiIGhlcmUsIHdoaWNoIG1lYW5zIGFueSB2YWx1ZVxuICogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdob3NlIFR5cGUgaXMgZWl0aGVyIFVuZGVmaW5lZCwgTnVsbCwgb3JcbiAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPYmplY3QgKHdoaWNoIGluY2x1ZGVzIGZ1bmN0aW9ucykuXG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHNlZSBodHRwczovL3dlYmlkbC5zcGVjLndoYXR3Zy5vcmcvI2VzLWRpY3Rpb25hcnlcbiAqIEBzZWUgaHR0cHM6Ly90YzM5LmVzL2VjbWEyNjIvI3RhYmxlLXR5cGVvZi1vcGVyYXRvci1yZXN1bHRzXG4gKi9cblxuLyoqIEB0eXBlIHt2YWxpZGF0ZURpY3Rpb25hcnl9ICovXG5jb25zdCB2YWxpZGF0ZURpY3Rpb25hcnkgPSBoaWRlU3RhY2tGcmFtZXMoKHZhbHVlLCBuYW1lKSA9PiB7XG4gIGlmICh2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSAhPT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKG5hbWUsICdhIGRpY3Rpb25hcnknLCB2YWx1ZSlcbiAgfVxufSlcblxuLyoqXG4gKiBAY2FsbGJhY2sgdmFsaWRhdGVBcnJheVxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7bnVtYmVyfSBbbWluTGVuZ3RoXVxuICogQHJldHVybnMge2Fzc2VydHMgdmFsdWUgaXMgYW55W119XG4gKi9cblxuLyoqIEB0eXBlIHt2YWxpZGF0ZUFycmF5fSAqL1xuY29uc3QgdmFsaWRhdGVBcnJheSA9IGhpZGVTdGFja0ZyYW1lcygodmFsdWUsIG5hbWUsIG1pbkxlbmd0aCA9IDApID0+IHtcbiAgaWYgKCFBcnJheUlzQXJyYXkodmFsdWUpKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19UWVBFKG5hbWUsICdBcnJheScsIHZhbHVlKVxuICB9XG4gIGlmICh2YWx1ZS5sZW5ndGggPCBtaW5MZW5ndGgpIHtcbiAgICBjb25zdCByZWFzb24gPSBgbXVzdCBiZSBsb25nZXIgdGhhbiAke21pbkxlbmd0aH1gXG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19WQUxVRShuYW1lLCB2YWx1ZSwgcmVhc29uKVxuICB9XG59KVxuXG4vKipcbiAqIEBjYWxsYmFjayB2YWxpZGF0ZVN0cmluZ0FycmF5XG4gKiBAcGFyYW0geyp9IHZhbHVlXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICogQHJldHVybnMge2Fzc2VydHMgdmFsdWUgaXMgc3RyaW5nW119XG4gKi9cblxuLyoqIEB0eXBlIHt2YWxpZGF0ZVN0cmluZ0FycmF5fSAqL1xuZnVuY3Rpb24gdmFsaWRhdGVTdHJpbmdBcnJheSh2YWx1ZSwgbmFtZSkge1xuICB2YWxpZGF0ZUFycmF5KHZhbHVlLCBuYW1lKVxuICBmb3IgKGxldCBpID0gMDsgaSA8IHZhbHVlLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFsaWRhdGVTdHJpbmcodmFsdWVbaV0sIGAke25hbWV9WyR7aX1dYClcbiAgfVxufVxuXG4vKipcbiAqIEBjYWxsYmFjayB2YWxpZGF0ZUJvb2xlYW5BcnJheVxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHthc3NlcnRzIHZhbHVlIGlzIGJvb2xlYW5bXX1cbiAqL1xuXG4vKiogQHR5cGUge3ZhbGlkYXRlQm9vbGVhbkFycmF5fSAqL1xuZnVuY3Rpb24gdmFsaWRhdGVCb29sZWFuQXJyYXkodmFsdWUsIG5hbWUpIHtcbiAgdmFsaWRhdGVBcnJheSh2YWx1ZSwgbmFtZSlcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZS5sZW5ndGg7IGkrKykge1xuICAgIHZhbGlkYXRlQm9vbGVhbih2YWx1ZVtpXSwgYCR7bmFtZX1bJHtpfV1gKVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHsqfSBzaWduYWxcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nc2lnbmFsJ11cbiAqIEByZXR1cm5zIHthc3NlcnRzIHNpZ25hbCBpcyBrZXlvZiBzaWduYWxzfVxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVNpZ25hbE5hbWUoc2lnbmFsLCBuYW1lID0gJ3NpZ25hbCcpIHtcbiAgdmFsaWRhdGVTdHJpbmcoc2lnbmFsLCBuYW1lKVxuICBpZiAoc2lnbmFsc1tzaWduYWxdID09PSB1bmRlZmluZWQpIHtcbiAgICBpZiAoc2lnbmFsc1tTdHJpbmdQcm90b3R5cGVUb1VwcGVyQ2FzZShzaWduYWwpXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRVJSX1VOS05PV05fU0lHTkFMKHNpZ25hbCArICcgKHNpZ25hbHMgbXVzdCB1c2UgYWxsIGNhcGl0YWwgbGV0dGVycyknKVxuICAgIH1cbiAgICB0aHJvdyBuZXcgRVJSX1VOS05PV05fU0lHTkFMKHNpZ25hbClcbiAgfVxufVxuXG4vKipcbiAqIEBjYWxsYmFjayB2YWxpZGF0ZUJ1ZmZlclxuICogQHBhcmFtIHsqfSBidWZmZXJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nYnVmZmVyJ11cbiAqIEByZXR1cm5zIHthc3NlcnRzIGJ1ZmZlciBpcyBBcnJheUJ1ZmZlclZpZXd9XG4gKi9cblxuLyoqIEB0eXBlIHt2YWxpZGF0ZUJ1ZmZlcn0gKi9cbmNvbnN0IHZhbGlkYXRlQnVmZmVyID0gaGlkZVN0YWNrRnJhbWVzKChidWZmZXIsIG5hbWUgPSAnYnVmZmVyJykgPT4ge1xuICBpZiAoIWlzQXJyYXlCdWZmZXJWaWV3KGJ1ZmZlcikpIHtcbiAgICB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgWydCdWZmZXInLCAnVHlwZWRBcnJheScsICdEYXRhVmlldyddLCBidWZmZXIpXG4gIH1cbn0pXG5cbi8qKlxuICogQHBhcmFtIHtzdHJpbmd9IGRhdGFcbiAqIEBwYXJhbSB7c3RyaW5nfSBlbmNvZGluZ1xuICovXG5mdW5jdGlvbiB2YWxpZGF0ZUVuY29kaW5nKGRhdGEsIGVuY29kaW5nKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWRFbmNvZGluZyA9IG5vcm1hbGl6ZUVuY29kaW5nKGVuY29kaW5nKVxuICBjb25zdCBsZW5ndGggPSBkYXRhLmxlbmd0aFxuICBpZiAobm9ybWFsaXplZEVuY29kaW5nID09PSAnaGV4JyAmJiBsZW5ndGggJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19WQUxVRSgnZW5jb2RpbmcnLCBlbmNvZGluZywgYGlzIGludmFsaWQgZm9yIGRhdGEgb2YgbGVuZ3RoICR7bGVuZ3RofWApXG4gIH1cbn1cblxuLyoqXG4gKiBDaGVjayB0aGF0IHRoZSBwb3J0IG51bWJlciBpcyBub3QgTmFOIHdoZW4gY29lcmNlZCB0byBhIG51bWJlcixcbiAqIGlzIGFuIGludGVnZXIgYW5kIHRoYXQgaXQgZmFsbHMgd2l0aGluIHRoZSBsZWdhbCByYW5nZSBvZiBwb3J0IG51bWJlcnMuXG4gKiBAcGFyYW0geyp9IHBvcnRcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbmFtZT0nUG9ydCddXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthbGxvd1plcm89dHJ1ZV1cbiAqIEByZXR1cm5zIHtudW1iZXJ9XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlUG9ydChwb3J0LCBuYW1lID0gJ1BvcnQnLCBhbGxvd1plcm8gPSB0cnVlKSB7XG4gIGlmIChcbiAgICAodHlwZW9mIHBvcnQgIT09ICdudW1iZXInICYmIHR5cGVvZiBwb3J0ICE9PSAnc3RyaW5nJykgfHxcbiAgICAodHlwZW9mIHBvcnQgPT09ICdzdHJpbmcnICYmIFN0cmluZ1Byb3RvdHlwZVRyaW0ocG9ydCkubGVuZ3RoID09PSAwKSB8fFxuICAgICtwb3J0ICE9PSArcG9ydCA+Pj4gMCB8fFxuICAgIHBvcnQgPiAweGZmZmYgfHxcbiAgICAocG9ydCA9PT0gMCAmJiAhYWxsb3daZXJvKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRVJSX1NPQ0tFVF9CQURfUE9SVChuYW1lLCBwb3J0LCBhbGxvd1plcm8pXG4gIH1cbiAgcmV0dXJuIHBvcnQgfCAwXG59XG5cbi8qKlxuICogQGNhbGxiYWNrIHZhbGlkYXRlQWJvcnRTaWduYWxcbiAqIEBwYXJhbSB7Kn0gc2lnbmFsXG4gKiBAcGFyYW0ge3N0cmluZ30gbmFtZVxuICovXG5cbi8qKiBAdHlwZSB7dmFsaWRhdGVBYm9ydFNpZ25hbH0gKi9cbmNvbnN0IHZhbGlkYXRlQWJvcnRTaWduYWwgPSBoaWRlU3RhY2tGcmFtZXMoKHNpZ25hbCwgbmFtZSkgPT4ge1xuICBpZiAoc2lnbmFsICE9PSB1bmRlZmluZWQgJiYgKHNpZ25hbCA9PT0gbnVsbCB8fCB0eXBlb2Ygc2lnbmFsICE9PSAnb2JqZWN0JyB8fCAhKCdhYm9ydGVkJyBpbiBzaWduYWwpKSkge1xuICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCAnQWJvcnRTaWduYWwnLCBzaWduYWwpXG4gIH1cbn0pXG5cbi8qKlxuICogQGNhbGxiYWNrIHZhbGlkYXRlRnVuY3Rpb25cbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBGdW5jdGlvbn1cbiAqL1xuXG4vKiogQHR5cGUge3ZhbGlkYXRlRnVuY3Rpb259ICovXG5jb25zdCB2YWxpZGF0ZUZ1bmN0aW9uID0gaGlkZVN0YWNrRnJhbWVzKCh2YWx1ZSwgbmFtZSkgPT4ge1xuICBpZiAodHlwZW9mIHZhbHVlICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ0Z1bmN0aW9uJywgdmFsdWUpXG59KVxuXG4vKipcbiAqIEBjYWxsYmFjayB2YWxpZGF0ZVBsYWluRnVuY3Rpb25cbiAqIEBwYXJhbSB7Kn0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKiBAcmV0dXJucyB7YXNzZXJ0cyB2YWx1ZSBpcyBGdW5jdGlvbn1cbiAqL1xuXG4vKiogQHR5cGUge3ZhbGlkYXRlUGxhaW5GdW5jdGlvbn0gKi9cbmNvbnN0IHZhbGlkYXRlUGxhaW5GdW5jdGlvbiA9IGhpZGVTdGFja0ZyYW1lcygodmFsdWUsIG5hbWUpID0+IHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ2Z1bmN0aW9uJyB8fCBpc0FzeW5jRnVuY3Rpb24odmFsdWUpKSB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ0Z1bmN0aW9uJywgdmFsdWUpXG59KVxuXG4vKipcbiAqIEBjYWxsYmFjayB2YWxpZGF0ZVVuZGVmaW5lZFxuICogQHBhcmFtIHsqfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEByZXR1cm5zIHthc3NlcnRzIHZhbHVlIGlzIHVuZGVmaW5lZH1cbiAqL1xuXG4vKiogQHR5cGUge3ZhbGlkYXRlVW5kZWZpbmVkfSAqL1xuY29uc3QgdmFsaWRhdGVVbmRlZmluZWQgPSBoaWRlU3RhY2tGcmFtZXMoKHZhbHVlLCBuYW1lKSA9PiB7XG4gIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkKSB0aHJvdyBuZXcgRVJSX0lOVkFMSURfQVJHX1RZUEUobmFtZSwgJ3VuZGVmaW5lZCcsIHZhbHVlKVxufSlcblxuLyoqXG4gKiBAdGVtcGxhdGUgVFxuICogQHBhcmFtIHtUfSB2YWx1ZVxuICogQHBhcmFtIHtzdHJpbmd9IG5hbWVcbiAqIEBwYXJhbSB7VFtdfSB1bmlvblxuICovXG5mdW5jdGlvbiB2YWxpZGF0ZVVuaW9uKHZhbHVlLCBuYW1lLCB1bmlvbikge1xuICBpZiAoIUFycmF5UHJvdG90eXBlSW5jbHVkZXModW5pb24sIHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVFlQRShuYW1lLCBgKCcke0FycmF5UHJvdG90eXBlSm9pbih1bmlvbiwgJ3wnKX0nKWAsIHZhbHVlKVxuICB9XG59XG5cbi8qXG4gIFRoZSBydWxlcyBmb3IgdGhlIExpbmsgaGVhZGVyIGZpZWxkIGFyZSBkZXNjcmliZWQgaGVyZTpcbiAgaHR0cHM6Ly93d3cucmZjLWVkaXRvci5vcmcvcmZjL3JmYzgyODguaHRtbCNzZWN0aW9uLTNcblxuICBUaGlzIHJlZ2V4IHZhbGlkYXRlcyBhbnkgc3RyaW5nIHN1cnJvdW5kZWQgYnkgYW5nbGUgYnJhY2tldHNcbiAgKG5vdCBuZWNlc3NhcmlseSBhIHZhbGlkIFVSSSByZWZlcmVuY2UpIGZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZVxuICBsaW5rLXBhcmFtcyBzZXBhcmF0ZWQgYnkgc2VtaWNvbG9ucy5cbiovXG5jb25zdCBsaW5rVmFsdWVSZWdFeHAgPSAvXig/OjxbXj5dKj4pKD86XFxzKjtcXHMqW147XCJcXHNdKyg/Oj0oXCIpP1teO1wiXFxzXSpcXDEpPykqJC9cblxuLyoqXG4gKiBAcGFyYW0ge2FueX0gdmFsdWVcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lXG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlTGlua0hlYWRlckZvcm1hdCh2YWx1ZSwgbmFtZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyB8fCAhUmVnRXhwUHJvdG90eXBlRXhlYyhsaW5rVmFsdWVSZWdFeHAsIHZhbHVlKSkge1xuICAgIHRocm93IG5ldyBFUlJfSU5WQUxJRF9BUkdfVkFMVUUoXG4gICAgICBuYW1lLFxuICAgICAgdmFsdWUsXG4gICAgICAnbXVzdCBiZSBhbiBhcnJheSBvciBzdHJpbmcgb2YgZm9ybWF0IFwiPC9zdHlsZXMuY3NzPjsgcmVsPXByZWxvYWQ7IGFzPXN0eWxlXCInXG4gICAgKVxuICB9XG59XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IGhpbnRzXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIHZhbGlkYXRlTGlua0hlYWRlclZhbHVlKGhpbnRzKSB7XG4gIGlmICh0eXBlb2YgaGludHMgPT09ICdzdHJpbmcnKSB7XG4gICAgdmFsaWRhdGVMaW5rSGVhZGVyRm9ybWF0KGhpbnRzLCAnaGludHMnKVxuICAgIHJldHVybiBoaW50c1xuICB9IGVsc2UgaWYgKEFycmF5SXNBcnJheShoaW50cykpIHtcbiAgICBjb25zdCBoaW50c0xlbmd0aCA9IGhpbnRzLmxlbmd0aFxuICAgIGxldCByZXN1bHQgPSAnJ1xuICAgIGlmIChoaW50c0xlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHJlc3VsdFxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhpbnRzTGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxpbmsgPSBoaW50c1tpXVxuICAgICAgdmFsaWRhdGVMaW5rSGVhZGVyRm9ybWF0KGxpbmssICdoaW50cycpXG4gICAgICByZXN1bHQgKz0gbGlua1xuICAgICAgaWYgKGkgIT09IGhpbnRzTGVuZ3RoIC0gMSkge1xuICAgICAgICByZXN1bHQgKz0gJywgJ1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbiAgdGhyb3cgbmV3IEVSUl9JTlZBTElEX0FSR19WQUxVRShcbiAgICAnaGludHMnLFxuICAgIGhpbnRzLFxuICAgICdtdXN0IGJlIGFuIGFycmF5IG9yIHN0cmluZyBvZiBmb3JtYXQgXCI8L3N0eWxlcy5jc3M+OyByZWw9cHJlbG9hZDsgYXM9c3R5bGVcIidcbiAgKVxufVxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGlzSW50MzIsXG4gIGlzVWludDMyLFxuICBwYXJzZUZpbGVNb2RlLFxuICB2YWxpZGF0ZUFycmF5LFxuICB2YWxpZGF0ZVN0cmluZ0FycmF5LFxuICB2YWxpZGF0ZUJvb2xlYW5BcnJheSxcbiAgdmFsaWRhdGVCb29sZWFuLFxuICB2YWxpZGF0ZUJ1ZmZlcixcbiAgdmFsaWRhdGVEaWN0aW9uYXJ5LFxuICB2YWxpZGF0ZUVuY29kaW5nLFxuICB2YWxpZGF0ZUZ1bmN0aW9uLFxuICB2YWxpZGF0ZUludDMyLFxuICB2YWxpZGF0ZUludGVnZXIsXG4gIHZhbGlkYXRlTnVtYmVyLFxuICB2YWxpZGF0ZU9iamVjdCxcbiAgdmFsaWRhdGVPbmVPZixcbiAgdmFsaWRhdGVQbGFpbkZ1bmN0aW9uLFxuICB2YWxpZGF0ZVBvcnQsXG4gIHZhbGlkYXRlU2lnbmFsTmFtZSxcbiAgdmFsaWRhdGVTdHJpbmcsXG4gIHZhbGlkYXRlVWludDMyLFxuICB2YWxpZGF0ZVVuZGVmaW5lZCxcbiAgdmFsaWRhdGVVbmlvbixcbiAgdmFsaWRhdGVBYm9ydFNpZ25hbCxcbiAgdmFsaWRhdGVMaW5rSGVhZGVyVmFsdWVcbn1cbiJdLCJuYW1lcyI6WyJBcnJheUlzQXJyYXkiLCJBcnJheVByb3RvdHlwZUluY2x1ZGVzIiwiQXJyYXlQcm90b3R5cGVKb2luIiwiQXJyYXlQcm90b3R5cGVNYXAiLCJOdW1iZXJJc0ludGVnZXIiLCJOdW1iZXJJc05hTiIsIk51bWJlck1BWF9TQUZFX0lOVEVHRVIiLCJOdW1iZXJNSU5fU0FGRV9JTlRFR0VSIiwiTnVtYmVyUGFyc2VJbnQiLCJPYmplY3RQcm90b3R5cGVIYXNPd25Qcm9wZXJ0eSIsIlJlZ0V4cFByb3RvdHlwZUV4ZWMiLCJTdHJpbmciLCJTdHJpbmdQcm90b3R5cGVUb1VwcGVyQ2FzZSIsIlN0cmluZ1Byb3RvdHlwZVRyaW0iLCJyZXF1aXJlIiwiaGlkZVN0YWNrRnJhbWVzIiwiY29kZXMiLCJFUlJfU09DS0VUX0JBRF9QT1JUIiwiRVJSX0lOVkFMSURfQVJHX1RZUEUiLCJFUlJfSU5WQUxJRF9BUkdfVkFMVUUiLCJFUlJfT1VUX09GX1JBTkdFIiwiRVJSX1VOS05PV05fU0lHTkFMIiwibm9ybWFsaXplRW5jb2RpbmciLCJpc0FzeW5jRnVuY3Rpb24iLCJpc0FycmF5QnVmZmVyVmlldyIsInR5cGVzIiwic2lnbmFscyIsImlzSW50MzIiLCJ2YWx1ZSIsImlzVWludDMyIiwib2N0YWxSZWciLCJtb2RlRGVzYyIsInBhcnNlRmlsZU1vZGUiLCJuYW1lIiwiZGVmIiwidmFsaWRhdGVVaW50MzIiLCJ2YWxpZGF0ZUludGVnZXIiLCJtaW4iLCJtYXgiLCJ2YWxpZGF0ZUludDMyIiwicG9zaXRpdmUiLCJ2YWxpZGF0ZVN0cmluZyIsInZhbGlkYXRlTnVtYmVyIiwidW5kZWZpbmVkIiwidmFsaWRhdGVPbmVPZiIsIm9uZU9mIiwiYWxsb3dlZCIsInYiLCJyZWFzb24iLCJ2YWxpZGF0ZUJvb2xlYW4iLCJnZXRPd25Qcm9wZXJ0eVZhbHVlT3JEZWZhdWx0Iiwib3B0aW9ucyIsImtleSIsImRlZmF1bHRWYWx1ZSIsInZhbGlkYXRlT2JqZWN0IiwiYWxsb3dBcnJheSIsImFsbG93RnVuY3Rpb24iLCJudWxsYWJsZSIsInZhbGlkYXRlRGljdGlvbmFyeSIsInZhbGlkYXRlQXJyYXkiLCJtaW5MZW5ndGgiLCJsZW5ndGgiLCJ2YWxpZGF0ZVN0cmluZ0FycmF5IiwiaSIsInZhbGlkYXRlQm9vbGVhbkFycmF5IiwidmFsaWRhdGVTaWduYWxOYW1lIiwic2lnbmFsIiwidmFsaWRhdGVCdWZmZXIiLCJidWZmZXIiLCJ2YWxpZGF0ZUVuY29kaW5nIiwiZGF0YSIsImVuY29kaW5nIiwibm9ybWFsaXplZEVuY29kaW5nIiwidmFsaWRhdGVQb3J0IiwicG9ydCIsImFsbG93WmVybyIsInZhbGlkYXRlQWJvcnRTaWduYWwiLCJ2YWxpZGF0ZUZ1bmN0aW9uIiwidmFsaWRhdGVQbGFpbkZ1bmN0aW9uIiwidmFsaWRhdGVVbmRlZmluZWQiLCJ2YWxpZGF0ZVVuaW9uIiwidW5pb24iLCJsaW5rVmFsdWVSZWdFeHAiLCJ2YWxpZGF0ZUxpbmtIZWFkZXJGb3JtYXQiLCJ2YWxpZGF0ZUxpbmtIZWFkZXJWYWx1ZSIsImhpbnRzIiwiaGludHNMZW5ndGgiLCJyZXN1bHQiLCJsaW5rIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/validators.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js ***!
  \**************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { format, inspect, AggregateError: CustomAggregateError } = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\");\n/*\n  This file is a reduced and adapted version of the main lib/internal/errors.js file defined at\n\n  https://github.com/nodejs/node/blob/master/lib/internal/errors.js\n\n  Don't try to replace with the original file and keep it up to date (starting from E(...) definitions)\n  with the upstream file.\n*/ const AggregateError = globalThis.AggregateError || CustomAggregateError;\nconst kIsNodeError = Symbol(\"kIsNodeError\");\nconst kTypes = [\n    \"string\",\n    \"function\",\n    \"number\",\n    \"object\",\n    // Accept 'Function' and 'Object' as alternative to the lower cased version.\n    \"Function\",\n    \"Object\",\n    \"boolean\",\n    \"bigint\",\n    \"symbol\"\n];\nconst classRegExp = /^([A-Z][a-z0-9]*)+$/;\nconst nodeInternalPrefix = \"__node_internal_\";\nconst codes = {};\nfunction assert(value, message) {\n    if (!value) {\n        throw new codes.ERR_INTERNAL_ASSERTION(message);\n    }\n}\n// Only use this for integers! Decimal numbers do not work with this function.\nfunction addNumericalSeparator(val) {\n    let res = \"\";\n    let i = val.length;\n    const start = val[0] === \"-\" ? 1 : 0;\n    for(; i >= start + 4; i -= 3){\n        res = `_${val.slice(i - 3, i)}${res}`;\n    }\n    return `${val.slice(0, i)}${res}`;\n}\nfunction getMessage(key, msg, args) {\n    if (typeof msg === \"function\") {\n        assert(msg.length <= args.length, // Default options do not count.\n        `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${msg.length}).`);\n        return msg(...args);\n    }\n    const expectedLength = (msg.match(/%[dfijoOs]/g) || []).length;\n    assert(expectedLength === args.length, `Code: ${key}; The provided arguments length (${args.length}) does not match the required ones (${expectedLength}).`);\n    if (args.length === 0) {\n        return msg;\n    }\n    return format(msg, ...args);\n}\nfunction E(code, message, Base) {\n    if (!Base) {\n        Base = Error;\n    }\n    class NodeError extends Base {\n        constructor(...args){\n            super(getMessage(code, message, args));\n        }\n        toString() {\n            return `${this.name} [${code}]: ${this.message}`;\n        }\n    }\n    Object.defineProperties(NodeError.prototype, {\n        name: {\n            value: Base.name,\n            writable: true,\n            enumerable: false,\n            configurable: true\n        },\n        toString: {\n            value () {\n                return `${this.name} [${code}]: ${this.message}`;\n            },\n            writable: true,\n            enumerable: false,\n            configurable: true\n        }\n    });\n    NodeError.prototype.code = code;\n    NodeError.prototype[kIsNodeError] = true;\n    codes[code] = NodeError;\n}\nfunction hideStackFrames(fn) {\n    // We rename the functions that will be hidden to cut off the stacktrace\n    // at the outermost one\n    const hidden = nodeInternalPrefix + fn.name;\n    Object.defineProperty(fn, \"name\", {\n        value: hidden\n    });\n    return fn;\n}\nfunction aggregateTwoErrors(innerError, outerError) {\n    if (innerError && outerError && innerError !== outerError) {\n        if (Array.isArray(outerError.errors)) {\n            // If `outerError` is already an `AggregateError`.\n            outerError.errors.push(innerError);\n            return outerError;\n        }\n        const err = new AggregateError([\n            outerError,\n            innerError\n        ], outerError.message);\n        err.code = outerError.code;\n        return err;\n    }\n    return innerError || outerError;\n}\nclass AbortError extends Error {\n    constructor(message = \"The operation was aborted\", options = undefined){\n        if (options !== undefined && typeof options !== \"object\") {\n            throw new codes.ERR_INVALID_ARG_TYPE(\"options\", \"Object\", options);\n        }\n        super(message, options);\n        this.code = \"ABORT_ERR\";\n        this.name = \"AbortError\";\n    }\n}\nE(\"ERR_ASSERTION\", \"%s\", Error);\nE(\"ERR_INVALID_ARG_TYPE\", (name, expected, actual)=>{\n    assert(typeof name === \"string\", \"'name' must be a string\");\n    if (!Array.isArray(expected)) {\n        expected = [\n            expected\n        ];\n    }\n    let msg = \"The \";\n    if (name.endsWith(\" argument\")) {\n        // For cases like 'first argument'\n        msg += `${name} `;\n    } else {\n        msg += `\"${name}\" ${name.includes(\".\") ? \"property\" : \"argument\"} `;\n    }\n    msg += \"must be \";\n    const types = [];\n    const instances = [];\n    const other = [];\n    for (const value of expected){\n        assert(typeof value === \"string\", \"All expected entries have to be of type string\");\n        if (kTypes.includes(value)) {\n            types.push(value.toLowerCase());\n        } else if (classRegExp.test(value)) {\n            instances.push(value);\n        } else {\n            assert(value !== \"object\", 'The value \"object\" should be written as \"Object\"');\n            other.push(value);\n        }\n    }\n    // Special handle `object` in case other instances are allowed to outline\n    // the differences between each other.\n    if (instances.length > 0) {\n        const pos = types.indexOf(\"object\");\n        if (pos !== -1) {\n            types.splice(types, pos, 1);\n            instances.push(\"Object\");\n        }\n    }\n    if (types.length > 0) {\n        switch(types.length){\n            case 1:\n                msg += `of type ${types[0]}`;\n                break;\n            case 2:\n                msg += `one of type ${types[0]} or ${types[1]}`;\n                break;\n            default:\n                {\n                    const last = types.pop();\n                    msg += `one of type ${types.join(\", \")}, or ${last}`;\n                }\n        }\n        if (instances.length > 0 || other.length > 0) {\n            msg += \" or \";\n        }\n    }\n    if (instances.length > 0) {\n        switch(instances.length){\n            case 1:\n                msg += `an instance of ${instances[0]}`;\n                break;\n            case 2:\n                msg += `an instance of ${instances[0]} or ${instances[1]}`;\n                break;\n            default:\n                {\n                    const last = instances.pop();\n                    msg += `an instance of ${instances.join(\", \")}, or ${last}`;\n                }\n        }\n        if (other.length > 0) {\n            msg += \" or \";\n        }\n    }\n    switch(other.length){\n        case 0:\n            break;\n        case 1:\n            if (other[0].toLowerCase() !== other[0]) {\n                msg += \"an \";\n            }\n            msg += `${other[0]}`;\n            break;\n        case 2:\n            msg += `one of ${other[0]} or ${other[1]}`;\n            break;\n        default:\n            {\n                const last = other.pop();\n                msg += `one of ${other.join(\", \")}, or ${last}`;\n            }\n    }\n    if (actual == null) {\n        msg += `. Received ${actual}`;\n    } else if (typeof actual === \"function\" && actual.name) {\n        msg += `. Received function ${actual.name}`;\n    } else if (typeof actual === \"object\") {\n        var _actual$constructor;\n        if ((_actual$constructor = actual.constructor) !== null && _actual$constructor !== undefined && _actual$constructor.name) {\n            msg += `. Received an instance of ${actual.constructor.name}`;\n        } else {\n            const inspected = inspect(actual, {\n                depth: -1\n            });\n            msg += `. Received ${inspected}`;\n        }\n    } else {\n        let inspected = inspect(actual, {\n            colors: false\n        });\n        if (inspected.length > 25) {\n            inspected = `${inspected.slice(0, 25)}...`;\n        }\n        msg += `. Received type ${typeof actual} (${inspected})`;\n    }\n    return msg;\n}, TypeError);\nE(\"ERR_INVALID_ARG_VALUE\", (name, value, reason = \"is invalid\")=>{\n    let inspected = inspect(value);\n    if (inspected.length > 128) {\n        inspected = inspected.slice(0, 128) + \"...\";\n    }\n    const type = name.includes(\".\") ? \"property\" : \"argument\";\n    return `The ${type} '${name}' ${reason}. Received ${inspected}`;\n}, TypeError);\nE(\"ERR_INVALID_RETURN_VALUE\", (input, name, value)=>{\n    var _value$constructor;\n    const type = value !== null && value !== undefined && (_value$constructor = value.constructor) !== null && _value$constructor !== undefined && _value$constructor.name ? `instance of ${value.constructor.name}` : `type ${typeof value}`;\n    return `Expected ${input} to be returned from the \"${name}\"` + ` function but got ${type}.`;\n}, TypeError);\nE(\"ERR_MISSING_ARGS\", (...args)=>{\n    assert(args.length > 0, \"At least one arg needs to be specified\");\n    let msg;\n    const len = args.length;\n    args = (Array.isArray(args) ? args : [\n        args\n    ]).map((a)=>`\"${a}\"`).join(\" or \");\n    switch(len){\n        case 1:\n            msg += `The ${args[0]} argument`;\n            break;\n        case 2:\n            msg += `The ${args[0]} and ${args[1]} arguments`;\n            break;\n        default:\n            {\n                const last = args.pop();\n                msg += `The ${args.join(\", \")}, and ${last} arguments`;\n            }\n            break;\n    }\n    return `${msg} must be specified`;\n}, TypeError);\nE(\"ERR_OUT_OF_RANGE\", (str, range, input)=>{\n    assert(range, 'Missing \"range\" argument');\n    let received;\n    if (Number.isInteger(input) && Math.abs(input) > 2 ** 32) {\n        received = addNumericalSeparator(String(input));\n    } else if (typeof input === \"bigint\") {\n        received = String(input);\n        if (input > 2n ** 32n || input < -(2n ** 32n)) {\n            received = addNumericalSeparator(received);\n        }\n        received += \"n\";\n    } else {\n        received = inspect(input);\n    }\n    return `The value of \"${str}\" is out of range. It must be ${range}. Received ${received}`;\n}, RangeError);\nE(\"ERR_MULTIPLE_CALLBACK\", \"Callback called multiple times\", Error);\nE(\"ERR_METHOD_NOT_IMPLEMENTED\", \"The %s method is not implemented\", Error);\nE(\"ERR_STREAM_ALREADY_FINISHED\", \"Cannot call %s after a stream was finished\", Error);\nE(\"ERR_STREAM_CANNOT_PIPE\", \"Cannot pipe, not readable\", Error);\nE(\"ERR_STREAM_DESTROYED\", \"Cannot call %s after a stream was destroyed\", Error);\nE(\"ERR_STREAM_NULL_VALUES\", \"May not write null values to stream\", TypeError);\nE(\"ERR_STREAM_PREMATURE_CLOSE\", \"Premature close\", Error);\nE(\"ERR_STREAM_PUSH_AFTER_EOF\", \"stream.push() after EOF\", Error);\nE(\"ERR_STREAM_UNSHIFT_AFTER_END_EVENT\", \"stream.unshift() after end event\", Error);\nE(\"ERR_STREAM_WRITE_AFTER_END\", \"write after end\", Error);\nE(\"ERR_UNKNOWN_ENCODING\", \"Unknown encoding: %s\", TypeError);\nmodule.exports = {\n    AbortError,\n    aggregateTwoErrors: hideStackFrames(aggregateTwoErrors),\n    hideStackFrames,\n    codes\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/index.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/index.js ***!
  \*************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst Stream = __webpack_require__(/*! stream */ \"stream\");\nif (Stream && process.env.READABLE_STREAM === \"disable\") {\n    const promises = Stream.promises;\n    // Explicit export naming is needed for ESM\n    module.exports._uint8ArrayToBuffer = Stream._uint8ArrayToBuffer;\n    module.exports._isUint8Array = Stream._isUint8Array;\n    module.exports.isDisturbed = Stream.isDisturbed;\n    module.exports.isErrored = Stream.isErrored;\n    module.exports.isReadable = Stream.isReadable;\n    module.exports.Readable = Stream.Readable;\n    module.exports.Writable = Stream.Writable;\n    module.exports.Duplex = Stream.Duplex;\n    module.exports.Transform = Stream.Transform;\n    module.exports.PassThrough = Stream.PassThrough;\n    module.exports.addAbortSignal = Stream.addAbortSignal;\n    module.exports.finished = Stream.finished;\n    module.exports.destroy = Stream.destroy;\n    module.exports.pipeline = Stream.pipeline;\n    module.exports.compose = Stream.compose;\n    Object.defineProperty(Stream, \"promises\", {\n        configurable: true,\n        enumerable: true,\n        get () {\n            return promises;\n        }\n    });\n    module.exports.Stream = Stream.Stream;\n} else {\n    const CustomStream = __webpack_require__(/*! ../stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream.js\");\n    const promises = __webpack_require__(/*! ../stream/promises */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream/promises.js\");\n    const originalDestroy = CustomStream.Readable.destroy;\n    module.exports = CustomStream.Readable;\n    // Explicit export naming is needed for ESM\n    module.exports._uint8ArrayToBuffer = CustomStream._uint8ArrayToBuffer;\n    module.exports._isUint8Array = CustomStream._isUint8Array;\n    module.exports.isDisturbed = CustomStream.isDisturbed;\n    module.exports.isErrored = CustomStream.isErrored;\n    module.exports.isReadable = CustomStream.isReadable;\n    module.exports.Readable = CustomStream.Readable;\n    module.exports.Writable = CustomStream.Writable;\n    module.exports.Duplex = CustomStream.Duplex;\n    module.exports.Transform = CustomStream.Transform;\n    module.exports.PassThrough = CustomStream.PassThrough;\n    module.exports.addAbortSignal = CustomStream.addAbortSignal;\n    module.exports.finished = CustomStream.finished;\n    module.exports.destroy = CustomStream.destroy;\n    module.exports.destroy = originalDestroy;\n    module.exports.pipeline = CustomStream.pipeline;\n    module.exports.compose = CustomStream.compose;\n    Object.defineProperty(CustomStream, \"promises\", {\n        configurable: true,\n        enumerable: true,\n        get () {\n            return promises;\n        }\n    });\n    module.exports.Stream = CustomStream.Stream;\n}\n// Allow default importing\nmodule.exports[\"default\"] = module.exports;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL291cnMvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxNQUFNQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUN2QixJQUFJRCxVQUFVRSxRQUFRQyxHQUFHLENBQUNDLGVBQWUsS0FBSyxXQUFXO0lBQ3ZELE1BQU1DLFdBQVdMLE9BQU9LLFFBQVE7SUFFaEMsMkNBQTJDO0lBQzNDQyxrQ0FBa0MsR0FBR04sT0FBT1EsbUJBQW1CO0lBQy9ERiw0QkFBNEIsR0FBR04sT0FBT1MsYUFBYTtJQUNuREgsMEJBQTBCLEdBQUdOLE9BQU9VLFdBQVc7SUFDL0NKLHdCQUF3QixHQUFHTixPQUFPVyxTQUFTO0lBQzNDTCx5QkFBeUIsR0FBR04sT0FBT1ksVUFBVTtJQUM3Q04sdUJBQXVCLEdBQUdOLE9BQU9hLFFBQVE7SUFDekNQLHVCQUF1QixHQUFHTixPQUFPYyxRQUFRO0lBQ3pDUixxQkFBcUIsR0FBR04sT0FBT2UsTUFBTTtJQUNyQ1Qsd0JBQXdCLEdBQUdOLE9BQU9nQixTQUFTO0lBQzNDViwwQkFBMEIsR0FBR04sT0FBT2lCLFdBQVc7SUFDL0NYLDZCQUE2QixHQUFHTixPQUFPa0IsY0FBYztJQUNyRFosdUJBQXVCLEdBQUdOLE9BQU9tQixRQUFRO0lBQ3pDYixzQkFBc0IsR0FBR04sT0FBT29CLE9BQU87SUFDdkNkLHVCQUF1QixHQUFHTixPQUFPcUIsUUFBUTtJQUN6Q2Ysc0JBQXNCLEdBQUdOLE9BQU9zQixPQUFPO0lBQ3ZDQyxPQUFPQyxjQUFjLENBQUN4QixRQUFRLFlBQVk7UUFDeEN5QixjQUFjO1FBQ2RDLFlBQVk7UUFDWkM7WUFDRSxPQUFPdEI7UUFDVDtJQUNGO0lBQ0FDLHFCQUFxQixHQUFHTixPQUFPQSxNQUFNO0FBQ3ZDLE9BQU87SUFDTCxNQUFNNEIsZUFBZTNCLG1CQUFPQSxDQUFDO0lBQzdCLE1BQU1JLFdBQVdKLG1CQUFPQSxDQUFDO0lBQ3pCLE1BQU00QixrQkFBa0JELGFBQWFmLFFBQVEsQ0FBQ08sT0FBTztJQUNyRGQsT0FBT0MsT0FBTyxHQUFHcUIsYUFBYWYsUUFBUTtJQUV0QywyQ0FBMkM7SUFDM0NQLGtDQUFrQyxHQUFHc0IsYUFBYXBCLG1CQUFtQjtJQUNyRUYsNEJBQTRCLEdBQUdzQixhQUFhbkIsYUFBYTtJQUN6REgsMEJBQTBCLEdBQUdzQixhQUFhbEIsV0FBVztJQUNyREosd0JBQXdCLEdBQUdzQixhQUFhakIsU0FBUztJQUNqREwseUJBQXlCLEdBQUdzQixhQUFhaEIsVUFBVTtJQUNuRE4sdUJBQXVCLEdBQUdzQixhQUFhZixRQUFRO0lBQy9DUCx1QkFBdUIsR0FBR3NCLGFBQWFkLFFBQVE7SUFDL0NSLHFCQUFxQixHQUFHc0IsYUFBYWIsTUFBTTtJQUMzQ1Qsd0JBQXdCLEdBQUdzQixhQUFhWixTQUFTO0lBQ2pEViwwQkFBMEIsR0FBR3NCLGFBQWFYLFdBQVc7SUFDckRYLDZCQUE2QixHQUFHc0IsYUFBYVYsY0FBYztJQUMzRFosdUJBQXVCLEdBQUdzQixhQUFhVCxRQUFRO0lBQy9DYixzQkFBc0IsR0FBR3NCLGFBQWFSLE9BQU87SUFDN0NkLHNCQUFzQixHQUFHdUI7SUFDekJ2Qix1QkFBdUIsR0FBR3NCLGFBQWFQLFFBQVE7SUFDL0NmLHNCQUFzQixHQUFHc0IsYUFBYU4sT0FBTztJQUM3Q0MsT0FBT0MsY0FBYyxDQUFDSSxjQUFjLFlBQVk7UUFDOUNILGNBQWM7UUFDZEMsWUFBWTtRQUNaQztZQUNFLE9BQU90QjtRQUNUO0lBQ0Y7SUFDQUMscUJBQXFCLEdBQUdzQixhQUFhNUIsTUFBTTtBQUM3QztBQUVBLDBCQUEwQjtBQUMxQk0seUJBQXNCLEdBQUdBLE9BQU9DLE9BQU8iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL291cnMvaW5kZXguanM/ZmM2ZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxuY29uc3QgU3RyZWFtID0gcmVxdWlyZSgnc3RyZWFtJylcbmlmIChTdHJlYW0gJiYgcHJvY2Vzcy5lbnYuUkVBREFCTEVfU1RSRUFNID09PSAnZGlzYWJsZScpIHtcbiAgY29uc3QgcHJvbWlzZXMgPSBTdHJlYW0ucHJvbWlzZXNcblxuICAvLyBFeHBsaWNpdCBleHBvcnQgbmFtaW5nIGlzIG5lZWRlZCBmb3IgRVNNXG4gIG1vZHVsZS5leHBvcnRzLl91aW50OEFycmF5VG9CdWZmZXIgPSBTdHJlYW0uX3VpbnQ4QXJyYXlUb0J1ZmZlclxuICBtb2R1bGUuZXhwb3J0cy5faXNVaW50OEFycmF5ID0gU3RyZWFtLl9pc1VpbnQ4QXJyYXlcbiAgbW9kdWxlLmV4cG9ydHMuaXNEaXN0dXJiZWQgPSBTdHJlYW0uaXNEaXN0dXJiZWRcbiAgbW9kdWxlLmV4cG9ydHMuaXNFcnJvcmVkID0gU3RyZWFtLmlzRXJyb3JlZFxuICBtb2R1bGUuZXhwb3J0cy5pc1JlYWRhYmxlID0gU3RyZWFtLmlzUmVhZGFibGVcbiAgbW9kdWxlLmV4cG9ydHMuUmVhZGFibGUgPSBTdHJlYW0uUmVhZGFibGVcbiAgbW9kdWxlLmV4cG9ydHMuV3JpdGFibGUgPSBTdHJlYW0uV3JpdGFibGVcbiAgbW9kdWxlLmV4cG9ydHMuRHVwbGV4ID0gU3RyZWFtLkR1cGxleFxuICBtb2R1bGUuZXhwb3J0cy5UcmFuc2Zvcm0gPSBTdHJlYW0uVHJhbnNmb3JtXG4gIG1vZHVsZS5leHBvcnRzLlBhc3NUaHJvdWdoID0gU3RyZWFtLlBhc3NUaHJvdWdoXG4gIG1vZHVsZS5leHBvcnRzLmFkZEFib3J0U2lnbmFsID0gU3RyZWFtLmFkZEFib3J0U2lnbmFsXG4gIG1vZHVsZS5leHBvcnRzLmZpbmlzaGVkID0gU3RyZWFtLmZpbmlzaGVkXG4gIG1vZHVsZS5leHBvcnRzLmRlc3Ryb3kgPSBTdHJlYW0uZGVzdHJveVxuICBtb2R1bGUuZXhwb3J0cy5waXBlbGluZSA9IFN0cmVhbS5waXBlbGluZVxuICBtb2R1bGUuZXhwb3J0cy5jb21wb3NlID0gU3RyZWFtLmNvbXBvc2VcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFN0cmVhbSwgJ3Byb21pc2VzJywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldCgpIHtcbiAgICAgIHJldHVybiBwcm9taXNlc1xuICAgIH1cbiAgfSlcbiAgbW9kdWxlLmV4cG9ydHMuU3RyZWFtID0gU3RyZWFtLlN0cmVhbVxufSBlbHNlIHtcbiAgY29uc3QgQ3VzdG9tU3RyZWFtID0gcmVxdWlyZSgnLi4vc3RyZWFtJylcbiAgY29uc3QgcHJvbWlzZXMgPSByZXF1aXJlKCcuLi9zdHJlYW0vcHJvbWlzZXMnKVxuICBjb25zdCBvcmlnaW5hbERlc3Ryb3kgPSBDdXN0b21TdHJlYW0uUmVhZGFibGUuZGVzdHJveVxuICBtb2R1bGUuZXhwb3J0cyA9IEN1c3RvbVN0cmVhbS5SZWFkYWJsZVxuXG4gIC8vIEV4cGxpY2l0IGV4cG9ydCBuYW1pbmcgaXMgbmVlZGVkIGZvciBFU01cbiAgbW9kdWxlLmV4cG9ydHMuX3VpbnQ4QXJyYXlUb0J1ZmZlciA9IEN1c3RvbVN0cmVhbS5fdWludDhBcnJheVRvQnVmZmVyXG4gIG1vZHVsZS5leHBvcnRzLl9pc1VpbnQ4QXJyYXkgPSBDdXN0b21TdHJlYW0uX2lzVWludDhBcnJheVxuICBtb2R1bGUuZXhwb3J0cy5pc0Rpc3R1cmJlZCA9IEN1c3RvbVN0cmVhbS5pc0Rpc3R1cmJlZFxuICBtb2R1bGUuZXhwb3J0cy5pc0Vycm9yZWQgPSBDdXN0b21TdHJlYW0uaXNFcnJvcmVkXG4gIG1vZHVsZS5leHBvcnRzLmlzUmVhZGFibGUgPSBDdXN0b21TdHJlYW0uaXNSZWFkYWJsZVxuICBtb2R1bGUuZXhwb3J0cy5SZWFkYWJsZSA9IEN1c3RvbVN0cmVhbS5SZWFkYWJsZVxuICBtb2R1bGUuZXhwb3J0cy5Xcml0YWJsZSA9IEN1c3RvbVN0cmVhbS5Xcml0YWJsZVxuICBtb2R1bGUuZXhwb3J0cy5EdXBsZXggPSBDdXN0b21TdHJlYW0uRHVwbGV4XG4gIG1vZHVsZS5leHBvcnRzLlRyYW5zZm9ybSA9IEN1c3RvbVN0cmVhbS5UcmFuc2Zvcm1cbiAgbW9kdWxlLmV4cG9ydHMuUGFzc1Rocm91Z2ggPSBDdXN0b21TdHJlYW0uUGFzc1Rocm91Z2hcbiAgbW9kdWxlLmV4cG9ydHMuYWRkQWJvcnRTaWduYWwgPSBDdXN0b21TdHJlYW0uYWRkQWJvcnRTaWduYWxcbiAgbW9kdWxlLmV4cG9ydHMuZmluaXNoZWQgPSBDdXN0b21TdHJlYW0uZmluaXNoZWRcbiAgbW9kdWxlLmV4cG9ydHMuZGVzdHJveSA9IEN1c3RvbVN0cmVhbS5kZXN0cm95XG4gIG1vZHVsZS5leHBvcnRzLmRlc3Ryb3kgPSBvcmlnaW5hbERlc3Ryb3lcbiAgbW9kdWxlLmV4cG9ydHMucGlwZWxpbmUgPSBDdXN0b21TdHJlYW0ucGlwZWxpbmVcbiAgbW9kdWxlLmV4cG9ydHMuY29tcG9zZSA9IEN1c3RvbVN0cmVhbS5jb21wb3NlXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDdXN0b21TdHJlYW0sICdwcm9taXNlcycsIHtcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQoKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZXNcbiAgICB9XG4gIH0pXG4gIG1vZHVsZS5leHBvcnRzLlN0cmVhbSA9IEN1c3RvbVN0cmVhbS5TdHJlYW1cbn1cblxuLy8gQWxsb3cgZGVmYXVsdCBpbXBvcnRpbmdcbm1vZHVsZS5leHBvcnRzLmRlZmF1bHQgPSBtb2R1bGUuZXhwb3J0c1xuIl0sIm5hbWVzIjpbIlN0cmVhbSIsInJlcXVpcmUiLCJwcm9jZXNzIiwiZW52IiwiUkVBREFCTEVfU1RSRUFNIiwicHJvbWlzZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwiX3VpbnQ4QXJyYXlUb0J1ZmZlciIsIl9pc1VpbnQ4QXJyYXkiLCJpc0Rpc3R1cmJlZCIsImlzRXJyb3JlZCIsImlzUmVhZGFibGUiLCJSZWFkYWJsZSIsIldyaXRhYmxlIiwiRHVwbGV4IiwiVHJhbnNmb3JtIiwiUGFzc1Rocm91Z2giLCJhZGRBYm9ydFNpZ25hbCIsImZpbmlzaGVkIiwiZGVzdHJveSIsInBpcGVsaW5lIiwiY29tcG9zZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiY29uZmlndXJhYmxlIiwiZW51bWVyYWJsZSIsImdldCIsIkN1c3RvbVN0cmVhbSIsIm9yaWdpbmFsRGVzdHJveSIsImRlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js ***!
  \*******************************************************************************************************/
/***/ ((module) => {

"use strict";
eval("\n/*\n  This file is a reduced and adapted version of the main lib/internal/per_context/primordials.js file defined at\n\n  https://github.com/nodejs/node/blob/master/lib/internal/per_context/primordials.js\n\n  Don't try to replace with the original file and keep it up to date with the upstream file.\n*/ module.exports = {\n    ArrayIsArray (self) {\n        return Array.isArray(self);\n    },\n    ArrayPrototypeIncludes (self, el) {\n        return self.includes(el);\n    },\n    ArrayPrototypeIndexOf (self, el) {\n        return self.indexOf(el);\n    },\n    ArrayPrototypeJoin (self, sep) {\n        return self.join(sep);\n    },\n    ArrayPrototypeMap (self, fn) {\n        return self.map(fn);\n    },\n    ArrayPrototypePop (self, el) {\n        return self.pop(el);\n    },\n    ArrayPrototypePush (self, el) {\n        return self.push(el);\n    },\n    ArrayPrototypeSlice (self, start, end) {\n        return self.slice(start, end);\n    },\n    Error,\n    FunctionPrototypeCall (fn, thisArgs, ...args) {\n        return fn.call(thisArgs, ...args);\n    },\n    FunctionPrototypeSymbolHasInstance (self, instance) {\n        return Function.prototype[Symbol.hasInstance].call(self, instance);\n    },\n    MathFloor: Math.floor,\n    Number,\n    NumberIsInteger: Number.isInteger,\n    NumberIsNaN: Number.isNaN,\n    NumberMAX_SAFE_INTEGER: Number.MAX_SAFE_INTEGER,\n    NumberMIN_SAFE_INTEGER: Number.MIN_SAFE_INTEGER,\n    NumberParseInt: Number.parseInt,\n    ObjectDefineProperties (self, props) {\n        return Object.defineProperties(self, props);\n    },\n    ObjectDefineProperty (self, name, prop) {\n        return Object.defineProperty(self, name, prop);\n    },\n    ObjectGetOwnPropertyDescriptor (self, name) {\n        return Object.getOwnPropertyDescriptor(self, name);\n    },\n    ObjectKeys (obj) {\n        return Object.keys(obj);\n    },\n    ObjectSetPrototypeOf (target, proto) {\n        return Object.setPrototypeOf(target, proto);\n    },\n    Promise,\n    PromisePrototypeCatch (self, fn) {\n        return self.catch(fn);\n    },\n    PromisePrototypeThen (self, thenFn, catchFn) {\n        return self.then(thenFn, catchFn);\n    },\n    PromiseReject (err) {\n        return Promise.reject(err);\n    },\n    ReflectApply: Reflect.apply,\n    RegExpPrototypeTest (self, value) {\n        return self.test(value);\n    },\n    SafeSet: Set,\n    String,\n    StringPrototypeSlice (self, start, end) {\n        return self.slice(start, end);\n    },\n    StringPrototypeToLowerCase (self) {\n        return self.toLowerCase();\n    },\n    StringPrototypeToUpperCase (self) {\n        return self.toUpperCase();\n    },\n    StringPrototypeTrim (self) {\n        return self.trim();\n    },\n    Symbol,\n    SymbolFor: Symbol.for,\n    SymbolAsyncIterator: Symbol.asyncIterator,\n    SymbolHasInstance: Symbol.hasInstance,\n    SymbolIterator: Symbol.iterator,\n    TypedArrayPrototypeSet (self, buf, len) {\n        return self.set(buf, len);\n    },\n    Uint8Array\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js ***!
  \************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst bufferModule = __webpack_require__(/*! buffer */ \"buffer\");\nconst AsyncFunction = Object.getPrototypeOf(async function() {}).constructor;\nconst Blob = globalThis.Blob || bufferModule.Blob;\n/* eslint-disable indent */ const isBlob = typeof Blob !== \"undefined\" ? function isBlob(b) {\n    // eslint-disable-next-line indent\n    return b instanceof Blob;\n} : function isBlob(b) {\n    return false;\n};\n/* eslint-enable indent */ // This is a simplified version of AggregateError\nclass AggregateError extends Error {\n    constructor(errors){\n        if (!Array.isArray(errors)) {\n            throw new TypeError(`Expected input to be an Array, got ${typeof errors}`);\n        }\n        let message = \"\";\n        for(let i = 0; i < errors.length; i++){\n            message += `    ${errors[i].stack}\\n`;\n        }\n        super(message);\n        this.name = \"AggregateError\";\n        this.errors = errors;\n    }\n}\nmodule.exports = {\n    AggregateError,\n    kEmptyObject: Object.freeze({}),\n    once (callback) {\n        let called = false;\n        return function(...args) {\n            if (called) {\n                return;\n            }\n            called = true;\n            callback.apply(this, args);\n        };\n    },\n    createDeferredPromise: function() {\n        let resolve;\n        let reject;\n        // eslint-disable-next-line promise/param-names\n        const promise = new Promise((res, rej)=>{\n            resolve = res;\n            reject = rej;\n        });\n        return {\n            promise,\n            resolve,\n            reject\n        };\n    },\n    promisify (fn) {\n        return new Promise((resolve, reject)=>{\n            fn((err, ...args)=>{\n                if (err) {\n                    return reject(err);\n                }\n                return resolve(...args);\n            });\n        });\n    },\n    debuglog () {\n        return function() {};\n    },\n    format (format, ...args) {\n        // Simplified version of https://nodejs.org/api/util.html#utilformatformat-args\n        return format.replace(/%([sdifj])/g, function(...[_unused, type]) {\n            const replacement = args.shift();\n            if (type === \"f\") {\n                return replacement.toFixed(6);\n            } else if (type === \"j\") {\n                return JSON.stringify(replacement);\n            } else if (type === \"s\" && typeof replacement === \"object\") {\n                const ctor = replacement.constructor !== Object ? replacement.constructor.name : \"\";\n                return `${ctor} {}`.trim();\n            } else {\n                return replacement.toString();\n            }\n        });\n    },\n    inspect (value) {\n        // Vastly simplified version of https://nodejs.org/api/util.html#utilinspectobject-options\n        switch(typeof value){\n            case \"string\":\n                if (value.includes(\"'\")) {\n                    if (!value.includes('\"')) {\n                        return `\"${value}\"`;\n                    } else if (!value.includes(\"`\") && !value.includes(\"${\")) {\n                        return `\\`${value}\\``;\n                    }\n                }\n                return `'${value}'`;\n            case \"number\":\n                if (isNaN(value)) {\n                    return \"NaN\";\n                } else if (Object.is(value, -0)) {\n                    return String(value);\n                }\n                return value;\n            case \"bigint\":\n                return `${String(value)}n`;\n            case \"boolean\":\n            case \"undefined\":\n                return String(value);\n            case \"object\":\n                return \"{}\";\n        }\n    },\n    types: {\n        isAsyncFunction (fn) {\n            return fn instanceof AsyncFunction;\n        },\n        isArrayBufferView (arr) {\n            return ArrayBuffer.isView(arr);\n        }\n    },\n    isBlob\n};\nmodule.exports.promisify.custom = Symbol.for(\"nodejs.util.promisify.custom\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream.js ***!
  \*********************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("/* replacement start */ const { Buffer } = __webpack_require__(/*! buffer */ \"buffer\");\n\"use strict\";\nconst { ObjectDefineProperty, ObjectKeys, ReflectApply } = __webpack_require__(/*! ./ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst { promisify: { custom: customPromisify } } = __webpack_require__(/*! ./ours/util */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/util.js\");\nconst { streamReturningOperators, promiseReturningOperators } = __webpack_require__(/*! ./internal/streams/operators */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/operators.js\");\nconst { codes: { ERR_ILLEGAL_CONSTRUCTOR } } = __webpack_require__(/*! ./ours/errors */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/errors.js\");\nconst compose = __webpack_require__(/*! ./internal/streams/compose */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/compose.js\");\nconst { pipeline } = __webpack_require__(/*! ./internal/streams/pipeline */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/pipeline.js\");\nconst { destroyer } = __webpack_require__(/*! ./internal/streams/destroy */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/destroy.js\");\nconst eos = __webpack_require__(/*! ./internal/streams/end-of-stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\nconst internalBuffer = {};\nconst promises = __webpack_require__(/*! ./stream/promises */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream/promises.js\");\nconst utils = __webpack_require__(/*! ./internal/streams/utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\");\nconst Stream = module.exports = __webpack_require__(/*! ./internal/streams/legacy */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/legacy.js\").Stream;\nStream.isDisturbed = utils.isDisturbed;\nStream.isErrored = utils.isErrored;\nStream.isReadable = utils.isReadable;\nStream.Readable = __webpack_require__(/*! ./internal/streams/readable */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/readable.js\");\nfor (const key of ObjectKeys(streamReturningOperators)){\n    const op = streamReturningOperators[key];\n    function fn(...args) {\n        if (new.target) {\n            throw ERR_ILLEGAL_CONSTRUCTOR();\n        }\n        return Stream.Readable.from(ReflectApply(op, this, args));\n    }\n    ObjectDefineProperty(fn, \"name\", {\n        __proto__: null,\n        value: op.name\n    });\n    ObjectDefineProperty(fn, \"length\", {\n        __proto__: null,\n        value: op.length\n    });\n    ObjectDefineProperty(Stream.Readable.prototype, key, {\n        __proto__: null,\n        value: fn,\n        enumerable: false,\n        configurable: true,\n        writable: true\n    });\n}\nfor (const key of ObjectKeys(promiseReturningOperators)){\n    const op = promiseReturningOperators[key];\n    function fn1(...args) {\n        if (new.target) {\n            throw ERR_ILLEGAL_CONSTRUCTOR();\n        }\n        return ReflectApply(op, this, args);\n    }\n    ObjectDefineProperty(fn1, \"name\", {\n        __proto__: null,\n        value: op.name\n    });\n    ObjectDefineProperty(fn1, \"length\", {\n        __proto__: null,\n        value: op.length\n    });\n    ObjectDefineProperty(Stream.Readable.prototype, key, {\n        __proto__: null,\n        value: fn1,\n        enumerable: false,\n        configurable: true,\n        writable: true\n    });\n}\nStream.Writable = __webpack_require__(/*! ./internal/streams/writable */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/writable.js\");\nStream.Duplex = __webpack_require__(/*! ./internal/streams/duplex */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/duplex.js\");\nStream.Transform = __webpack_require__(/*! ./internal/streams/transform */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/transform.js\");\nStream.PassThrough = __webpack_require__(/*! ./internal/streams/passthrough */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/passthrough.js\");\nStream.pipeline = pipeline;\nconst { addAbortSignal } = __webpack_require__(/*! ./internal/streams/add-abort-signal */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/add-abort-signal.js\");\nStream.addAbortSignal = addAbortSignal;\nStream.finished = eos;\nStream.destroy = destroyer;\nStream.compose = compose;\nObjectDefineProperty(Stream, \"promises\", {\n    __proto__: null,\n    configurable: true,\n    enumerable: true,\n    get () {\n        return promises;\n    }\n});\nObjectDefineProperty(pipeline, customPromisify, {\n    __proto__: null,\n    enumerable: true,\n    get () {\n        return promises.pipeline;\n    }\n});\nObjectDefineProperty(eos, customPromisify, {\n    __proto__: null,\n    enumerable: true,\n    get () {\n        return promises.finished;\n    }\n});\n// Backwards-compat with node 0.4.x\nStream.Stream = Stream;\nStream._isUint8Array = function isUint8Array(value) {\n    return value instanceof Uint8Array;\n};\nStream._uint8ArrayToBuffer = function _uint8ArrayToBuffer(chunk) {\n    return Buffer.from(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream/promises.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream/promises.js ***!
  \******************************************************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

"use strict";
eval("\nconst { ArrayPrototypePop, Promise } = __webpack_require__(/*! ../ours/primordials */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/ours/primordials.js\");\nconst { isIterable, isNodeStream, isWebStream } = __webpack_require__(/*! ../internal/streams/utils */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/utils.js\");\nconst { pipelineImpl: pl } = __webpack_require__(/*! ../internal/streams/pipeline */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/pipeline.js\");\nconst { finished } = __webpack_require__(/*! ../internal/streams/end-of-stream */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/internal/streams/end-of-stream.js\");\n__webpack_require__(/*! ../../lib/stream.js */ \"(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream.js\");\nfunction pipeline(...streams) {\n    return new Promise((resolve, reject)=>{\n        let signal;\n        let end;\n        const lastArg = streams[streams.length - 1];\n        if (lastArg && typeof lastArg === \"object\" && !isNodeStream(lastArg) && !isIterable(lastArg) && !isWebStream(lastArg)) {\n            const options = ArrayPrototypePop(streams);\n            signal = options.signal;\n            end = options.end;\n        }\n        pl(streams, (err, value)=>{\n            if (err) {\n                reject(err);\n            } else {\n                resolve(value);\n            }\n        }, {\n            signal,\n            end\n        });\n    });\n}\nmodule.exports = {\n    finished,\n    pipeline\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9iYXNlLWNvbnRyb2xsZXJzL25vZGVfbW9kdWxlcy9yZWFkYWJsZS1zdHJlYW0vbGliL3N0cmVhbS9wcm9taXNlcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLE1BQU0sRUFBRUEsaUJBQWlCLEVBQUVDLE9BQU8sRUFBRSxHQUFHQyxtQkFBT0EsQ0FBQztBQUMvQyxNQUFNLEVBQUVDLFVBQVUsRUFBRUMsWUFBWSxFQUFFQyxXQUFXLEVBQUUsR0FBR0gsbUJBQU9BLENBQUM7QUFDMUQsTUFBTSxFQUFFSSxjQUFjQyxFQUFFLEVBQUUsR0FBR0wsbUJBQU9BLENBQUM7QUFDckMsTUFBTSxFQUFFTSxRQUFRLEVBQUUsR0FBR04sbUJBQU9BLENBQUM7QUFDN0JBLG1CQUFPQSxDQUFDO0FBQ1IsU0FBU08sU0FBUyxHQUFHQyxPQUFPO0lBQzFCLE9BQU8sSUFBSVQsUUFBUSxDQUFDVSxTQUFTQztRQUMzQixJQUFJQztRQUNKLElBQUlDO1FBQ0osTUFBTUMsVUFBVUwsT0FBTyxDQUFDQSxRQUFRTSxNQUFNLEdBQUcsRUFBRTtRQUMzQyxJQUNFRCxXQUNBLE9BQU9BLFlBQVksWUFDbkIsQ0FBQ1gsYUFBYVcsWUFDZCxDQUFDWixXQUFXWSxZQUNaLENBQUNWLFlBQVlVLFVBQ2I7WUFDQSxNQUFNRSxVQUFVakIsa0JBQWtCVTtZQUNsQ0csU0FBU0ksUUFBUUosTUFBTTtZQUN2QkMsTUFBTUcsUUFBUUgsR0FBRztRQUNuQjtRQUNBUCxHQUNFRyxTQUNBLENBQUNRLEtBQUtDO1lBQ0osSUFBSUQsS0FBSztnQkFDUE4sT0FBT007WUFDVCxPQUFPO2dCQUNMUCxRQUFRUTtZQUNWO1FBQ0YsR0FDQTtZQUNFTjtZQUNBQztRQUNGO0lBRUo7QUFDRjtBQUNBTSxPQUFPQyxPQUFPLEdBQUc7SUFDZmI7SUFDQUM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMvbm9kZV9tb2R1bGVzL3JlYWRhYmxlLXN0cmVhbS9saWIvc3RyZWFtL3Byb21pc2VzLmpzP2U4NTQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IHsgQXJyYXlQcm90b3R5cGVQb3AsIFByb21pc2UgfSA9IHJlcXVpcmUoJy4uL291cnMvcHJpbW9yZGlhbHMnKVxuY29uc3QgeyBpc0l0ZXJhYmxlLCBpc05vZGVTdHJlYW0sIGlzV2ViU3RyZWFtIH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9zdHJlYW1zL3V0aWxzJylcbmNvbnN0IHsgcGlwZWxpbmVJbXBsOiBwbCB9ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWwvc3RyZWFtcy9waXBlbGluZScpXG5jb25zdCB7IGZpbmlzaGVkIH0gPSByZXF1aXJlKCcuLi9pbnRlcm5hbC9zdHJlYW1zL2VuZC1vZi1zdHJlYW0nKVxucmVxdWlyZSgnLi4vLi4vbGliL3N0cmVhbS5qcycpXG5mdW5jdGlvbiBwaXBlbGluZSguLi5zdHJlYW1zKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgbGV0IHNpZ25hbFxuICAgIGxldCBlbmRcbiAgICBjb25zdCBsYXN0QXJnID0gc3RyZWFtc1tzdHJlYW1zLmxlbmd0aCAtIDFdXG4gICAgaWYgKFxuICAgICAgbGFzdEFyZyAmJlxuICAgICAgdHlwZW9mIGxhc3RBcmcgPT09ICdvYmplY3QnICYmXG4gICAgICAhaXNOb2RlU3RyZWFtKGxhc3RBcmcpICYmXG4gICAgICAhaXNJdGVyYWJsZShsYXN0QXJnKSAmJlxuICAgICAgIWlzV2ViU3RyZWFtKGxhc3RBcmcpXG4gICAgKSB7XG4gICAgICBjb25zdCBvcHRpb25zID0gQXJyYXlQcm90b3R5cGVQb3Aoc3RyZWFtcylcbiAgICAgIHNpZ25hbCA9IG9wdGlvbnMuc2lnbmFsXG4gICAgICBlbmQgPSBvcHRpb25zLmVuZFxuICAgIH1cbiAgICBwbChcbiAgICAgIHN0cmVhbXMsXG4gICAgICAoZXJyLCB2YWx1ZSkgPT4ge1xuICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgcmVqZWN0KGVycilcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKHZhbHVlKVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAge1xuICAgICAgICBzaWduYWwsXG4gICAgICAgIGVuZFxuICAgICAgfVxuICAgIClcbiAgfSlcbn1cbm1vZHVsZS5leHBvcnRzID0ge1xuICBmaW5pc2hlZCxcbiAgcGlwZWxpbmVcbn1cbiJdLCJuYW1lcyI6WyJBcnJheVByb3RvdHlwZVBvcCIsIlByb21pc2UiLCJyZXF1aXJlIiwiaXNJdGVyYWJsZSIsImlzTm9kZVN0cmVhbSIsImlzV2ViU3RyZWFtIiwicGlwZWxpbmVJbXBsIiwicGwiLCJmaW5pc2hlZCIsInBpcGVsaW5lIiwic3RyZWFtcyIsInJlc29sdmUiLCJyZWplY3QiLCJzaWduYWwiLCJlbmQiLCJsYXN0QXJnIiwibGVuZ3RoIiwib3B0aW9ucyIsImVyciIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/base-controllers/node_modules/readable-stream/lib/stream/promises.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BroadcastChannel: () => (/* binding */ BroadcastChannel),\n/* harmony export */   OPEN_BROADCAST_CHANNELS: () => (/* binding */ OPEN_BROADCAST_CHANNELS),\n/* harmony export */   enforceOptions: () => (/* binding */ enforceOptions)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./util.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/* harmony import */ var _method_chooser_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./method-chooser.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js\");\n/* harmony import */ var _options_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./options.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n\n\n\n/**\n * Contains all open channels,\n * used in tests to ensure everything is closed.\n */ var OPEN_BROADCAST_CHANNELS = new Set();\nvar lastId = 0;\nvar BroadcastChannel = function BroadcastChannel(name, options) {\n    // identifier of the channel to debug stuff\n    this.id = lastId++;\n    OPEN_BROADCAST_CHANNELS.add(this);\n    this.name = name;\n    if (ENFORCED_OPTIONS) {\n        options = ENFORCED_OPTIONS;\n    }\n    this.options = (0,_options_js__WEBPACK_IMPORTED_MODULE_0__.fillOptionsWithDefaults)(options);\n    this.method = (0,_method_chooser_js__WEBPACK_IMPORTED_MODULE_1__.chooseMethod)(this.options);\n    // isListening\n    this._iL = false;\n    /**\n   * _onMessageListener\n   * setting onmessage twice,\n   * will overwrite the first listener\n   */ this._onML = null;\n    /**\n   * _addEventListeners\n   */ this._addEL = {\n        message: [],\n        internal: []\n    };\n    /**\n   * Unsend message promises\n   * where the sending is still in progress\n   * @type {Set<Promise>}\n   */ this._uMP = new Set();\n    /**\n   * _beforeClose\n   * array of promises that will be awaited\n   * before the channel is closed\n   */ this._befC = [];\n    /**\n   * _preparePromise\n   */ this._prepP = null;\n    _prepareChannel(this);\n};\n// STATICS\n/**\n * used to identify if someone overwrites\n * window.BroadcastChannel with this\n * See methods/native.js\n */ BroadcastChannel._pubkey = true;\n/**\n * if set, this method is enforced,\n * no mather what the options are\n */ var ENFORCED_OPTIONS;\nfunction enforceOptions(options) {\n    ENFORCED_OPTIONS = options;\n}\n// PROTOTYPE\nBroadcastChannel.prototype = {\n    postMessage: function postMessage(msg) {\n        if (this.closed) {\n            throw new Error(\"BroadcastChannel.postMessage(): \" + \"Cannot post message after channel has closed \" + /**\n       * In the past when this error appeared, it was realy hard to debug.\n       * So now we log the msg together with the error so it at least\n       * gives some clue about where in your application this happens.\n       */ JSON.stringify(msg));\n        }\n        return _post(this, \"message\", msg);\n    },\n    postInternal: function postInternal(msg) {\n        return _post(this, \"internal\", msg);\n    },\n    set onmessage (fn){\n        var time = this.method.microSeconds();\n        var listenObj = {\n            time: time,\n            fn: fn\n        };\n        _removeListenerObject(this, \"message\", this._onML);\n        if (fn && typeof fn === \"function\") {\n            this._onML = listenObj;\n            _addListenerObject(this, \"message\", listenObj);\n        } else {\n            this._onML = null;\n        }\n    },\n    addEventListener: function addEventListener(type, fn1) {\n        var time = this.method.microSeconds();\n        var listenObj = {\n            time: time,\n            fn: fn1\n        };\n        _addListenerObject(this, type, listenObj);\n    },\n    removeEventListener: function removeEventListener(type, fn1) {\n        var obj = this._addEL[type].find(function(obj) {\n            return obj.fn === fn1;\n        });\n        _removeListenerObject(this, type, obj);\n    },\n    close: function close() {\n        var _this = this;\n        if (this.closed) {\n            return;\n        }\n        OPEN_BROADCAST_CHANNELS[\"delete\"](this);\n        this.closed = true;\n        var awaitPrepare = this._prepP ? this._prepP : _util_js__WEBPACK_IMPORTED_MODULE_2__.PROMISE_RESOLVED_VOID;\n        this._onML = null;\n        this._addEL.message = [];\n        return awaitPrepare// wait until all current sending are processed\n        .then(function() {\n            return Promise.all(Array.from(_this._uMP));\n        })// run before-close hooks\n        .then(function() {\n            return Promise.all(_this._befC.map(function(fn1) {\n                return fn1();\n            }));\n        })// close the channel\n        .then(function() {\n            return _this.method.close(_this._state);\n        });\n    },\n    get type () {\n        return this.method.type;\n    },\n    get isClosed () {\n        return this.closed;\n    }\n};\n/**\n * Post a message over the channel\n * @returns {Promise} that resolved when the message sending is done\n */ function _post(broadcastChannel, type, msg) {\n    var time = broadcastChannel.method.microSeconds();\n    var msgObj = {\n        time: time,\n        type: type,\n        data: msg\n    };\n    var awaitPrepare = broadcastChannel._prepP ? broadcastChannel._prepP : _util_js__WEBPACK_IMPORTED_MODULE_2__.PROMISE_RESOLVED_VOID;\n    return awaitPrepare.then(function() {\n        var sendPromise = broadcastChannel.method.postMessage(broadcastChannel._state, msgObj);\n        // add/remove to unsend messages list\n        broadcastChannel._uMP.add(sendPromise);\n        sendPromise[\"catch\"]().then(function() {\n            return broadcastChannel._uMP[\"delete\"](sendPromise);\n        });\n        return sendPromise;\n    });\n}\nfunction _prepareChannel(channel) {\n    var maybePromise = channel.method.create(channel.name, channel.options);\n    if ((0,_util_js__WEBPACK_IMPORTED_MODULE_2__.isPromise)(maybePromise)) {\n        channel._prepP = maybePromise;\n        maybePromise.then(function(s) {\n            // used in tests to simulate slow runtime\n            /*if (channel.options.prepareDelay) {\n           await new Promise(res => setTimeout(res, this.options.prepareDelay));\n      }*/ channel._state = s;\n        });\n    } else {\n        channel._state = maybePromise;\n    }\n}\nfunction _hasMessageListeners(channel) {\n    if (channel._addEL.message.length > 0) return true;\n    if (channel._addEL.internal.length > 0) return true;\n    return false;\n}\nfunction _addListenerObject(channel, type, obj) {\n    channel._addEL[type].push(obj);\n    _startListening(channel);\n}\nfunction _removeListenerObject(channel, type, obj) {\n    channel._addEL[type] = channel._addEL[type].filter(function(o) {\n        return o !== obj;\n    });\n    _stopListening(channel);\n}\nfunction _startListening(channel) {\n    if (!channel._iL && _hasMessageListeners(channel)) {\n        // someone is listening, start subscribing\n        var listenerFn = function listenerFn(msgObj) {\n            channel._addEL[msgObj.type].forEach(function(listenerObject) {\n                /**\n         * Getting the current time in JavaScript has no good precision.\n         * So instead of only listening to events that happend 'after' the listener\n         * was added, we also listen to events that happended 100ms before it.\n         * This ensures that when another process, like a WebWorker, sends events\n         * we do not miss them out because their timestamp is a bit off compared to the main process.\n         * Not doing this would make messages missing when we send data directly after subscribing and awaiting a response.\n         * @link https://johnresig.com/blog/accuracy-of-javascript-time/\n         */ var hundredMsInMicro = 100 * 1000;\n                var minMessageTime = listenerObject.time - hundredMsInMicro;\n                if (msgObj.time >= minMessageTime) {\n                    listenerObject.fn(msgObj.data);\n                } else if (channel.method.type === \"server\") {\n                    // server msg might lag based on connection.\n                    listenerObject.fn(msgObj.data);\n                }\n            });\n        };\n        var time = channel.method.microSeconds();\n        if (channel._prepP) {\n            channel._prepP.then(function() {\n                channel._iL = true;\n                channel.method.onMessage(channel._state, listenerFn, time);\n            });\n        } else {\n            channel._iL = true;\n            channel.method.onMessage(channel._state, listenerFn, time);\n        }\n    }\n}\nfunction _stopListening(channel) {\n    if (channel._iL && !_hasMessageListeners(channel)) {\n        // noone is listening, stop subscribing\n        channel._iL = false;\n        var time = channel.method.microSeconds();\n        channel.method.onMessage(channel._state, null, time);\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/broadcast-channel.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   chooseMethod: () => (/* binding */ chooseMethod)\n/* harmony export */ });\n/* harmony import */ var _methods_native_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./methods/native.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js\");\n/* harmony import */ var _methods_indexed_db_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./methods/indexed-db.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js\");\n/* harmony import */ var _methods_localstorage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./methods/localstorage.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js\");\n/* harmony import */ var _methods_server_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./methods/server.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js\");\n/* harmony import */ var _methods_simulate_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./methods/simulate.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js\");\n\n\n\n\n\n// order is important\nvar METHODS = [\n    _methods_native_js__WEBPACK_IMPORTED_MODULE_0__[\"default\"],\n    // fastest\n    _methods_indexed_db_js__WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n    _methods_localstorage_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    _methods_server_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"]\n];\nfunction chooseMethod(options) {\n    var chooseMethods = [].concat(options.methods, METHODS).filter(Boolean);\n    // directly chosen\n    if (options.type) {\n        if (options.type === \"simulate\") {\n            // only use simulate-method if directly chosen\n            return _methods_simulate_js__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n        }\n        var ret = chooseMethods.find(function(m) {\n            return m.type === options.type;\n        });\n        if (!ret) throw new Error(\"method-type \" + options.type + \" not found\");\n        else return ret;\n    }\n    /**\n   * if no webworker support is needed,\n   * remove idb from the list so that localstorage is been chosen\n   */ if (!options.webWorkerSupport) {\n        chooseMethods = chooseMethods.filter(function(m) {\n            return m.type !== \"idb\";\n        });\n    }\n    var useMethod = chooseMethods.find(function(method) {\n        return method.canBeUsed(options);\n    });\n    if (!useMethod) throw new Error(\"No useable method found in \" + JSON.stringify(METHODS.map(function(m) {\n        return m.type;\n    })));\n    else return useMethod;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2QtY2hvb3Nlci5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0M7QUFDTTtBQUNNO0FBQ1o7QUFDSTtBQUVuRCxxQkFBcUI7QUFDckIsSUFBSUssVUFBVTtJQUFDTCwwREFBWUE7SUFDM0IsVUFBVTtJQUNWQyw4REFBY0E7SUFBRUMsZ0VBQWtCQTtJQUFFQywwREFBWUE7Q0FBQztBQUMxQyxTQUFTRyxhQUFhQyxPQUFPO0lBQ2xDLElBQUlDLGdCQUFnQixFQUFFLENBQUNDLE1BQU0sQ0FBQ0YsUUFBUUcsT0FBTyxFQUFFTCxTQUFTTSxNQUFNLENBQUNDO0lBRS9ELGtCQUFrQjtJQUNsQixJQUFJTCxRQUFRTSxJQUFJLEVBQUU7UUFDaEIsSUFBSU4sUUFBUU0sSUFBSSxLQUFLLFlBQVk7WUFDL0IsOENBQThDO1lBQzlDLE9BQU9ULDREQUFjQTtRQUN2QjtRQUNBLElBQUlVLE1BQU1OLGNBQWNPLElBQUksQ0FBQyxTQUFVQyxDQUFDO1lBQ3RDLE9BQU9BLEVBQUVILElBQUksS0FBS04sUUFBUU0sSUFBSTtRQUNoQztRQUNBLElBQUksQ0FBQ0MsS0FBSyxNQUFNLElBQUlHLE1BQU0saUJBQWlCVixRQUFRTSxJQUFJLEdBQUc7YUFBbUIsT0FBT0M7SUFDdEY7SUFFQTs7O0dBR0MsR0FDRCxJQUFJLENBQUNQLFFBQVFXLGdCQUFnQixFQUFFO1FBQzdCVixnQkFBZ0JBLGNBQWNHLE1BQU0sQ0FBQyxTQUFVSyxDQUFDO1lBQzlDLE9BQU9BLEVBQUVILElBQUksS0FBSztRQUNwQjtJQUNGO0lBQ0EsSUFBSU0sWUFBWVgsY0FBY08sSUFBSSxDQUFDLFNBQVVLLE1BQU07UUFDakQsT0FBT0EsT0FBT0MsU0FBUyxDQUFDZDtJQUMxQjtJQUNBLElBQUksQ0FBQ1ksV0FBVyxNQUFNLElBQUlGLE1BQU0sZ0NBQWdDSyxLQUFLQyxTQUFTLENBQUNsQixRQUFRbUIsR0FBRyxDQUFDLFNBQVVSLENBQUM7UUFDcEcsT0FBT0EsRUFBRUgsSUFBSTtJQUNmO1NBQVUsT0FBT007QUFDbkIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2QtY2hvb3Nlci5qcz8zNjgxIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBOYXRpdmVNZXRob2QgZnJvbSAnLi9tZXRob2RzL25hdGl2ZS5qcyc7XG5pbXBvcnQgSW5kZXhlRGJNZXRob2QgZnJvbSAnLi9tZXRob2RzL2luZGV4ZWQtZGIuanMnO1xuaW1wb3J0IExvY2Fsc3RvcmFnZU1ldGhvZCBmcm9tICcuL21ldGhvZHMvbG9jYWxzdG9yYWdlLmpzJztcbmltcG9ydCBTZXJ2ZXJNZXRob2QgZnJvbSAnLi9tZXRob2RzL3NlcnZlci5qcyc7XG5pbXBvcnQgU2ltdWxhdGVNZXRob2QgZnJvbSAnLi9tZXRob2RzL3NpbXVsYXRlLmpzJztcblxuLy8gb3JkZXIgaXMgaW1wb3J0YW50XG52YXIgTUVUSE9EUyA9IFtOYXRpdmVNZXRob2QsXG4vLyBmYXN0ZXN0XG5JbmRleGVEYk1ldGhvZCwgTG9jYWxzdG9yYWdlTWV0aG9kLCBTZXJ2ZXJNZXRob2RdO1xuZXhwb3J0IGZ1bmN0aW9uIGNob29zZU1ldGhvZChvcHRpb25zKSB7XG4gIHZhciBjaG9vc2VNZXRob2RzID0gW10uY29uY2F0KG9wdGlvbnMubWV0aG9kcywgTUVUSE9EUykuZmlsdGVyKEJvb2xlYW4pO1xuXG4gIC8vIGRpcmVjdGx5IGNob3NlblxuICBpZiAob3B0aW9ucy50eXBlKSB7XG4gICAgaWYgKG9wdGlvbnMudHlwZSA9PT0gJ3NpbXVsYXRlJykge1xuICAgICAgLy8gb25seSB1c2Ugc2ltdWxhdGUtbWV0aG9kIGlmIGRpcmVjdGx5IGNob3NlblxuICAgICAgcmV0dXJuIFNpbXVsYXRlTWV0aG9kO1xuICAgIH1cbiAgICB2YXIgcmV0ID0gY2hvb3NlTWV0aG9kcy5maW5kKGZ1bmN0aW9uIChtKSB7XG4gICAgICByZXR1cm4gbS50eXBlID09PSBvcHRpb25zLnR5cGU7XG4gICAgfSk7XG4gICAgaWYgKCFyZXQpIHRocm93IG5ldyBFcnJvcignbWV0aG9kLXR5cGUgJyArIG9wdGlvbnMudHlwZSArICcgbm90IGZvdW5kJyk7ZWxzZSByZXR1cm4gcmV0O1xuICB9XG5cbiAgLyoqXG4gICAqIGlmIG5vIHdlYndvcmtlciBzdXBwb3J0IGlzIG5lZWRlZCxcbiAgICogcmVtb3ZlIGlkYiBmcm9tIHRoZSBsaXN0IHNvIHRoYXQgbG9jYWxzdG9yYWdlIGlzIGJlZW4gY2hvc2VuXG4gICAqL1xuICBpZiAoIW9wdGlvbnMud2ViV29ya2VyU3VwcG9ydCkge1xuICAgIGNob29zZU1ldGhvZHMgPSBjaG9vc2VNZXRob2RzLmZpbHRlcihmdW5jdGlvbiAobSkge1xuICAgICAgcmV0dXJuIG0udHlwZSAhPT0gJ2lkYic7XG4gICAgfSk7XG4gIH1cbiAgdmFyIHVzZU1ldGhvZCA9IGNob29zZU1ldGhvZHMuZmluZChmdW5jdGlvbiAobWV0aG9kKSB7XG4gICAgcmV0dXJuIG1ldGhvZC5jYW5CZVVzZWQob3B0aW9ucyk7XG4gIH0pO1xuICBpZiAoIXVzZU1ldGhvZCkgdGhyb3cgbmV3IEVycm9yKFwiTm8gdXNlYWJsZSBtZXRob2QgZm91bmQgaW4gXCIgKyBKU09OLnN0cmluZ2lmeShNRVRIT0RTLm1hcChmdW5jdGlvbiAobSkge1xuICAgIHJldHVybiBtLnR5cGU7XG4gIH0pKSk7ZWxzZSByZXR1cm4gdXNlTWV0aG9kO1xufSJdLCJuYW1lcyI6WyJOYXRpdmVNZXRob2QiLCJJbmRleGVEYk1ldGhvZCIsIkxvY2Fsc3RvcmFnZU1ldGhvZCIsIlNlcnZlck1ldGhvZCIsIlNpbXVsYXRlTWV0aG9kIiwiTUVUSE9EUyIsImNob29zZU1ldGhvZCIsIm9wdGlvbnMiLCJjaG9vc2VNZXRob2RzIiwiY29uY2F0IiwibWV0aG9kcyIsImZpbHRlciIsIkJvb2xlYW4iLCJ0eXBlIiwicmV0IiwiZmluZCIsIm0iLCJFcnJvciIsIndlYldvcmtlclN1cHBvcnQiLCJ1c2VNZXRob2QiLCJtZXRob2QiLCJjYW5CZVVzZWQiLCJKU09OIiwic3RyaW5naWZ5IiwibWFwIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/method-chooser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRANSACTION_SETTINGS: () => (/* binding */ TRANSACTION_SETTINGS),\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   cleanOldMessages: () => (/* binding */ cleanOldMessages),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   commitIndexedDBTransaction: () => (/* binding */ commitIndexedDBTransaction),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   createDatabase: () => (/* binding */ createDatabase),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getAllMessages: () => (/* binding */ getAllMessages),\n/* harmony export */   getIdb: () => (/* binding */ getIdb),\n/* harmony export */   getMessagesHigherThan: () => (/* binding */ getMessagesHigherThan),\n/* harmony export */   getOldMessages: () => (/* binding */ getOldMessages),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   removeMessagesById: () => (/* binding */ removeMessagesById),\n/* harmony export */   type: () => (/* binding */ type),\n/* harmony export */   writeMessage: () => (/* binding */ writeMessage)\n/* harmony export */ });\n/* harmony import */ var _util_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util.js */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/es/index.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../options */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n/**\n * this method uses indexeddb to store the messages\n * There is currently no observerAPI for idb\n * @link https://github.com/w3c/IndexedDB/issues/51\n *\n * When working on this, ensure to use these performance optimizations:\n * @link https://rxdb.info/slow-indexeddb.html\n */ \nvar microSeconds = _util_js__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\n\n\nvar DB_PREFIX = \"pubkey.broadcast-channel-0-\";\nvar OBJECT_STORE_ID = \"messages\";\n/**\n * Use relaxed durability for faster performance on all transactions.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */ var TRANSACTION_SETTINGS = {\n    durability: \"relaxed\"\n};\nvar type = \"idb\";\nfunction getIdb() {\n    if (typeof indexedDB !== \"undefined\") return indexedDB;\n    if (false) {}\n    return false;\n}\n/**\n * If possible, we should explicitly commit IndexedDB transactions\n * for better performance.\n * @link https://nolanlawson.com/2021/08/22/speeding-up-indexeddb-reads-and-writes/\n */ function commitIndexedDBTransaction(tx) {\n    if (tx.commit) {\n        tx.commit();\n    }\n}\nfunction createDatabase(channelName) {\n    var IndexedDB = getIdb();\n    // create table\n    var dbName = DB_PREFIX + channelName;\n    /**\n   * All IndexedDB databases are opened without version\n   * because it is a bit faster, especially on firefox\n   * @link http://nparashuram.com/IndexedDB/perf/#Open%20Database%20with%20version\n   */ var openRequest = IndexedDB.open(dbName);\n    openRequest.onupgradeneeded = function(ev) {\n        var db = ev.target.result;\n        db.createObjectStore(OBJECT_STORE_ID, {\n            keyPath: \"id\",\n            autoIncrement: true\n        });\n    };\n    var dbPromise = new Promise(function(res, rej) {\n        openRequest.onerror = function(ev) {\n            return rej(ev);\n        };\n        openRequest.onsuccess = function() {\n            res(openRequest.result);\n        };\n    });\n    return dbPromise;\n}\n/**\n * writes the new message to the database\n * so other readers can find it\n */ function writeMessage(db, readerUuid, messageJson) {\n    var time = new Date().getTime();\n    var writeObject = {\n        uuid: readerUuid,\n        time: time,\n        data: messageJson\n    };\n    var tx = db.transaction([\n        OBJECT_STORE_ID\n    ], \"readwrite\", TRANSACTION_SETTINGS);\n    return new Promise(function(res, rej) {\n        tx.oncomplete = function() {\n            return res();\n        };\n        tx.onerror = function(ev) {\n            return rej(ev);\n        };\n        var objectStore = tx.objectStore(OBJECT_STORE_ID);\n        objectStore.add(writeObject);\n        commitIndexedDBTransaction(tx);\n    });\n}\nfunction getAllMessages(db) {\n    var tx = db.transaction(OBJECT_STORE_ID, \"readonly\", TRANSACTION_SETTINGS);\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    var ret = [];\n    return new Promise(function(res) {\n        objectStore.openCursor().onsuccess = function(ev) {\n            var cursor = ev.target.result;\n            if (cursor) {\n                ret.push(cursor.value);\n                //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n                cursor[\"continue\"]();\n            } else {\n                commitIndexedDBTransaction(tx);\n                res(ret);\n            }\n        };\n    });\n}\nfunction getMessagesHigherThan(db, lastCursorId) {\n    var tx = db.transaction(OBJECT_STORE_ID, \"readonly\", TRANSACTION_SETTINGS);\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    var ret = [];\n    var keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n    /**\n   * Optimization shortcut,\n   * if getAll() can be used, do not use a cursor.\n   * @link https://rxdb.info/slow-indexeddb.html\n   */ if (objectStore.getAll) {\n        var getAllRequest = objectStore.getAll(keyRangeValue);\n        return new Promise(function(res, rej) {\n            getAllRequest.onerror = function(err) {\n                return rej(err);\n            };\n            getAllRequest.onsuccess = function(e) {\n                res(e.target.result);\n            };\n        });\n    }\n    function openCursor() {\n        // Occasionally Safari will fail on IDBKeyRange.bound, this\n        // catches that error, having it open the cursor to the first\n        // item. When it gets data it will advance to the desired key.\n        try {\n            keyRangeValue = IDBKeyRange.bound(lastCursorId + 1, Infinity);\n            return objectStore.openCursor(keyRangeValue);\n        } catch (e) {\n            return objectStore.openCursor();\n        }\n    }\n    return new Promise(function(res, rej) {\n        var openCursorRequest = openCursor();\n        openCursorRequest.onerror = function(err) {\n            return rej(err);\n        };\n        openCursorRequest.onsuccess = function(ev) {\n            var cursor = ev.target.result;\n            if (cursor) {\n                if (cursor.value.id < lastCursorId + 1) {\n                    cursor[\"continue\"](lastCursorId + 1);\n                } else {\n                    ret.push(cursor.value);\n                    cursor[\"continue\"]();\n                }\n            } else {\n                commitIndexedDBTransaction(tx);\n                res(ret);\n            }\n        };\n    });\n}\nfunction removeMessagesById(db, ids) {\n    var tx = db.transaction([\n        OBJECT_STORE_ID\n    ], \"readwrite\", TRANSACTION_SETTINGS);\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    return Promise.all(ids.map(function(id) {\n        var deleteRequest = objectStore[\"delete\"](id);\n        return new Promise(function(res) {\n            deleteRequest.onsuccess = function() {\n                return res();\n            };\n        });\n    }));\n}\nfunction getOldMessages(db, ttl) {\n    var olderThen = new Date().getTime() - ttl;\n    var tx = db.transaction(OBJECT_STORE_ID, \"readonly\", TRANSACTION_SETTINGS);\n    var objectStore = tx.objectStore(OBJECT_STORE_ID);\n    var ret = [];\n    return new Promise(function(res) {\n        objectStore.openCursor().onsuccess = function(ev) {\n            var cursor = ev.target.result;\n            if (cursor) {\n                var msgObk = cursor.value;\n                if (msgObk.time < olderThen) {\n                    ret.push(msgObk);\n                    //alert(\"Name for SSN \" + cursor.key + \" is \" + cursor.value.name);\n                    cursor[\"continue\"]();\n                } else {\n                    // no more old messages,\n                    commitIndexedDBTransaction(tx);\n                    res(ret);\n                    return;\n                }\n            } else {\n                res(ret);\n            }\n        };\n    });\n}\nfunction cleanOldMessages(db, ttl) {\n    return getOldMessages(db, ttl).then(function(tooOld) {\n        return removeMessagesById(db, tooOld.map(function(msg) {\n            return msg.id;\n        }));\n    });\n}\nfunction create(channelName, options) {\n    options = (0,_options__WEBPACK_IMPORTED_MODULE_1__.fillOptionsWithDefaults)(options);\n    return createDatabase(channelName).then(function(db) {\n        var state = {\n            closed: false,\n            lastCursorId: 0,\n            channelName: channelName,\n            options: options,\n            uuid: (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.randomToken)(),\n            /**\n       * emittedMessagesIds\n       * contains all messages that have been emitted before\n       * @type {ObliviousSet}\n       */ eMIs: new oblivious_set__WEBPACK_IMPORTED_MODULE_2__.ObliviousSet(options.idb.ttl * 2),\n            // ensures we do not read messages in parrallel\n            writeBlockPromise: _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID,\n            messagesCallback: null,\n            readQueuePromises: [],\n            db: db\n        };\n        /**\n     * Handle abrupt closes that do not originate from db.close().\n     * This could happen, for example, if the underlying storage is\n     * removed or if the user clears the database in the browser's\n     * history preferences.\n     */ db.onclose = function() {\n            state.closed = true;\n            if (options.idb.onclose) options.idb.onclose();\n        };\n        /**\n     * if service-workers are used,\n     * we have no 'storage'-event if they post a message,\n     * therefore we also have to set an interval\n     */ _readLoop(state);\n        return state;\n    });\n}\nfunction _readLoop(state) {\n    if (state.closed) return;\n    readNewMessages(state).then(function() {\n        return (0,_util_js__WEBPACK_IMPORTED_MODULE_0__.sleep)(state.options.idb.fallbackInterval);\n    }).then(function() {\n        return _readLoop(state);\n    });\n}\nfunction _filterMessage(msgObj, state) {\n    if (msgObj.uuid === state.uuid) return false; // send by own\n    if (state.eMIs.has(msgObj.id)) return false; // already emitted\n    if (msgObj.data.time < state.messagesCallbackTime) return false; // older then onMessageCallback\n    return true;\n}\n/**\n * reads all new messages from the database and emits them\n */ function readNewMessages(state) {\n    // channel already closed\n    if (state.closed) return _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n    // if no one is listening, we do not need to scan for new messages\n    if (!state.messagesCallback) return _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n    return getMessagesHigherThan(state.db, state.lastCursorId).then(function(newerMessages) {\n        var useMessages = newerMessages/**\n     * there is a bug in iOS where the msgObj can be undefined some times\n     * so we filter them out\n     * @link https://github.com/pubkey/broadcast-channel/issues/19\n     */ .filter(function(msgObj) {\n            return !!msgObj;\n        }).map(function(msgObj) {\n            if (msgObj.id > state.lastCursorId) {\n                state.lastCursorId = msgObj.id;\n            }\n            return msgObj;\n        }).filter(function(msgObj) {\n            return _filterMessage(msgObj, state);\n        }).sort(function(msgObjA, msgObjB) {\n            return msgObjA.time - msgObjB.time;\n        }); // sort by time\n        useMessages.forEach(function(msgObj) {\n            if (state.messagesCallback) {\n                state.eMIs.add(msgObj.id);\n                state.messagesCallback(msgObj.data);\n            }\n        });\n        return _util_js__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n    });\n}\nfunction close(channelState) {\n    channelState.closed = true;\n    channelState.db.close();\n}\nfunction postMessage(channelState, messageJson) {\n    channelState.writeBlockPromise = channelState.writeBlockPromise.then(function() {\n        return writeMessage(channelState.db, channelState.uuid, messageJson);\n    }).then(function() {\n        if ((0,_util_js__WEBPACK_IMPORTED_MODULE_0__.randomInt)(0, 10) === 0) {\n            /* await (do not await) */ cleanOldMessages(channelState.db, channelState.options.idb.ttl);\n        }\n    });\n    return channelState.writeBlockPromise;\n}\nfunction onMessage(channelState, fn, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn;\n    readNewMessages(channelState);\n}\nfunction canBeUsed(options) {\n    if (!options.support3PC) return false;\n    var idb = getIdb();\n    if (!idb) return false;\n    return true;\n}\nfunction averageResponseTime(options) {\n    return options.idb.fallbackInterval * 2;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL2luZGV4ZWQtZGIuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBOzs7Ozs7O0NBT0MsR0FFd0c7QUFDbEcsSUFBSUcsZUFBZUMsa0RBQUtBLENBQUM7QUFDYTtBQUNRO0FBQ3JELElBQUlJLFlBQVk7QUFDaEIsSUFBSUMsa0JBQWtCO0FBRXRCOzs7Q0FHQyxHQUNNLElBQUlDLHVCQUF1QjtJQUNoQ0MsWUFBWTtBQUNkLEVBQUU7QUFDSyxJQUFJQyxPQUFPLE1BQU07QUFDakIsU0FBU0M7SUFDZCxJQUFJLE9BQU9DLGNBQWMsYUFBYSxPQUFPQTtJQUM3QyxJQUFJLEtBQWtCLEVBQWEsRUFJbEM7SUFDRCxPQUFPO0FBQ1Q7QUFFQTs7OztDQUlDLEdBQ00sU0FBU0ssMkJBQTJCQyxFQUFFO0lBQzNDLElBQUlBLEdBQUdDLE1BQU0sRUFBRTtRQUNiRCxHQUFHQyxNQUFNO0lBQ1g7QUFDRjtBQUNPLFNBQVNDLGVBQWVDLFdBQVc7SUFDeEMsSUFBSUMsWUFBWVg7SUFFaEIsZUFBZTtJQUNmLElBQUlZLFNBQVNqQixZQUFZZTtJQUV6Qjs7OztHQUlDLEdBQ0QsSUFBSUcsY0FBY0YsVUFBVUcsSUFBSSxDQUFDRjtJQUNqQ0MsWUFBWUUsZUFBZSxHQUFHLFNBQVVDLEVBQUU7UUFDeEMsSUFBSUMsS0FBS0QsR0FBR0UsTUFBTSxDQUFDQyxNQUFNO1FBQ3pCRixHQUFHRyxpQkFBaUIsQ0FBQ3hCLGlCQUFpQjtZQUNwQ3lCLFNBQVM7WUFDVEMsZUFBZTtRQUNqQjtJQUNGO0lBQ0EsSUFBSUMsWUFBWSxJQUFJQyxRQUFRLFNBQVVDLEdBQUcsRUFBRUMsR0FBRztRQUM1Q2IsWUFBWWMsT0FBTyxHQUFHLFNBQVVYLEVBQUU7WUFDaEMsT0FBT1UsSUFBSVY7UUFDYjtRQUNBSCxZQUFZZSxTQUFTLEdBQUc7WUFDdEJILElBQUla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cENrRSxhQUFhbEIsZ0JBQWdCLEdBQUdxQjtJQUNoQ2pCLGdCQUFnQmM7QUFDbEI7QUFDTyxTQUFTSSxVQUFVNUIsT0FBTztJQUMvQixJQUFJLENBQUNBLFFBQVE2QixVQUFVLEVBQUUsT0FBTztJQUNoQyxJQUFJekIsTUFBTTlFO0lBQ1YsSUFBSSxDQUFDOEUsS0FBSyxPQUFPO0lBQ2pCLE9BQU87QUFDVDtBQUNPLFNBQVMwQixvQkFBb0I5QixPQUFPO0lBQ3pDLE9BQU9BLFFBQVFJLEdBQUcsQ0FBQ08sZ0JBQWdCLEdBQUc7QUFDeEM7QUFDQSxpRUFBZTtJQUNiWixRQUFRQTtJQUNSd0IsT0FBT0E7SUFDUEcsV0FBV0E7SUFDWEQsYUFBYUE7SUFDYkcsV0FBV0E7SUFDWHZHLE1BQU1BO0lBQ055RyxxQkFBcUJBO0lBQ3JCbEgsY0FBY0E7QUFDaEIsQ0FBQyxFQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvYnJvYWRjYXN0LWNoYW5uZWwvZGlzdC9lc25vZGUvbWV0aG9kcy9pbmRleGVkLWRiLmpzP2RmM2QiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiB0aGlzIG1ldGhvZCB1c2VzIGluZGV4ZWRkYiB0byBzdG9yZSB0aGUgbWVzc2FnZXNcbiAqIFRoZXJlIGlzIGN1cnJlbnRseSBubyBvYnNlcnZlckFQSSBmb3IgaWRiXG4gKiBAbGluayBodHRwczovL2dpdGh1Yi5jb20vdzNjL0luZGV4ZWREQi9pc3N1ZXMvNTFcbiAqXG4gKiBXaGVuIHdvcmtpbmcgb24gdGhpcywgZW5zdXJlIHRvIHVzZSB0aGVzZSBwZXJmb3JtYW5jZSBvcHRpbWl6YXRpb25zOlxuICogQGxpbmsgaHR0cHM6Ly9yeGRiLmluZm8vc2xvdy1pbmRleGVkZGIuaHRtbFxuICovXG5cbmltcG9ydCB7IHNsZWVwLCByYW5kb21JbnQsIHJhbmRvbVRva2VuLCBtaWNyb1NlY29uZHMgYXMgbWljcm8sIFBST01JU0VfUkVTT0xWRURfVk9JRCB9IGZyb20gJy4uL3V0aWwuanMnO1xuZXhwb3J0IHZhciBtaWNyb1NlY29uZHMgPSBtaWNybztcbmltcG9ydCB7IE9ibGl2aW91c1NldCB9IGZyb20gJ29ibGl2aW91cy1zZXQnO1xuaW1wb3J0IHsgZmlsbE9wdGlvbnNXaXRoRGVmYXVsdHMgfSBmcm9tICcuLi9vcHRpb25zJztcbnZhciBEQl9QUkVGSVggPSAncHVia2V5LmJyb2FkY2FzdC1jaGFubmVsLTAtJztcbnZhciBPQkpFQ1RfU1RPUkVfSUQgPSAnbWVzc2FnZXMnO1xuXG4vKipcbiAqIFVzZSByZWxheGVkIGR1cmFiaWxpdHkgZm9yIGZhc3RlciBwZXJmb3JtYW5jZSBvbiBhbGwgdHJhbnNhY3Rpb25zLlxuICogQGxpbmsgaHR0cHM6Ly9ub2xhbmxhd3Nvbi5jb20vMjAyMS8wOC8yMi9zcGVlZGluZy11cC1pbmRleGVkZGItcmVhZHMtYW5kLXdyaXRlcy9cbiAqL1xuZXhwb3J0IHZhciBUUkFOU0FDVElPTl9TRVRUSU5HUyA9IHtcbiAgZHVyYWJpbGl0eTogJ3JlbGF4ZWQnXG59O1xuZXhwb3J0IHZhciB0eXBlID0gJ2lkYic7XG5leHBvcnQgZnVuY3Rpb24gZ2V0SWRiKCkge1xuICBpZiAodHlwZW9mIGluZGV4ZWREQiAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBpbmRleGVkREI7XG4gIGlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2Ygd2luZG93Lm1vekluZGV4ZWREQiAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiB3aW5kb3cubW96SW5kZXhlZERCO1xuICAgIGlmICh0eXBlb2Ygd2luZG93LndlYmtpdEluZGV4ZWREQiAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiB3aW5kb3cud2Via2l0SW5kZXhlZERCO1xuICAgIGlmICh0eXBlb2Ygd2luZG93Lm1zSW5kZXhlZERCICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIHdpbmRvdy5tc0luZGV4ZWREQjtcbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbi8qKlxuICogSWYgcG9zc2libGUsIHdlIHNob3VsZCBleHBsaWNpdGx5IGNvbW1pdCBJbmRleGVkREIgdHJhbnNhY3Rpb25zXG4gKiBmb3IgYmV0dGVyIHBlcmZvcm1hbmNlLlxuICogQGxpbmsgaHR0cHM6Ly9ub2xhbmxhd3Nvbi5jb20vMjAyMS8wOC8yMi9zcGVlZGluZy11cC1pbmRleGVkZGItcmVhZHMtYW5kLXdyaXRlcy9cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbW1pdEluZGV4ZWREQlRyYW5zYWN0aW9uKHR4KSB7XG4gIGlmICh0eC5jb21taXQpIHtcbiAgICB0eC5jb21taXQoKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZURhdGFiYXNlKGNoYW5uZWxOYW1lKSB7XG4gIHZhciBJbmRleGVkREIgPSBnZXRJZGIoKTtcblxuICAvLyBjcmVhdGUgdGFibGVcbiAgdmFyIGRiTmFtZSA9IERCX1BSRUZJWCArIGNoYW5uZWxOYW1lO1xuXG4gIC8qKlxuICAgKiBBbGwgSW5kZXhlZERCIGRhdGFiYXNlcyBhcmUgb3BlbmVkIHdpdGhvdXQgdmVyc2lvblxuICAgKiBiZWNhdXNlIGl0IGlzIGEgYml0IGZhc3RlciwgZXNwZWNpYWxseSBvbiBmaXJlZm94XG4gICAqIEBsaW5rIGh0dHA6Ly9ucGFyYXNodXJhbS5jb20vSW5kZXhlZERCL3BlcmYvI09wZW4lMjBEYXRhYmFzZSUyMHdpdGglMjB2ZXJzaW9uXG4gICAqL1xuICB2YXIgb3BlblJlcXVlc3QgPSBJbmRleGVkREIub3BlbihkYk5hbWUpO1xuICBvcGVuUmVxdWVzdC5vbnVwZ3JhZGVuZWVkZWQgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICB2YXIgZGIgPSBldi50YXJnZXQucmVzdWx0O1xuICAgIGRiLmNyZWF0ZU9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9JRCwge1xuICAgICAga2V5UGF0aDogJ2lkJyxcbiAgICAgIGF1dG9JbmNyZW1lbnQ6IHRydWVcbiAgICB9KTtcbiAgfTtcbiAgdmFyIGRiUHJvbWlzZSA9IG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xuICAgIG9wZW5SZXF1ZXN0Lm9uZXJyb3IgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgIHJldHVybiByZWooZXYpO1xuICAgIH07XG4gICAgb3BlblJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmVzKG9wZW5SZXF1ZXN0LnJlc3VsdCk7XG4gICAgfTtcbiAgfSk7XG4gIHJldHVybiBkYlByb21pc2U7XG59XG5cbi8qKlxuICogd3JpdGVzIHRoZSBuZXcgbWVzc2FnZSB0byB0aGUgZGF0YWJhc2VcbiAqIHNvIG90aGVyIHJlYWRlcnMgY2FuIGZpbmQgaXRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdyaXRlTWVzc2FnZShkYiwgcmVhZGVyVXVpZCwgbWVzc2FnZUpzb24pIHtcbiAgdmFyIHRpbWUgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgdmFyIHdyaXRlT2JqZWN0ID0ge1xuICAgIHV1aWQ6IHJlYWRlclV1aWQsXG4gICAgdGltZTogdGltZSxcbiAgICBkYXRhOiBtZXNzYWdlSnNvblxuICB9O1xuICB2YXIgdHggPSBkYi50cmFuc2FjdGlvbihbT0JKRUNUX1NUT1JFX0lEXSwgJ3JlYWR3cml0ZScsIFRSQU5TQUNUSU9OX1NFVFRJTkdTKTtcbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xuICAgIHR4Lm9uY29tcGxldGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gcmVzKCk7XG4gICAgfTtcbiAgICB0eC5vbmVycm9yID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICByZXR1cm4gcmVqKGV2KTtcbiAgICB9O1xuICAgIHZhciBvYmplY3RTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9JRCk7XG4gICAgb2JqZWN0U3RvcmUuYWRkKHdyaXRlT2JqZWN0KTtcbiAgICBjb21taXRJbmRleGVkREJUcmFuc2FjdGlvbih0eCk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldEFsbE1lc3NhZ2VzKGRiKSB7XG4gIHZhciB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9JRCwgJ3JlYWRvbmx5JywgVFJBTlNBQ1RJT05fU0VUVElOR1MpO1xuICB2YXIgb2JqZWN0U3RvcmUgPSB0eC5vYmplY3RTdG9yZShPQkpFQ1RfU1RPUkVfSUQpO1xuICB2YXIgcmV0ID0gW107XG4gIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzKSB7XG4gICAgb2JqZWN0U3RvcmUub3BlbkN1cnNvcigpLm9uc3VjY2VzcyA9IGZ1bmN0aW9uIChldikge1xuICAgICAgdmFyIGN1cnNvciA9IGV2LnRhcmdldC5yZXN1bHQ7XG4gICAgICBpZiAoY3Vyc29yKSB7XG4gICAgICAgIHJldC5wdXNoKGN1cnNvci52YWx1ZSk7XG4gICAgICAgIC8vYWxlcnQoXCJOYW1lIGZvciBTU04gXCIgKyBjdXJzb3Iua2V5ICsgXCIgaXMgXCIgKyBjdXJzb3IudmFsdWUubmFtZSk7XG4gICAgICAgIGN1cnNvcltcImNvbnRpbnVlXCJdKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb21taXRJbmRleGVkREJUcmFuc2FjdGlvbih0eCk7XG4gICAgICAgIHJlcyhyZXQpO1xuICAgICAgfVxuICAgIH07XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE1lc3NhZ2VzSGlnaGVyVGhhbihkYiwgbGFzdEN1cnNvcklkKSB7XG4gIHZhciB0eCA9IGRiLnRyYW5zYWN0aW9uKE9CSkVDVF9TVE9SRV9JRCwgJ3JlYWRvbmx5JywgVFJBTlNBQ1RJT05fU0VUVElOR1MpO1xuICB2YXIgb2JqZWN0U3RvcmUgPSB0eC5vYmplY3RTdG9yZShPQkpFQ1RfU1RPUkVfSUQpO1xuICB2YXIgcmV0ID0gW107XG4gIHZhciBrZXlSYW5nZVZhbHVlID0gSURCS2V5UmFuZ2UuYm91bmQobGFzdEN1cnNvcklkICsgMSwgSW5maW5pdHkpO1xuXG4gIC8qKlxuICAgKiBPcHRpbWl6YXRpb24gc2hvcnRjdXQsXG4gICAqIGlmIGdldEFsbCgpIGNhbiBiZSB1c2VkLCBkbyBub3QgdXNlIGEgY3Vyc29yLlxuICAgKiBAbGluayBodHRwczovL3J4ZGIuaW5mby9zbG93LWluZGV4ZWRkYi5odG1sXG4gICAqL1xuICBpZiAob2JqZWN0U3RvcmUuZ2V0QWxsKSB7XG4gICAgdmFyIGdldEFsbFJlcXVlc3QgPSBvYmplY3RTdG9yZS5nZXRBbGwoa2V5UmFuZ2VWYWx1ZSk7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xuICAgICAgZ2V0QWxsUmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgICByZXR1cm4gcmVqKGVycik7XG4gICAgICB9O1xuICAgICAgZ2V0QWxsUmVxdWVzdC5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXMoZS50YXJnZXQucmVzdWx0KTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gb3BlbkN1cnNvcigpIHtcbiAgICAvLyBPY2Nhc2lvbmFsbHkgU2FmYXJpIHdpbGwgZmFpbCBvbiBJREJLZXlSYW5nZS5ib3VuZCwgdGhpc1xuICAgIC8vIGNhdGNoZXMgdGhhdCBlcnJvciwgaGF2aW5nIGl0IG9wZW4gdGhlIGN1cnNvciB0byB0aGUgZmlyc3RcbiAgICAvLyBpdGVtLiBXaGVuIGl0IGdldHMgZGF0YSBpdCB3aWxsIGFkdmFuY2UgdG8gdGhlIGRlc2lyZWQga2V5LlxuICAgIHRyeSB7XG4gICAgICBrZXlSYW5nZVZhbHVlID0gSURCS2V5UmFuZ2UuYm91bmQobGFzdEN1cnNvcklkICsgMSwgSW5maW5pdHkpO1xuICAgICAgcmV0dXJuIG9iamVjdFN0b3JlLm9wZW5DdXJzb3Ioa2V5UmFuZ2VWYWx1ZSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgcmV0dXJuIG9iamVjdFN0b3JlLm9wZW5DdXJzb3IoKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXMsIHJlaikge1xuICAgIHZhciBvcGVuQ3Vyc29yUmVxdWVzdCA9IG9wZW5DdXJzb3IoKTtcbiAgICBvcGVuQ3Vyc29yUmVxdWVzdC5vbmVycm9yID0gZnVuY3Rpb24gKGVycikge1xuICAgICAgcmV0dXJuIHJlaihlcnIpO1xuICAgIH07XG4gICAgb3BlbkN1cnNvclJlcXVlc3Qub25zdWNjZXNzID0gZnVuY3Rpb24gKGV2KSB7XG4gICAgICB2YXIgY3Vyc29yID0gZXYudGFyZ2V0LnJlc3VsdDtcbiAgICAgIGlmIChjdXJzb3IpIHtcbiAgICAgICAgaWYgKGN1cnNvci52YWx1ZS5pZCA8IGxhc3RDdXJzb3JJZCArIDEpIHtcbiAgICAgICAgICBjdXJzb3JbXCJjb250aW51ZVwiXShsYXN0Q3Vyc29ySWQgKyAxKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXQucHVzaChjdXJzb3IudmFsdWUpO1xuICAgICAgICAgIGN1cnNvcltcImNvbnRpbnVlXCJdKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbW1pdEluZGV4ZWREQlRyYW5zYWN0aW9uKHR4KTtcbiAgICAgICAgcmVzKHJldCk7XG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcmVtb3ZlTWVzc2FnZXNCeUlkKGRiLCBpZHMpIHtcbiAgdmFyIHR4ID0gZGIudHJhbnNhY3Rpb24oW09CSkVDVF9TVE9SRV9JRF0sICdyZWFkd3JpdGUnLCBUUkFOU0FDVElPTl9TRVRUSU5HUyk7XG4gIHZhciBvYmplY3RTdG9yZSA9IHR4Lm9iamVjdFN0b3JlKE9CSkVDVF9TVE9SRV9JRCk7XG4gIHJldHVybiBQcm9taXNlLmFsbChpZHMubWFwKGZ1bmN0aW9uIChpZCkge1xuICAgIHZhciBkZWxldGVSZXF1ZXN0ID0gb2JqZWN0U3RvcmVbXCJkZWxldGVcIl0oaWQpO1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICBkZWxldGVSZXF1ZXN0Lm9uc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHJlcygpO1xuICAgICAgfTtcbiAgICB9KTtcbiAgfSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE9sZE1lc3NhZ2VzKGRiLCB0dGwpIHtcbiAgdmFyIG9sZGVyVGhlbiA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpIC0gdHRsO1xuICB2YXIgdHggPSBkYi50cmFuc2FjdGlvbihPQkpFQ1RfU1RPUkVfSUQsICdyZWFkb25seScsIFRSQU5TQUNUSU9OX1NFVFRJTkdTKTtcbiAgdmFyIG9iamVjdFN0b3JlID0gdHgub2JqZWN0U3RvcmUoT0JKRUNUX1NUT1JFX0lEKTtcbiAgdmFyIHJldCA9IFtdO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlcykge1xuICAgIG9iamVjdFN0b3JlLm9wZW5DdXJzb3IoKS5vbnN1Y2Nlc3MgPSBmdW5jdGlvbiAoZXYpIHtcbiAgICAgIHZhciBjdXJzb3IgPSBldi50YXJnZXQucmVzdWx0O1xuICAgICAgaWYgKGN1cnNvcikge1xuICAgICAgICB2YXIgbXNnT2JrID0gY3Vyc29yLnZhbHVlO1xuICAgICAgICBpZiAobXNnT2JrLnRpbWUgPCBvbGRlclRoZW4pIHtcbiAgICAgICAgICByZXQucHVzaChtc2dPYmspO1xuICAgICAgICAgIC8vYWxlcnQoXCJOYW1lIGZvciBTU04gXCIgKyBjdXJzb3Iua2V5ICsgXCIgaXMgXCIgKyBjdXJzb3IudmFsdWUubmFtZSk7XG4gICAgICAgICAgY3Vyc29yW1wiY29udGludWVcIl0oKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyBubyBtb3JlIG9sZCBtZXNzYWdlcyxcbiAgICAgICAgICBjb21taXRJbmRleGVkREJUcmFuc2FjdGlvbih0eCk7XG4gICAgICAgICAgcmVzKHJldCk7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXMocmV0KTtcbiAgICAgIH1cbiAgICB9O1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjbGVhbk9sZE1lc3NhZ2VzKGRiLCB0dGwpIHtcbiAgcmV0dXJuIGdldE9sZE1lc3NhZ2VzKGRiLCB0dGwpLnRoZW4oZnVuY3Rpb24gKHRvb09sZCkge1xuICAgIHJldHVybiByZW1vdmVNZXNzYWdlc0J5SWQoZGIsIHRvb09sZC5tYXAoZnVuY3Rpb24gKG1zZykge1xuICAgICAgcmV0dXJuIG1zZy5pZDtcbiAgICB9KSk7XG4gIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShjaGFubmVsTmFtZSwgb3B0aW9ucykge1xuICBvcHRpb25zID0gZmlsbE9wdGlvbnNXaXRoRGVmYXVsdHMob3B0aW9ucyk7XG4gIHJldHVybiBjcmVhdGVEYXRhYmFzZShjaGFubmVsTmFtZSkudGhlbihmdW5jdGlvbiAoZGIpIHtcbiAgICB2YXIgc3RhdGUgPSB7XG4gICAgICBjbG9zZWQ6IGZhbHNlLFxuICAgICAgbGFzdEN1cnNvcklkOiAwLFxuICAgICAgY2hhbm5lbE5hbWU6IGNoYW5uZWxOYW1lLFxuICAgICAgb3B0aW9uczogb3B0aW9ucyxcbiAgICAgIHV1aWQ6IHJhbmRvbVRva2VuKCksXG4gICAgICAvKipcbiAgICAgICAqIGVtaXR0ZWRNZXNzYWdlc0lkc1xuICAgICAgICogY29udGFpbnMgYWxsIG1lc3NhZ2VzIHRoYXQgaGF2ZSBiZWVuIGVtaXR0ZWQgYmVmb3JlXG4gICAgICAgKiBAdHlwZSB7T2JsaXZpb3VzU2V0fVxuICAgICAgICovXG4gICAgICBlTUlzOiBuZXcgT2JsaXZpb3VzU2V0KG9wdGlvbnMuaWRiLnR0bCAqIDIpLFxuICAgICAgLy8gZW5zdXJlcyB3ZSBkbyBub3QgcmVhZCBtZXNzYWdlcyBpbiBwYXJyYWxsZWxcbiAgICAgIHdyaXRlQmxvY2tQcm9taXNlOiBQUk9NSVNFX1JFU09MVkVEX1ZPSUQsXG4gICAgICBtZXNzYWdlc0NhbGxiYWNrOiBudWxsLFxuICAgICAgcmVhZFF1ZXVlUHJvbWlzZXM6IFtdLFxuICAgICAgZGI6IGRiXG4gICAgfTtcblxuICAgIC8qKlxuICAgICAqIEhhbmRsZSBhYnJ1cHQgY2xvc2VzIHRoYXQgZG8gbm90IG9yaWdpbmF0ZSBmcm9tIGRiLmNsb3NlKCkuXG4gICAgICogVGhpcyBjb3VsZCBoYXBwZW4sIGZvciBleGFtcGxlLCBpZiB0aGUgdW5kZXJseWluZyBzdG9yYWdlIGlzXG4gICAgICogcmVtb3ZlZCBvciBpZiB0aGUgdXNlciBjbGVhcnMgdGhlIGRhdGFiYXNlIGluIHRoZSBicm93c2VyJ3NcbiAgICAgKiBoaXN0b3J5IHByZWZlcmVuY2VzLlxuICAgICAqL1xuICAgIGRiLm9uY2xvc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBzdGF0ZS5jbG9zZWQgPSB0cnVlO1xuICAgICAgaWYgKG9wdGlvbnMuaWRiLm9uY2xvc2UpIG9wdGlvbnMuaWRiLm9uY2xvc2UoKTtcbiAgICB9O1xuXG4gICAgLyoqXG4gICAgICogaWYgc2VydmljZS13b3JrZXJzIGFyZSB1c2VkLFxuICAgICAqIHdlIGhhdmUgbm8gJ3N0b3JhZ2UnLWV2ZW50IGlmIHRoZXkgcG9zdCBhIG1lc3NhZ2UsXG4gICAgICogdGhlcmVmb3JlIHdlIGFsc28gaGF2ZSB0byBzZXQgYW4gaW50ZXJ2YWxcbiAgICAgKi9cbiAgICBfcmVhZExvb3Aoc3RhdGUpO1xuICAgIHJldHVybiBzdGF0ZTtcbiAgfSk7XG59XG5mdW5jdGlvbiBfcmVhZExvb3Aoc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmNsb3NlZCkgcmV0dXJuO1xuICByZWFkTmV3TWVzc2FnZXMoc3RhdGUpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBzbGVlcChzdGF0ZS5vcHRpb25zLmlkYi5mYWxsYmFja0ludGVydmFsKTtcbiAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9yZWFkTG9vcChzdGF0ZSk7XG4gIH0pO1xufVxuZnVuY3Rpb24gX2ZpbHRlck1lc3NhZ2UobXNnT2JqLCBzdGF0ZSkge1xuICBpZiAobXNnT2JqLnV1aWQgPT09IHN0YXRlLnV1aWQpIHJldHVybiBmYWxzZTsgLy8gc2VuZCBieSBvd25cbiAgaWYgKHN0YXRlLmVNSXMuaGFzKG1zZ09iai5pZCkpIHJldHVybiBmYWxzZTsgLy8gYWxyZWFkeSBlbWl0dGVkXG4gIGlmIChtc2dPYmouZGF0YS50aW1lIDwgc3RhdGUubWVzc2FnZXNDYWxsYmFja1RpbWUpIHJldHVybiBmYWxzZTsgLy8gb2xkZXIgdGhlbiBvbk1lc3NhZ2VDYWxsYmFja1xuICByZXR1cm4gdHJ1ZTtcbn1cblxuLyoqXG4gKiByZWFkcyBhbGwgbmV3IG1lc3NhZ2VzIGZyb20gdGhlIGRhdGFiYXNlIGFuZCBlbWl0cyB0aGVtXG4gKi9cbmZ1bmN0aW9uIHJlYWROZXdNZXNzYWdlcyhzdGF0ZSkge1xuICAvLyBjaGFubmVsIGFscmVhZHkgY2xvc2VkXG4gIGlmIChzdGF0ZS5jbG9zZWQpIHJldHVybiBQUk9NSVNFX1JFU09MVkVEX1ZPSUQ7XG5cbiAgLy8gaWYgbm8gb25lIGlzIGxpc3RlbmluZywgd2UgZG8gbm90IG5lZWQgdG8gc2NhbiBmb3IgbmV3IG1lc3NhZ2VzXG4gIGlmICghc3RhdGUubWVzc2FnZXNDYWxsYmFjaykgcmV0dXJuIFBST01JU0VfUkVTT0xWRURfVk9JRDtcbiAgcmV0dXJuIGdldE1lc3NhZ2VzSGlnaGVyVGhhbihzdGF0ZS5kYiwgc3RhdGUubGFzdEN1cnNvcklkKS50aGVuKGZ1bmN0aW9uIChuZXdlck1lc3NhZ2VzKSB7XG4gICAgdmFyIHVzZU1lc3NhZ2VzID0gbmV3ZXJNZXNzYWdlc1xuICAgIC8qKlxuICAgICAqIHRoZXJlIGlzIGEgYnVnIGluIGlPUyB3aGVyZSB0aGUgbXNnT2JqIGNhbiBiZSB1bmRlZmluZWQgc29tZSB0aW1lc1xuICAgICAqIHNvIHdlIGZpbHRlciB0aGVtIG91dFxuICAgICAqIEBsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9wdWJrZXkvYnJvYWRjYXN0LWNoYW5uZWwvaXNzdWVzLzE5XG4gICAgICovLmZpbHRlcihmdW5jdGlvbiAobXNnT2JqKSB7XG4gICAgICByZXR1cm4gISFtc2dPYmo7XG4gICAgfSkubWFwKGZ1bmN0aW9uIChtc2dPYmopIHtcbiAgICAgIGlmIChtc2dPYmouaWQgPiBzdGF0ZS5sYXN0Q3Vyc29ySWQpIHtcbiAgICAgICAgc3RhdGUubGFzdEN1cnNvcklkID0gbXNnT2JqLmlkO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG1zZ09iajtcbiAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKG1zZ09iaikge1xuICAgICAgcmV0dXJuIF9maWx0ZXJNZXNzYWdlKG1zZ09iaiwgc3RhdGUpO1xuICAgIH0pLnNvcnQoZnVuY3Rpb24gKG1zZ09iakEsIG1zZ09iakIpIHtcbiAgICAgIHJldHVybiBtc2dPYmpBLnRpbWUgLSBtc2dPYmpCLnRpbWU7XG4gICAgfSk7IC8vIHNvcnQgYnkgdGltZVxuICAgIHVzZU1lc3NhZ2VzLmZvckVhY2goZnVuY3Rpb24gKG1zZ09iaikge1xuICAgICAgaWYgKHN0YXRlLm1lc3NhZ2VzQ2FsbGJhY2spIHtcbiAgICAgICAgc3RhdGUuZU1Jcy5hZGQobXNnT2JqLmlkKTtcbiAgICAgICAgc3RhdGUubWVzc2FnZXNDYWxsYmFjayhtc2dPYmouZGF0YSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIFBST01JU0VfUkVTT0xWRURfVk9JRDtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xvc2UoY2hhbm5lbFN0YXRlKSB7XG4gIGNoYW5uZWxTdGF0ZS5jbG9zZWQgPSB0cnVlO1xuICBjaGFubmVsU3RhdGUuZGIuY2xvc2UoKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBwb3N0TWVzc2FnZShjaGFubmVsU3RhdGUsIG1lc3NhZ2VKc29uKSB7XG4gIGNoYW5uZWxTdGF0ZS53cml0ZUJsb2NrUHJvbWlzZSA9IGNoYW5uZWxTdGF0ZS53cml0ZUJsb2NrUHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gd3JpdGVNZXNzYWdlKGNoYW5uZWxTdGF0ZS5kYiwgY2hhbm5lbFN0YXRlLnV1aWQsIG1lc3NhZ2VKc29uKTtcbiAgfSkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHJhbmRvbUludCgwLCAxMCkgPT09IDApIHtcbiAgICAgIC8qIGF3YWl0IChkbyBub3QgYXdhaXQpICovXG4gICAgICBjbGVhbk9sZE1lc3NhZ2VzKGNoYW5uZWxTdGF0ZS5kYiwgY2hhbm5lbFN0YXRlLm9wdGlvbnMuaWRiLnR0bCk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGNoYW5uZWxTdGF0ZS53cml0ZUJsb2NrUHJvbWlzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBvbk1lc3NhZ2UoY2hhbm5lbFN0YXRlLCBmbiwgdGltZSkge1xuICBjaGFubmVsU3RhdGUubWVzc2FnZXNDYWxsYmFja1RpbWUgPSB0aW1lO1xuICBjaGFubmVsU3RhdGUubWVzc2FnZXNDYWxsYmFjayA9IGZuO1xuICByZWFkTmV3TWVzc2FnZXMoY2hhbm5lbFN0YXRlKTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYW5CZVVzZWQob3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMuc3VwcG9ydDNQQykgcmV0dXJuIGZhbHNlO1xuICB2YXIgaWRiID0gZ2V0SWRiKCk7XG4gIGlmICghaWRiKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2VSZXNwb25zZVRpbWUob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucy5pZGIuZmFsbGJhY2tJbnRlcnZhbCAqIDI7XG59XG5leHBvcnQgZGVmYXVsdCB7XG4gIGNyZWF0ZTogY3JlYXRlLFxuICBjbG9zZTogY2xvc2UsXG4gIG9uTWVzc2FnZTogb25NZXNzYWdlLFxuICBwb3N0TWVzc2FnZTogcG9zdE1lc3NhZ2UsXG4gIGNhbkJlVXNlZDogY2FuQmVVc2VkLFxuICB0eXBlOiB0eXBlLFxuICBhdmVyYWdlUmVzcG9uc2VUaW1lOiBhdmVyYWdlUmVzcG9uc2VUaW1lLFxuICBtaWNyb1NlY29uZHM6IG1pY3JvU2Vjb25kc1xufTsiXSwibmFtZXMiOlsic2xlZXAiLCJyYW5kb21JbnQiLCJyYW5kb21Ub2tlbiIsIm1pY3JvU2Vjb25kcyIsIm1pY3JvIiwiUFJPTUlTRV9SRVNPTFZFRF9WT0lEIiwiT2JsaXZpb3VzU2V0IiwiZmlsbE9wdGlvbnNXaXRoRGVmYXVsdHMiLCJEQl9QUkVGSVgiLCJPQkpFQ1RfU1RPUkVfSUQiLCJUUkFOU0FDVElPTl9TRVRUSU5HUyIsImR1cmFiaWxpdHkiLCJ0eXBlIiwiZ2V0SWRiIiwiaW5kZXhlZERCIiwid2luZG93IiwibW96SW5kZXhlZERCIiwid2Via2l0SW5kZXhlZERCIiwibXNJbmRleGVkREIiLCJjb21taXRJbmRleGVkREJUcmFuc2FjdGlvbiIsInR4IiwiY29tbWl0IiwiY3JlYXRlRGF0YWJhc2UiLCJjaGFubmVsTmFtZSIsIkluZGV4ZWREQiIsImRiTmFtZSIsIm9wZW5SZXF1ZXN0Iiwib3BlbiIsIm9udXBncmFkZW5lZWRlZCIsImV2IiwiZGIiLCJ0YXJnZXQiLCJyZXN1bHQiLCJjcmVhdGVPYmplY3RTdG9yZSIsImtleVBhdGgiLCJhdXRvSW5jcmVtZW50IiwiZGJQcm9taXNlIiwiUHJvbWlzZSIsInJlcyIsInJlaiIsIm9uZXJyb3IiLCJvbnN1Y2Nlc3MiLCJ3cml0ZU1lc3NhZ2UiLCJyZWFkZXJVdWlkIiwibWVzc2FnZUpzb24iLCJ0aW1lIiwiRGF0ZSIsImdldFRpbWUiLCJ3cml0ZU9iamVjdCIsInV1aWQiLCJkYXRhIiwidHJhbnNhY3Rpb24iLCJvbmNvbXBsZXRlIiwib2JqZWN0U3RvcmUiLCJhZGQiLCJnZXRBbGxNZXNzYWdlcyIsInJldCIsIm9wZW5DdXJzb3IiLCJjdXJzb3IiLCJwdXNoIiwidmFsdWUiLCJnZXRNZXNzYWdlc0hpZ2hlclRoYW4iLCJsYXN0Q3Vyc29ySWQiLCJrZXlSYW5nZVZhbHVlIiwiSURCS2V5UmFuZ2UiLCJib3VuZCIsIkluZmluaXR5IiwiZ2V0QWxsIiwiZ2V0QWxsUmVxdWVzdCIsImVyciIsImUiLCJvcGVuQ3Vyc29yUmVxdWVzdCIsImlkIiwicmVtb3ZlTWVzc2FnZXNCeUlkIiwiaWRzIiwiYWxsIiwibWFwIiwiZGVsZXRlUmVxdWVzdCIsImdldE9sZE1lc3NhZ2VzIiwidHRsIiwib2xkZXJUaGVuIiwibXNnT2JrIiwiY2xlYW5PbGRNZXNzYWdlcyIsInRoZW4iLCJ0b29PbGQiLCJtc2ciLCJjcmVhdGUiLCJvcHRpb25zIiwic3RhdGUiLCJjbG9zZWQiLCJlTUlzIiwiaWRiIiwid3JpdGVCbG9ja1Byb21pc2UiLCJtZXNzYWdlc0NhbGxiYWNrIiwicmVhZFF1ZXVlUHJvbWlzZXMiLCJvbmNsb3NlIiwiX3JlYWRMb29wIiwicmVhZE5ld01lc3NhZ2VzIiwiZmFsbGJhY2tJbnRlcnZhbCIsIl9maWx0ZXJNZXNzYWdlIiwibXNnT2JqIiwiaGFzIiwibWVzc2FnZXNDYWxsYmFja1RpbWUiLCJuZXdlck1lc3NhZ2VzIiwidXNlTWVzc2FnZXMiLCJmaWx0ZXIiLCJzb3J0IiwibXNnT2JqQSIsIm1zZ09iakIiLCJmb3JFYWNoIiwiY2xvc2UiLCJjaGFubmVsU3RhdGUiLCJwb3N0TWVzc2FnZSIsIm9uTWVzc2FnZSIsImZuIiwiY2FuQmVVc2VkIiwic3VwcG9ydDNQQyIsImF2ZXJhZ2VSZXNwb25zZVRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/indexed-db.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js":
/*!***************************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js ***!
  \***************************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   addStorageEventListener: () => (/* binding */ addStorageEventListener),\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getLocalStorage: () => (/* binding */ getLocalStorage),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   removeStorageEventListener: () => (/* binding */ removeStorageEventListener),\n/* harmony export */   storageKey: () => (/* binding */ storageKey),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/es/index.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../options */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */ \n\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\nvar KEY_PREFIX = \"pubkey.broadcastChannel-\";\nvar type = \"localstorage\";\n/**\n * copied from crosstab\n * @link https://github.com/tejacques/crosstab/blob/master/src/crosstab.js#L32\n */ function getLocalStorage() {\n    var localStorage;\n    if (true) return null;\n    try {\n        localStorage = window.localStorage;\n        localStorage = window[\"ie8-eventlistener/storage\"] || window.localStorage;\n    } catch (e) {\n    // New versions of Firefox throw a Security exception\n    // if cookies are disabled. See\n    // https://bugzilla.mozilla.org/show_bug.cgi?id=1028153\n    }\n    return localStorage;\n}\nfunction storageKey(channelName) {\n    return KEY_PREFIX + channelName;\n}\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */ function postMessage(channelState, messageJson) {\n    return new Promise(function(res) {\n        (0,_util__WEBPACK_IMPORTED_MODULE_0__.sleep)().then(function() {\n            var key = storageKey(channelState.channelName);\n            var writeObj = {\n                token: (0,_util__WEBPACK_IMPORTED_MODULE_0__.randomToken)(),\n                time: new Date().getTime(),\n                data: messageJson,\n                uuid: channelState.uuid\n            };\n            var value = JSON.stringify(writeObj);\n            getLocalStorage().setItem(key, value);\n            /**\n       * StorageEvent does not fire the 'storage' event\n       * in the window that changes the state of the local storage.\n       * So we fire it manually\n       */ var ev = document.createEvent(\"Event\");\n            ev.initEvent(\"storage\", true, true);\n            ev.key = key;\n            ev.newValue = value;\n            window.dispatchEvent(ev);\n            res();\n        });\n    });\n}\nfunction addStorageEventListener(channelName, fn) {\n    var key = storageKey(channelName);\n    var listener = function listener(ev) {\n        if (ev.key === key) {\n            fn(JSON.parse(ev.newValue));\n        }\n    };\n    window.addEventListener(\"storage\", listener);\n    return listener;\n}\nfunction removeStorageEventListener(listener) {\n    window.removeEventListener(\"storage\", listener);\n}\nfunction create(channelName, options) {\n    options = (0,_options__WEBPACK_IMPORTED_MODULE_1__.fillOptionsWithDefaults)(options);\n    if (!canBeUsed(options)) {\n        throw new Error(\"BroadcastChannel: localstorage cannot be used\");\n    }\n    var uuid = (0,_util__WEBPACK_IMPORTED_MODULE_0__.randomToken)();\n    /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */ var eMIs = new oblivious_set__WEBPACK_IMPORTED_MODULE_2__.ObliviousSet(options.localstorage.removeTimeout);\n    var state = {\n        channelName: channelName,\n        uuid: uuid,\n        eMIs: eMIs // emittedMessagesIds\n    };\n    state.listener = addStorageEventListener(channelName, function(msgObj) {\n        if (!state.messagesCallback) return; // no listener\n        if (msgObj.uuid === uuid) return; // own message\n        if (!msgObj.token || eMIs.has(msgObj.token)) return; // already emitted\n        if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n        eMIs.add(msgObj.token);\n        state.messagesCallback(msgObj.data);\n    });\n    return state;\n}\nfunction close(channelState) {\n    removeStorageEventListener(channelState.listener);\n}\nfunction onMessage(channelState, fn, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn;\n}\nfunction canBeUsed(options) {\n    if (!options.support3PC) return false;\n    var ls = getLocalStorage();\n    if (!ls) return false;\n    try {\n        var key = \"__broadcastchannel_check\";\n        ls.setItem(key, \"works\");\n        ls.removeItem(key);\n    } catch (e) {\n        // Safari 10 in private mode will not allow write access to local\n        // storage and fail with a QuotaExceededError. See\n        // https://developer.mozilla.org/en-US/docs/Web/API/Web_Storage_API#Private_Browsing_Incognito_modes\n        return false;\n    }\n    return true;\n}\nfunction averageResponseTime() {\n    var defaultTime = 120;\n    var userAgent = navigator.userAgent.toLowerCase();\n    if (userAgent.includes(\"safari\") && !userAgent.includes(\"chrome\")) {\n        // safari is much slower so this time is higher\n        return defaultTime * 2;\n    }\n    return defaultTime;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/localstorage.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\nvar type = \"native\";\nfunction create(channelName) {\n    var state = {\n        messagesCallback: null,\n        bc: new BroadcastChannel(channelName),\n        subFns: [] // subscriberFunctions\n    };\n    state.bc.onmessage = function(msg) {\n        if (state.messagesCallback) {\n            state.messagesCallback(msg.data);\n        }\n    };\n    return state;\n}\nfunction close(channelState) {\n    channelState.bc.close();\n    channelState.subFns = [];\n}\nfunction postMessage(channelState, messageJson) {\n    try {\n        channelState.bc.postMessage(messageJson, false);\n        return _util__WEBPACK_IMPORTED_MODULE_0__.PROMISE_RESOLVED_VOID;\n    } catch (err) {\n        return Promise.reject(err);\n    }\n}\nfunction onMessage(channelState, fn) {\n    channelState.messagesCallback = fn;\n}\nfunction canBeUsed(options) {\n    /**\n   * in the electron-renderer, isNode will be true even if we are in browser-context\n   * so we also check if window is undefined\n   */ if (true) return false;\n    if (!options.support3PC) return false;\n    if (typeof BroadcastChannel === \"function\") {\n        if (BroadcastChannel._pubkey) {\n            throw new Error(\"BroadcastChannel: Do not overwrite window.BroadcastChannel with this module, this is not a polyfill\");\n        }\n        return true;\n    } else return false;\n}\nfunction averageResponseTime() {\n    return 150;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL25hdGl2ZS5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQXVFO0FBQ2hFLElBQUlBLGVBQWVDLCtDQUFLQSxDQUFDO0FBQ3pCLElBQUlFLE9BQU8sU0FBUztBQUNwQixTQUFTQyxPQUFPQyxXQUFXO0lBQ2hDLElBQUlDLFFBQVE7UUFDVkMsa0JBQWtCO1FBQ2xCQyxJQUFJLElBQUlDLGlCQUFpQko7UUFDekJLLFFBQVEsRUFBRSxDQUFDLHNCQUFzQjtJQUNuQztJQUVBSixNQUFNRSxFQUFFLENBQUNHLFNBQVMsR0FBRyxTQUFVQyxHQUFHO1FBQ2hDLElBQUlOLE1BQU1DLGdCQUFnQixFQUFFO1lBQzFCRCxNQUFNQyxnQkFBZ0IsQ0FBQ0ssSUFBSUMsSUFBSTtRQUNqQztJQUNGO0lBQ0EsT0FBT1A7QUFDVDtBQUNPLFNBQVNRLE1BQU1DLFlBQVk7SUFDaENBLGFBQWFQLEVBQUUsQ0FBQ00sS0FBSztJQUNyQkMsYUFBYUwsTUFBTSxHQUFHLEVBQUU7QUFDMUI7QUFDTyxTQUFTTSxZQUFZRCxZQUFZLEVBQUVFLFdBQVc7SUFDbkQsSUFBSTtRQUNGRixhQUFhUCxFQUFFLENBQUNRLFdBQVcsQ0FBQ0MsYUFBYTtRQUN6QyxPQUFPZix3REFBcUJBO0lBQzlCLEVBQUUsT0FBT2dCLEtBQUs7UUFDWixPQUFPQyxRQUFRQyxNQUFNLENBQUNGO0lBQ3hCO0FBQ0Y7QUFDTyxTQUFTRyxVQUFVTixZQUFZLEVBQUVPLEVBQUU7SUFDeENQLGFBQWFSLGdCQUFnQixHQUFHZTtBQUNsQztBQUNPLFNBQVNDLFVBQVVDLE9BQU87SUFDL0I7OztHQUdDLEdBQ0QsSUFBSSxJQUFrQixFQUFhLE9BQU87SUFDMUMsSUFBSSxDQUFDQSxRQUFRQyxVQUFVLEVBQUUsT0FBTztJQUNoQyxJQUFJLE9BQU9oQixxQkFBcUIsWUFBWTtRQUMxQyxJQUFJQSxpQkFBaUJpQixPQUFPLEVBQUU7WUFDNUIsTUFBTSxJQUFJQyxNQUFNO1FBQ2xCO1FBQ0EsT0FBTztJQUNULE9BQU8sT0FBTztBQUNoQjtBQUNPLFNBQVNDO0lBQ2QsT0FBTztBQUNUO0FBQ0EsaUVBQWU7SUFDYnhCLFFBQVFBO0lBQ1JVLE9BQU9BO0lBQ1BPLFdBQVdBO0lBQ1hMLGFBQWFBO0lBQ2JPLFdBQVdBO0lBQ1hwQixNQUFNQTtJQUNOeUIscUJBQXFCQTtJQUNyQjVCLGNBQWNBO0FBQ2hCLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jyb2FkY2FzdC1jaGFubmVsL2Rpc3QvZXNub2RlL21ldGhvZHMvbmF0aXZlLmpzP2EzZWYiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgbWljcm9TZWNvbmRzIGFzIG1pY3JvLCBQUk9NSVNFX1JFU09MVkVEX1ZPSUQgfSBmcm9tICcuLi91dGlsJztcbmV4cG9ydCB2YXIgbWljcm9TZWNvbmRzID0gbWljcm87XG5leHBvcnQgdmFyIHR5cGUgPSAnbmF0aXZlJztcbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGUoY2hhbm5lbE5hbWUpIHtcbiAgdmFyIHN0YXRlID0ge1xuICAgIG1lc3NhZ2VzQ2FsbGJhY2s6IG51bGwsXG4gICAgYmM6IG5ldyBCcm9hZGNhc3RDaGFubmVsKGNoYW5uZWxOYW1lKSxcbiAgICBzdWJGbnM6IFtdIC8vIHN1YnNjcmliZXJGdW5jdGlvbnNcbiAgfTtcblxuICBzdGF0ZS5iYy5vbm1lc3NhZ2UgPSBmdW5jdGlvbiAobXNnKSB7XG4gICAgaWYgKHN0YXRlLm1lc3NhZ2VzQ2FsbGJhY2spIHtcbiAgICAgIHN0YXRlLm1lc3NhZ2VzQ2FsbGJhY2sobXNnLmRhdGEpO1xuICAgIH1cbiAgfTtcbiAgcmV0dXJuIHN0YXRlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNsb3NlKGNoYW5uZWxTdGF0ZSkge1xuICBjaGFubmVsU3RhdGUuYmMuY2xvc2UoKTtcbiAgY2hhbm5lbFN0YXRlLnN1YkZucyA9IFtdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHBvc3RNZXNzYWdlKGNoYW5uZWxTdGF0ZSwgbWVzc2FnZUpzb24pIHtcbiAgdHJ5IHtcbiAgICBjaGFubmVsU3RhdGUuYmMucG9zdE1lc3NhZ2UobWVzc2FnZUpzb24sIGZhbHNlKTtcbiAgICByZXR1cm4gUFJPTUlTRV9SRVNPTFZFRF9WT0lEO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKTtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIG9uTWVzc2FnZShjaGFubmVsU3RhdGUsIGZuKSB7XG4gIGNoYW5uZWxTdGF0ZS5tZXNzYWdlc0NhbGxiYWNrID0gZm47XG59XG5leHBvcnQgZnVuY3Rpb24gY2FuQmVVc2VkKG9wdGlvbnMpIHtcbiAgLyoqXG4gICAqIGluIHRoZSBlbGVjdHJvbi1yZW5kZXJlciwgaXNOb2RlIHdpbGwgYmUgdHJ1ZSBldmVuIGlmIHdlIGFyZSBpbiBicm93c2VyLWNvbnRleHRcbiAgICogc28gd2UgYWxzbyBjaGVjayBpZiB3aW5kb3cgaXMgdW5kZWZpbmVkXG4gICAqL1xuICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ3VuZGVmaW5lZCcpIHJldHVybiBmYWxzZTtcbiAgaWYgKCFvcHRpb25zLnN1cHBvcnQzUEMpIHJldHVybiBmYWxzZTtcbiAgaWYgKHR5cGVvZiBCcm9hZGNhc3RDaGFubmVsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgaWYgKEJyb2FkY2FzdENoYW5uZWwuX3B1YmtleSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdCcm9hZGNhc3RDaGFubmVsOiBEbyBub3Qgb3ZlcndyaXRlIHdpbmRvdy5Ccm9hZGNhc3RDaGFubmVsIHdpdGggdGhpcyBtb2R1bGUsIHRoaXMgaXMgbm90IGEgcG9seWZpbGwnKTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gZWxzZSByZXR1cm4gZmFsc2U7XG59XG5leHBvcnQgZnVuY3Rpb24gYXZlcmFnZVJlc3BvbnNlVGltZSgpIHtcbiAgcmV0dXJuIDE1MDtcbn1cbmV4cG9ydCBkZWZhdWx0IHtcbiAgY3JlYXRlOiBjcmVhdGUsXG4gIGNsb3NlOiBjbG9zZSxcbiAgb25NZXNzYWdlOiBvbk1lc3NhZ2UsXG4gIHBvc3RNZXNzYWdlOiBwb3N0TWVzc2FnZSxcbiAgY2FuQmVVc2VkOiBjYW5CZVVzZWQsXG4gIHR5cGU6IHR5cGUsXG4gIGF2ZXJhZ2VSZXNwb25zZVRpbWU6IGF2ZXJhZ2VSZXNwb25zZVRpbWUsXG4gIG1pY3JvU2Vjb25kczogbWljcm9TZWNvbmRzXG59OyJdLCJuYW1lcyI6WyJtaWNyb1NlY29uZHMiLCJtaWNybyIsIlBST01JU0VfUkVTT0xWRURfVk9JRCIsInR5cGUiLCJjcmVhdGUiLCJjaGFubmVsTmFtZSIsInN0YXRlIiwibWVzc2FnZXNDYWxsYmFjayIsImJjIiwiQnJvYWRjYXN0Q2hhbm5lbCIsInN1YkZucyIsIm9ubWVzc2FnZSIsIm1zZyIsImRhdGEiLCJjbG9zZSIsImNoYW5uZWxTdGF0ZSIsInBvc3RNZXNzYWdlIiwibWVzc2FnZUpzb24iLCJlcnIiLCJQcm9taXNlIiwicmVqZWN0Iiwib25NZXNzYWdlIiwiZm4iLCJjYW5CZVVzZWQiLCJvcHRpb25zIiwic3VwcG9ydDNQQyIsIl9wdWJrZXkiLCJFcnJvciIsImF2ZXJhZ2VSZXNwb25zZVRpbWUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/native.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   getSocketInstance: () => (/* binding */ getSocketInstance),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   removeStorageEventListener: () => (/* binding */ removeStorageEventListener),\n/* harmony export */   setupSocketConnection: () => (/* binding */ setupSocketConnection),\n/* harmony export */   storageKey: () => (/* binding */ storageKey),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/asyncToGenerator */ \"(ssr)/./node_modules/@babel/runtime/helpers/asyncToGenerator.js\");\n/* harmony import */ var _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/regenerator */ \"(ssr)/./node_modules/@babel/runtime/regenerator/index.js\");\n/* harmony import */ var _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var oblivious_set__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! oblivious-set */ \"(ssr)/./node_modules/oblivious-set/dist/es/index.js\");\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-client */ \"(ssr)/./node_modules/socket.io-client/build/esm-debug/index.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/browser.js\");\n/* harmony import */ var _toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @toruslabs/metadata-helpers */ \"(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\");\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n/* harmony import */ var _options__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../options */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\");\n\n\n/**\n * A localStorage-only method which uses localstorage and its 'storage'-event\n * This does not work inside of webworkers because they have no access to locastorage\n * This is basically implemented to support IE9 or your grandmothers toaster.\n * @link https://caniuse.com/#feat=namevalue-storage\n * @link https://caniuse.com/#feat=indexeddb\n */ \n\n\n\n\n\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_5__.microSeconds;\nvar KEY_PREFIX = \"pubkey.broadcastChannel-\";\nvar type = \"server\";\nvar SOCKET_CONN_INSTANCE = null;\n// used to decide to reconnect socket e.g. when socket connection is disconnected unexpectedly\nvar runningChannels = new Set();\nfunction storageKey(channelName) {\n    return KEY_PREFIX + channelName;\n}\n/**\n * writes the new message to the storage\n * and fires the storage-event so other readers can find it\n */ function postMessage(channelState, messageJson) {\n    return new Promise(function(res, rej) {\n        (0,_util__WEBPACK_IMPORTED_MODULE_5__.sleep)().then(/*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee() {\n            var key, channelEncPrivKey, encData, body;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee$(_context) {\n                while(1)switch(_context.prev = _context.next){\n                    case 0:\n                        key = storageKey(channelState.channelName);\n                        channelEncPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.keccak256)(Buffer.from(key, \"utf8\"));\n                        _context.next = 4;\n                        return (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.encryptData)(channelEncPrivKey.toString(\"hex\"), {\n                            token: (0,_util__WEBPACK_IMPORTED_MODULE_5__.randomToken)(),\n                            time: new Date().getTime(),\n                            data: messageJson,\n                            uuid: channelState.uuid\n                        });\n                    case 4:\n                        encData = _context.sent;\n                        _context.t0 = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(channelEncPrivKey).toString(\"hex\");\n                        _context.t1 = encData;\n                        _context.next = 9;\n                        return (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.sign)(channelEncPrivKey, (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.keccak256)(Buffer.from(encData, \"utf8\")));\n                    case 9:\n                        _context.t2 = _context.sent.toString(\"hex\");\n                        body = {\n                            key: _context.t0,\n                            data: _context.t1,\n                            signature: _context.t2\n                        };\n                        if (channelState.timeout) body.timeout = channelState.timeout;\n                        return _context.abrupt(\"return\", fetch(channelState.serverUrl + \"/channel/set\", {\n                            method: \"POST\",\n                            body: JSON.stringify(body),\n                            headers: {\n                                \"Content-Type\": \"application/json; charset=utf-8\"\n                            }\n                        }).then(res)[\"catch\"](rej));\n                    case 13:\n                    case \"end\":\n                        return _context.stop();\n                }\n            }, _callee);\n        })));\n    });\n}\nfunction getSocketInstance(serverUrl) {\n    if (SOCKET_CONN_INSTANCE) {\n        return SOCKET_CONN_INSTANCE;\n    }\n    var SOCKET_CONN = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_2__.io)(serverUrl, {\n        transports: [\n            \"websocket\",\n            \"polling\"\n        ],\n        // use WebSocket first, if available\n        withCredentials: true,\n        reconnectionDelayMax: 10000,\n        reconnectionAttempts: 10\n    });\n    SOCKET_CONN.on(\"connect_error\", function(err) {\n        // revert to classic upgrade\n        SOCKET_CONN.io.opts.transports = [\n            \"polling\",\n            \"websocket\"\n        ];\n        _util__WEBPACK_IMPORTED_MODULE_5__.log.error(\"connect error\", err);\n    });\n    SOCKET_CONN.on(\"connect\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee2() {\n        var engine;\n        return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee2$(_context2) {\n            while(1)switch(_context2.prev = _context2.next){\n                case 0:\n                    engine = SOCKET_CONN.io.engine;\n                    _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"initially connected to\", engine.transport.name); // in most cases, prints \"polling\"\n                    engine.once(\"upgrade\", function() {\n                        // called when the transport is upgraded (i.e. from HTTP long-polling to WebSocket)\n                        _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"upgraded\", engine.transport.name); // in most cases, prints \"websocket\"\n                    });\n                    engine.once(\"close\", function(reason) {\n                        // called when the underlying connection is closed\n                        _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"connection closed\", reason);\n                    });\n                case 4:\n                case \"end\":\n                    return _context2.stop();\n            }\n        }, _callee2);\n    })));\n    SOCKET_CONN.on(\"error\", function(err) {\n        _util__WEBPACK_IMPORTED_MODULE_5__.log.error(\"socket errored\", err);\n        SOCKET_CONN.disconnect();\n    });\n    SOCKET_CONN_INSTANCE = SOCKET_CONN;\n    return SOCKET_CONN;\n}\nfunction setupSocketConnection(serverUrl, channelName, fn) {\n    var socketConn = getSocketInstance(serverUrl);\n    var key = storageKey(channelName);\n    var channelEncPrivKey = (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.keccak256)(Buffer.from(key, \"utf8\"));\n    var channelPubKey = (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_3__.getPublic)(channelEncPrivKey).toString(\"hex\");\n    if (socketConn.connected) {\n        socketConn.emit(\"check_auth_status\", channelPubKey);\n    } else {\n        socketConn.once(\"connect\", function() {\n            _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"connected with socket\");\n            socketConn.emit(\"check_auth_status\", channelPubKey);\n        });\n    }\n    var reconnect = function reconnect() {\n        socketConn.once(\"connect\", /*#__PURE__*/ _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee3() {\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee3$(_context3) {\n                while(1)switch(_context3.prev = _context3.next){\n                    case 0:\n                        socketConn.emit(\"check_auth_status\", channelPubKey);\n                    case 1:\n                    case \"end\":\n                        return _context3.stop();\n                }\n            }, _callee3);\n        })));\n    };\n    var visibilityListener = function visibilityListener() {\n        // if channel is closed, then remove the listener.\n        if (!socketConn) {\n            document.removeEventListener(\"visibilitychange\", visibilityListener);\n            return;\n        }\n        // if not connected, then wait for connection and ping server for latest msg.\n        if (!socketConn.connected && document.visibilityState === \"visible\") {\n            reconnect();\n        }\n    };\n    var listener = /*#__PURE__*/ function() {\n        var _ref4 = _babel_runtime_helpers_asyncToGenerator__WEBPACK_IMPORTED_MODULE_0___default()(/*#__PURE__*/ _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().mark(function _callee4(ev) {\n            var decData;\n            return _babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_1___default().wrap(function _callee4$(_context4) {\n                while(1)switch(_context4.prev = _context4.next){\n                    case 0:\n                        _context4.prev = 0;\n                        _context4.next = 3;\n                        return (0,_toruslabs_metadata_helpers__WEBPACK_IMPORTED_MODULE_4__.decryptData)(channelEncPrivKey.toString(\"hex\"), ev);\n                    case 3:\n                        decData = _context4.sent;\n                        _util__WEBPACK_IMPORTED_MODULE_5__.log.info(decData);\n                        fn(decData);\n                        _context4.next = 11;\n                        break;\n                    case 8:\n                        _context4.prev = 8;\n                        _context4.t0 = _context4[\"catch\"](0);\n                        _util__WEBPACK_IMPORTED_MODULE_5__.log.error(_context4.t0);\n                    case 11:\n                    case \"end\":\n                        return _context4.stop();\n                }\n            }, _callee4, null, [\n                [\n                    0,\n                    8\n                ]\n            ]);\n        }));\n        return function listener(_x) {\n            return _ref4.apply(this, arguments);\n        };\n    }();\n    socketConn.on(\"disconnect\", function() {\n        _util__WEBPACK_IMPORTED_MODULE_5__.log.debug(\"socket disconnected\");\n        if (runningChannels.has(channelName)) {\n            _util__WEBPACK_IMPORTED_MODULE_5__.log.error(\"socket disconnected unexpectedly, reconnecting socket\");\n            reconnect();\n        }\n    });\n    socketConn.on(channelPubKey + \"_success\", listener);\n    if (typeof document !== \"undefined\") document.addEventListener(\"visibilitychange\", visibilityListener);\n    return socketConn;\n}\nfunction removeStorageEventListener() {\n    if (SOCKET_CONN_INSTANCE) {\n        SOCKET_CONN_INSTANCE.disconnect();\n    }\n}\nfunction create(channelName, options) {\n    options = (0,_options__WEBPACK_IMPORTED_MODULE_6__.fillOptionsWithDefaults)(options);\n    if (!canBeUsed(options)) {\n        throw new Error(\"BroadcastChannel: server cannot be used\");\n    }\n    var uuid = (0,_util__WEBPACK_IMPORTED_MODULE_5__.randomToken)();\n    /**\n   * eMIs\n   * contains all messages that have been emitted before\n   * @type {ObliviousSet}\n   */ var eMIs = new oblivious_set__WEBPACK_IMPORTED_MODULE_7__.ObliviousSet(options.server.removeTimeout);\n    var state = {\n        channelName: channelName,\n        uuid: uuid,\n        eMIs: eMIs,\n        // emittedMessagesIds\n        serverUrl: options.server.url\n    };\n    if (options.server.timeout) state.timeout = options.server.timeout;\n    setupSocketConnection(options.server.url, channelName, function(msgObj) {\n        if (!state.messagesCallback) return; // no listener\n        if (msgObj.uuid === state.uuid) return; // own message\n        if (!msgObj.token || state.eMIs.has(msgObj.token)) return; // already emitted\n        // if (msgObj.data.time && msgObj.data.time < state.messagesCallbackTime) return; // too old\n        state.eMIs.add(msgObj.token);\n        state.messagesCallback(msgObj.data);\n    });\n    runningChannels.add(channelName);\n    return state;\n}\nfunction close(channelState) {\n    runningChannels[\"delete\"](channelState.channelName);\n// give 2 sec for all msgs which are in transit to be consumed\n// by receiver.\n// window.setTimeout(() => {\n//     removeStorageEventListener(channelState);\n//     SOCKET_CONN_INSTANCE = null;\n// }, 1000);\n}\nfunction onMessage(channelState, fn, time) {\n    channelState.messagesCallbackTime = time;\n    channelState.messagesCallback = fn;\n}\nfunction canBeUsed() {\n    return true;\n}\nfunction averageResponseTime() {\n    var defaultTime = 500;\n    // TODO: Maybe increase it based on operation\n    return defaultTime;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/server.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js ***!
  \***********************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   averageResponseTime: () => (/* binding */ averageResponseTime),\n/* harmony export */   canBeUsed: () => (/* binding */ canBeUsed),\n/* harmony export */   close: () => (/* binding */ close),\n/* harmony export */   create: () => (/* binding */ create),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   onMessage: () => (/* binding */ onMessage),\n/* harmony export */   postMessage: () => (/* binding */ postMessage),\n/* harmony export */   type: () => (/* binding */ type)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n\nvar microSeconds = _util__WEBPACK_IMPORTED_MODULE_0__.microSeconds;\nvar type = \"simulate\";\nvar SIMULATE_CHANNELS = new Set();\nfunction create(channelName) {\n    var state = {\n        name: channelName,\n        messagesCallback: null\n    };\n    SIMULATE_CHANNELS.add(state);\n    return state;\n}\nfunction close(channelState) {\n    SIMULATE_CHANNELS[\"delete\"](channelState);\n}\nfunction postMessage(channelState, messageJson) {\n    return new Promise(function(res) {\n        return setTimeout(function() {\n            var channelArray = Array.from(SIMULATE_CHANNELS);\n            channelArray.filter(function(channel) {\n                return channel.name === channelState.name;\n            }).filter(function(channel) {\n                return channel !== channelState;\n            }).filter(function(channel) {\n                return !!channel.messagesCallback;\n            }).forEach(function(channel) {\n                return channel.messagesCallback(messageJson);\n            });\n            res();\n        }, 5);\n    });\n}\nfunction onMessage(channelState, fn) {\n    channelState.messagesCallback = fn;\n}\nfunction canBeUsed() {\n    return true;\n}\nfunction averageResponseTime() {\n    return 5;\n}\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = ({\n    create: create,\n    close: close,\n    onMessage: onMessage,\n    postMessage: postMessage,\n    canBeUsed: canBeUsed,\n    type: type,\n    averageResponseTime: averageResponseTime,\n    microSeconds: microSeconds\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9tZXRob2RzL3NpbXVsYXRlLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFBZ0Q7QUFDekMsSUFBSUEsZUFBZUMsK0NBQUtBLENBQUM7QUFDekIsSUFBSUMsT0FBTyxXQUFXO0FBQzdCLElBQUlDLG9CQUFvQixJQUFJQztBQUNyQixTQUFTQyxPQUFPQyxXQUFXO0lBQ2hDLElBQUlDLFFBQVE7UUFDVkMsTUFBTUY7UUFDTkcsa0JBQWtCO0lBQ3BCO0lBQ0FOLGtCQUFrQk8sR0FBRyxDQUFDSDtJQUN0QixPQUFPQTtBQUNUO0FBQ08sU0FBU0ksTUFBTUMsWUFBWTtJQUNoQ1QsaUJBQWlCLENBQUMsU0FBUyxDQUFDUztBQUM5QjtBQUNPLFNBQVNDLFlBQVlELFlBQVksRUFBRUUsV0FBVztJQUNuRCxPQUFPLElBQUlDLFFBQVEsU0FBVUMsR0FBRztRQUM5QixPQUFPQyxXQUFXO1lBQ2hCLElBQUlDLGVBQWVDLE1BQU1DLElBQUksQ0FBQ2pCO1lBQzlCZSxhQUFhRyxNQUFNLENBQUMsU0FBVUMsT0FBTztnQkFDbkMsT0FBT0EsUUFBUWQsSUFBSSxLQUFLSSxhQUFhSixJQUFJO1lBQzNDLEdBQUdhLE1BQU0sQ0FBQyxTQUFVQyxPQUFPO2dCQUN6QixPQUFPQSxZQUFZVjtZQUNyQixHQUFHUyxNQUFNLENBQUMsU0FBVUMsT0FBTztnQkFDekIsT0FBTyxDQUFDLENBQUNBLFFBQVFiLGdCQUFnQjtZQUNuQyxHQUFHYyxPQUFPLENBQUMsU0FBVUQsT0FBTztnQkFDMUIsT0FBT0EsUUFBUWIsZ0JBQWdCLENBQUNLO1lBQ2xDO1lBQ0FFO1FBQ0YsR0FBRztJQUNMO0FBQ0Y7QUFDTyxTQUFTUSxVQUFVWixZQUFZLEVBQUVhLEVBQUU7SUFDeENiLGFBQWFILGdCQUFnQixHQUFHZ0I7QUFDbEM7QUFDTyxTQUFTQztJQUNkLE9BQU87QUFDVDtBQUNPLFNBQVNDO0lBQ2QsT0FBTztBQUNUO0FBQ0EsaUVBQWU7SUFDYnRCLFFBQVFBO0lBQ1JNLE9BQU9BO0lBQ1BhLFdBQVdBO0lBQ1hYLGFBQWFBO0lBQ2JhLFdBQVdBO0lBQ1h4QixNQUFNQTtJQUNOeUIscUJBQXFCQTtJQUNyQjNCLGNBQWNBO0FBQ2hCLENBQUMsRUFBQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jyb2FkY2FzdC1jaGFubmVsL2Rpc3QvZXNub2RlL21ldGhvZHMvc2ltdWxhdGUuanM/MjkwMiJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBtaWNyb1NlY29uZHMgYXMgbWljcm8gfSBmcm9tICcuLi91dGlsJztcbmV4cG9ydCB2YXIgbWljcm9TZWNvbmRzID0gbWljcm87XG5leHBvcnQgdmFyIHR5cGUgPSAnc2ltdWxhdGUnO1xudmFyIFNJTVVMQVRFX0NIQU5ORUxTID0gbmV3IFNldCgpO1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZShjaGFubmVsTmFtZSkge1xuICB2YXIgc3RhdGUgPSB7XG4gICAgbmFtZTogY2hhbm5lbE5hbWUsXG4gICAgbWVzc2FnZXNDYWxsYmFjazogbnVsbFxuICB9O1xuICBTSU1VTEFURV9DSEFOTkVMUy5hZGQoc3RhdGUpO1xuICByZXR1cm4gc3RhdGU7XG59XG5leHBvcnQgZnVuY3Rpb24gY2xvc2UoY2hhbm5lbFN0YXRlKSB7XG4gIFNJTVVMQVRFX0NIQU5ORUxTW1wiZGVsZXRlXCJdKGNoYW5uZWxTdGF0ZSk7XG59XG5leHBvcnQgZnVuY3Rpb24gcG9zdE1lc3NhZ2UoY2hhbm5lbFN0YXRlLCBtZXNzYWdlSnNvbikge1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlcykge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBjaGFubmVsQXJyYXkgPSBBcnJheS5mcm9tKFNJTVVMQVRFX0NIQU5ORUxTKTtcbiAgICAgIGNoYW5uZWxBcnJheS5maWx0ZXIoZnVuY3Rpb24gKGNoYW5uZWwpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5uZWwubmFtZSA9PT0gY2hhbm5lbFN0YXRlLm5hbWU7XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKGNoYW5uZWwpIHtcbiAgICAgICAgcmV0dXJuIGNoYW5uZWwgIT09IGNoYW5uZWxTdGF0ZTtcbiAgICAgIH0pLmZpbHRlcihmdW5jdGlvbiAoY2hhbm5lbCkge1xuICAgICAgICByZXR1cm4gISFjaGFubmVsLm1lc3NhZ2VzQ2FsbGJhY2s7XG4gICAgICB9KS5mb3JFYWNoKGZ1bmN0aW9uIChjaGFubmVsKSB7XG4gICAgICAgIHJldHVybiBjaGFubmVsLm1lc3NhZ2VzQ2FsbGJhY2sobWVzc2FnZUpzb24pO1xuICAgICAgfSk7XG4gICAgICByZXMoKTtcbiAgICB9LCA1KTtcbiAgfSk7XG59XG5leHBvcnQgZnVuY3Rpb24gb25NZXNzYWdlKGNoYW5uZWxTdGF0ZSwgZm4pIHtcbiAgY2hhbm5lbFN0YXRlLm1lc3NhZ2VzQ2FsbGJhY2sgPSBmbjtcbn1cbmV4cG9ydCBmdW5jdGlvbiBjYW5CZVVzZWQoKSB7XG4gIHJldHVybiB0cnVlO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGF2ZXJhZ2VSZXNwb25zZVRpbWUoKSB7XG4gIHJldHVybiA1O1xufVxuZXhwb3J0IGRlZmF1bHQge1xuICBjcmVhdGU6IGNyZWF0ZSxcbiAgY2xvc2U6IGNsb3NlLFxuICBvbk1lc3NhZ2U6IG9uTWVzc2FnZSxcbiAgcG9zdE1lc3NhZ2U6IHBvc3RNZXNzYWdlLFxuICBjYW5CZVVzZWQ6IGNhbkJlVXNlZCxcbiAgdHlwZTogdHlwZSxcbiAgYXZlcmFnZVJlc3BvbnNlVGltZTogYXZlcmFnZVJlc3BvbnNlVGltZSxcbiAgbWljcm9TZWNvbmRzOiBtaWNyb1NlY29uZHNcbn07Il0sIm5hbWVzIjpbIm1pY3JvU2Vjb25kcyIsIm1pY3JvIiwidHlwZSIsIlNJTVVMQVRFX0NIQU5ORUxTIiwiU2V0IiwiY3JlYXRlIiwiY2hhbm5lbE5hbWUiLCJzdGF0ZSIsIm5hbWUiLCJtZXNzYWdlc0NhbGxiYWNrIiwiYWRkIiwiY2xvc2UiLCJjaGFubmVsU3RhdGUiLCJwb3N0TWVzc2FnZSIsIm1lc3NhZ2VKc29uIiwiUHJvbWlzZSIsInJlcyIsInNldFRpbWVvdXQiLCJjaGFubmVsQXJyYXkiLCJBcnJheSIsImZyb20iLCJmaWx0ZXIiLCJjaGFubmVsIiwiZm9yRWFjaCIsIm9uTWVzc2FnZSIsImZuIiwiY2FuQmVVc2VkIiwiYXZlcmFnZVJlc3BvbnNlVGltZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/methods/simulate.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fillOptionsWithDefaults: () => (/* binding */ fillOptionsWithDefaults)\n/* harmony export */ });\n/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./util */ \"(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\");\n\nfunction fillOptionsWithDefaults() {\n    var originalOptions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    var options = JSON.parse(JSON.stringify(originalOptions));\n    if (typeof options.support3PC === \"undefined\") options.support3PC = (0,_util__WEBPACK_IMPORTED_MODULE_0__.are3PCSupported)();\n    // main\n    if (typeof options.webWorkerSupport === \"undefined\") options.webWorkerSupport = true;\n    // indexed-db\n    if (!options.idb) options.idb = {};\n    //  after this time the messages get deleted\n    if (!options.idb.ttl) options.idb.ttl = 1000 * 45;\n    if (!options.idb.fallbackInterval) options.idb.fallbackInterval = 150;\n    //  handles abrupt db onclose events.\n    if (originalOptions.idb && typeof originalOptions.idb.onclose === \"function\") options.idb.onclose = originalOptions.idb.onclose;\n    // localstorage\n    if (!options.localstorage) options.localstorage = {};\n    if (!options.localstorage.removeTimeout) options.localstorage.removeTimeout = 1000 * 60;\n    // server\n    if (!options.server) options.server = {};\n    if (!options.server.url) options.server.url = \"https://broadcast-server.tor.us\";\n    if (!options.server.removeTimeout) options.server.removeTimeout = 1000 * 60 * 5; // 5 minutes\n    // custom methods\n    if (originalOptions.methods) options.methods = originalOptions.methods;\n    return options;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9vcHRpb25zLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQXlDO0FBQ2xDLFNBQVNDO0lBQ2QsSUFBSUMsa0JBQWtCQyxVQUFVQyxNQUFNLEdBQUcsS0FBS0QsU0FBUyxDQUFDLEVBQUUsS0FBS0UsWUFBWUYsU0FBUyxDQUFDLEVBQUUsR0FBRyxDQUFDO0lBQzNGLElBQUlHLFVBQVVDLEtBQUtDLEtBQUssQ0FBQ0QsS0FBS0UsU0FBUyxDQUFDUDtJQUN4QyxJQUFJLE9BQU9JLFFBQVFJLFVBQVUsS0FBSyxhQUFhSixRQUFRSSxVQUFVLEdBQUdWLHNEQUFlQTtJQUVuRixPQUFPO0lBQ1AsSUFBSSxPQUFPTSxRQUFRSyxnQkFBZ0IsS0FBSyxhQUFhTCxRQUFRSyxnQkFBZ0IsR0FBRztJQUVoRixhQUFhO0lBQ2IsSUFBSSxDQUFDTCxRQUFRTSxHQUFHLEVBQUVOLFFBQVFNLEdBQUcsR0FBRyxDQUFDO0lBQ2pDLDRDQUE0QztJQUM1QyxJQUFJLENBQUNOLFFBQVFNLEdBQUcsQ0FBQ0MsR0FBRyxFQUFFUCxRQUFRTSxHQUFHLENBQUNDLEdBQUcsR0FBRyxPQUFPO0lBQy9DLElBQUksQ0FBQ1AsUUFBUU0sR0FBRyxDQUFDRSxnQkFBZ0IsRUFBRVIsUUFBUU0sR0FBRyxDQUFDRSxnQkFBZ0IsR0FBRztJQUNsRSxxQ0FBcUM7SUFDckMsSUFBSVosZ0JBQWdCVSxHQUFHLElBQUksT0FBT1YsZ0JBQWdCVSxHQUFHLENBQUNHLE9BQU8sS0FBSyxZQUFZVCxRQUFRTSxHQUFHLENBQUNHLE9BQU8sR0FBR2IsZ0JBQWdCVSxHQUFHLENBQUNHLE9BQU87SUFFL0gsZUFBZTtJQUNmLElBQUksQ0FBQ1QsUUFBUVUsWUFBWSxFQUFFVixRQUFRVSxZQUFZLEdBQUcsQ0FBQztJQUNuRCxJQUFJLENBQUNWLFFBQVFVLFlBQVksQ0FBQ0MsYUFBYSxFQUFFWCxRQUFRVSxZQUFZLENBQUNDLGFBQWEsR0FBRyxPQUFPO0lBRXJGLFNBQVM7SUFDVCxJQUFJLENBQUNYLFFBQVFZLE1BQU0sRUFBRVosUUFBUVksTUFBTSxHQUFHLENBQUM7SUFDdkMsSUFBSSxDQUFDWixRQUFRWSxNQUFNLENBQUNDLEdBQUcsRUFBRWIsUUFBUVksTUFBTSxDQUFDQyxHQUFHLEdBQUc7SUFDOUMsSUFBSSxDQUFDYixRQUFRWSxNQUFNLENBQUNELGFBQWEsRUFBRVgsUUFBUVksTUFBTSxDQUFDRCxhQUFhLEdBQUcsT0FBTyxLQUFLLEdBQUcsWUFBWTtJQUU3RixpQkFBaUI7SUFDakIsSUFBSWYsZ0JBQWdCa0IsT0FBTyxFQUFFZCxRQUFRYyxPQUFPLEdBQUdsQixnQkFBZ0JrQixPQUFPO0lBQ3RFLE9BQU9kO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS9vcHRpb25zLmpzPzJmOTkiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXJlM1BDU3VwcG9ydGVkIH0gZnJvbSAnLi91dGlsJztcbmV4cG9ydCBmdW5jdGlvbiBmaWxsT3B0aW9uc1dpdGhEZWZhdWx0cygpIHtcbiAgdmFyIG9yaWdpbmFsT3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gIHZhciBvcHRpb25zID0gSlNPTi5wYXJzZShKU09OLnN0cmluZ2lmeShvcmlnaW5hbE9wdGlvbnMpKTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLnN1cHBvcnQzUEMgPT09ICd1bmRlZmluZWQnKSBvcHRpb25zLnN1cHBvcnQzUEMgPSBhcmUzUENTdXBwb3J0ZWQoKTtcblxuICAvLyBtYWluXG4gIGlmICh0eXBlb2Ygb3B0aW9ucy53ZWJXb3JrZXJTdXBwb3J0ID09PSAndW5kZWZpbmVkJykgb3B0aW9ucy53ZWJXb3JrZXJTdXBwb3J0ID0gdHJ1ZTtcblxuICAvLyBpbmRleGVkLWRiXG4gIGlmICghb3B0aW9ucy5pZGIpIG9wdGlvbnMuaWRiID0ge307XG4gIC8vICBhZnRlciB0aGlzIHRpbWUgdGhlIG1lc3NhZ2VzIGdldCBkZWxldGVkXG4gIGlmICghb3B0aW9ucy5pZGIudHRsKSBvcHRpb25zLmlkYi50dGwgPSAxMDAwICogNDU7XG4gIGlmICghb3B0aW9ucy5pZGIuZmFsbGJhY2tJbnRlcnZhbCkgb3B0aW9ucy5pZGIuZmFsbGJhY2tJbnRlcnZhbCA9IDE1MDtcbiAgLy8gIGhhbmRsZXMgYWJydXB0IGRiIG9uY2xvc2UgZXZlbnRzLlxuICBpZiAob3JpZ2luYWxPcHRpb25zLmlkYiAmJiB0eXBlb2Ygb3JpZ2luYWxPcHRpb25zLmlkYi5vbmNsb3NlID09PSAnZnVuY3Rpb24nKSBvcHRpb25zLmlkYi5vbmNsb3NlID0gb3JpZ2luYWxPcHRpb25zLmlkYi5vbmNsb3NlO1xuXG4gIC8vIGxvY2Fsc3RvcmFnZVxuICBpZiAoIW9wdGlvbnMubG9jYWxzdG9yYWdlKSBvcHRpb25zLmxvY2Fsc3RvcmFnZSA9IHt9O1xuICBpZiAoIW9wdGlvbnMubG9jYWxzdG9yYWdlLnJlbW92ZVRpbWVvdXQpIG9wdGlvbnMubG9jYWxzdG9yYWdlLnJlbW92ZVRpbWVvdXQgPSAxMDAwICogNjA7XG5cbiAgLy8gc2VydmVyXG4gIGlmICghb3B0aW9ucy5zZXJ2ZXIpIG9wdGlvbnMuc2VydmVyID0ge307XG4gIGlmICghb3B0aW9ucy5zZXJ2ZXIudXJsKSBvcHRpb25zLnNlcnZlci51cmwgPSAnaHR0cHM6Ly9icm9hZGNhc3Qtc2VydmVyLnRvci51cyc7XG4gIGlmICghb3B0aW9ucy5zZXJ2ZXIucmVtb3ZlVGltZW91dCkgb3B0aW9ucy5zZXJ2ZXIucmVtb3ZlVGltZW91dCA9IDEwMDAgKiA2MCAqIDU7IC8vIDUgbWludXRlc1xuXG4gIC8vIGN1c3RvbSBtZXRob2RzXG4gIGlmIChvcmlnaW5hbE9wdGlvbnMubWV0aG9kcykgb3B0aW9ucy5tZXRob2RzID0gb3JpZ2luYWxPcHRpb25zLm1ldGhvZHM7XG4gIHJldHVybiBvcHRpb25zO1xufSJdLCJuYW1lcyI6WyJhcmUzUENTdXBwb3J0ZWQiLCJmaWxsT3B0aW9uc1dpdGhEZWZhdWx0cyIsIm9yaWdpbmFsT3B0aW9ucyIsImFyZ3VtZW50cyIsImxlbmd0aCIsInVuZGVmaW5lZCIsIm9wdGlvbnMiLCJKU09OIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJzdXBwb3J0M1BDIiwid2ViV29ya2VyU3VwcG9ydCIsImlkYiIsInR0bCIsImZhbGxiYWNrSW50ZXJ2YWwiLCJvbmNsb3NlIiwibG9jYWxzdG9yYWdlIiwicmVtb3ZlVGltZW91dCIsInNlcnZlciIsInVybCIsIm1ldGhvZHMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/options.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js ***!
  \***********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PROMISE_RESOLVED_FALSE: () => (/* binding */ PROMISE_RESOLVED_FALSE),\n/* harmony export */   PROMISE_RESOLVED_TRUE: () => (/* binding */ PROMISE_RESOLVED_TRUE),\n/* harmony export */   PROMISE_RESOLVED_VOID: () => (/* binding */ PROMISE_RESOLVED_VOID),\n/* harmony export */   are3PCSupported: () => (/* binding */ are3PCSupported),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   log: () => (/* binding */ log),\n/* harmony export */   microSeconds: () => (/* binding */ microSeconds),\n/* harmony export */   randomInt: () => (/* binding */ randomInt),\n/* harmony export */   randomToken: () => (/* binding */ randomToken),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n/* harmony import */ var bowser__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! bowser */ \"(ssr)/./node_modules/bowser/src/bowser.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_1__);\n\n\n/**\n * returns true if the given object is a promise\n */ function isPromise(obj) {\n    if (obj && typeof obj.then === \"function\") {\n        return true;\n    } else {\n        return false;\n    }\n}\nvar PROMISE_RESOLVED_FALSE = Promise.resolve(false);\nvar PROMISE_RESOLVED_TRUE = Promise.resolve(true);\nvar PROMISE_RESOLVED_VOID = Promise.resolve();\nfunction sleep(time, resolveWith) {\n    if (!time) time = 0;\n    return new Promise(function(res) {\n        return setTimeout(function() {\n            return res(resolveWith);\n        }, time);\n    });\n}\nfunction randomInt(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n/**\n * https://stackoverflow.com/a/8084248\n */ function randomToken() {\n    return Math.random().toString(36).substring(2);\n}\nvar lastMs = 0;\nvar additional = 0;\n/**\n * returns the current time in micro-seconds,\n * WARNING: This is a pseudo-function\n * Performance.now is not reliable in webworkers, so we just make sure to never return the same time.\n * This is enough in browsers, and this function will not be used in nodejs.\n * The main reason for this hack is to ensure that BroadcastChannel behaves equal to production when it is used in fast-running unit tests.\n */ function microSeconds() {\n    var ms = new Date().getTime();\n    if (ms === lastMs) {\n        additional++;\n        return ms * 1000 + additional;\n    } else {\n        lastMs = ms;\n        additional = 0;\n        return ms * 1000;\n    }\n}\nfunction are3PCSupported() {\n    if (typeof navigator === \"undefined\") return false;\n    var browserInfo = bowser__WEBPACK_IMPORTED_MODULE_0__[\"default\"].parse(navigator.userAgent);\n    log.info(JSON.stringify(browserInfo), \"current browser info\");\n    var thirdPartyCookieSupport = true;\n    // brave\n    if (navigator.brave) {\n        thirdPartyCookieSupport = false;\n    }\n    // All webkit & gecko engine instances use itp (intelligent tracking prevention -\n    // https://webkit.org/tracking-prevention/#intelligent-tracking-prevention-itp)\n    if (browserInfo.engine.name === bowser__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ENGINE_MAP.WebKit || browserInfo.engine.name === bowser__WEBPACK_IMPORTED_MODULE_0__[\"default\"].ENGINE_MAP.Gecko) {\n        thirdPartyCookieSupport = false;\n    }\n    return thirdPartyCookieSupport;\n}\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_1___default().getLogger(\"broadcast-channel\");\nlog.setLevel(\"error\");\nvar setLogLevel = function setLogLevel(level) {\n    log.setLevel(level);\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9icm9hZGNhc3QtY2hhbm5lbC9kaXN0L2Vzbm9kZS91dGlsLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQTRCO0FBQ0k7QUFFaEM7O0NBRUMsR0FDTSxTQUFTRSxVQUFVQyxHQUFHO0lBQzNCLElBQUlBLE9BQU8sT0FBT0EsSUFBSUMsSUFBSSxLQUFLLFlBQVk7UUFDekMsT0FBTztJQUNULE9BQU87UUFDTCxPQUFPO0lBQ1Q7QUFDRjtBQUNPLElBQUlDLHlCQUF5QkMsUUFBUUMsT0FBTyxDQUFDLE9BQU87QUFDcEQsSUFBSUMsd0JBQXdCRixRQUFRQyxPQUFPLENBQUMsTUFBTTtBQUNsRCxJQUFJRSx3QkFBd0JILFFBQVFDLE9BQU8sR0FBRztBQUM5QyxTQUFTRyxNQUFNQyxJQUFJLEVBQUVDLFdBQVc7SUFDckMsSUFBSSxDQUFDRCxNQUFNQSxPQUFPO0lBQ2xCLE9BQU8sSUFBSUwsUUFBUSxTQUFVTyxHQUFHO1FBQzlCLE9BQU9DLFdBQVc7WUFDaEIsT0FBT0QsSUFBSUQ7UUFDYixHQUFHRDtJQUNMO0FBQ0Y7QUFDTyxTQUFTSSxVQUFVQyxHQUFHLEVBQUVDLEdBQUc7SUFDaEMsT0FBT0MsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQU1ILENBQUFBLE1BQU1ELE1BQU0sS0FBS0E7QUFDdEQ7QUFFQTs7Q0FFQyxHQUNNLFNBQVNLO0lBQ2QsT0FBT0gsS0FBS0UsTUFBTSxHQUFHRSxRQUFRLENBQUMsSUFBSUMsU0FBUyxDQUFDO0FBQzlDO0FBQ0EsSUFBSUMsU0FBUztBQUNiLElBQUlDLGFBQWE7QUFFakI7Ozs7OztDQU1DLEdBQ00sU0FBU0M7SUFDZCxJQUFJQyxLQUFLLElBQUlDLE9BQU9DLE9BQU87SUFDM0IsSUFBSUYsT0FBT0gsUUFBUTtRQUNqQkM7UUFDQSxPQUFPRSxLQUFLLE9BQU9GO0lBQ3JCLE9BQU87UUFDTEQsU0FBU0c7UUFDVEYsYUFBYTtRQUNiLE9BQU9FLEtBQUs7SUFDZDtBQUNGO0FBQ08sU0FBU0c7SUFDZCxJQUFJLE9BQU9DLGNBQWMsYUFBYSxPQUFPO0lBQzdDLElBQUlDLGNBQWNoQyw4Q0FBTUEsQ0FBQ2lDLEtBQUssQ0FBQ0YsVUFBVUcsU0FBUztJQUNsREMsSUFBSUMsSUFBSSxDQUFDQyxLQUFLQyxTQUFTLENBQUNOLGNBQWM7SUFDdEMsSUFBSU8sMEJBQTBCO0lBQzlCLFFBQVE7SUFDUixJQUFJUixVQUFVUyxLQUFLLEVBQUU7UUFDbkJELDBCQUEwQjtJQUM1QjtJQUNBLGlGQUFpRjtJQUNqRiwrRUFBK0U7SUFDL0UsSUFBSVAsWUFBWVMsTUFBTSxDQUFDQyxJQUFJLEtBQUsxQyw4Q0FBTUEsQ0FBQzJDLFVBQVUsQ0FBQ0MsTUFBTSxJQUFJWixZQUFZUyxNQUFNLENBQUNDLElBQUksS0FBSzFDLDhDQUFNQSxDQUFDMkMsVUFBVSxDQUFDRSxLQUFLLEVBQUU7UUFDL0dOLDBCQUEwQjtJQUM1QjtJQUNBLE9BQU9BO0FBQ1Q7QUFDTyxJQUFJSixNQUFNbEMseURBQWtCLENBQUMscUJBQXFCO0FBQ3pEa0MsSUFBSVksUUFBUSxDQUFDO0FBQ04sSUFBSUMsY0FBYyxTQUFTQSxZQUFZQyxLQUFLO0lBQ2pEZCxJQUFJWSxRQUFRLENBQUNFO0FBQ2YsRUFBRSIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AdG9ydXNsYWJzL2Jyb2FkY2FzdC1jaGFubmVsL2Rpc3QvZXNub2RlL3V0aWwuanM/OWEzMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgQm93c2VyIGZyb20gJ2Jvd3Nlcic7XG5pbXBvcnQgbG9nbGV2ZWwgZnJvbSAnbG9nbGV2ZWwnO1xuXG4vKipcbiAqIHJldHVybnMgdHJ1ZSBpZiB0aGUgZ2l2ZW4gb2JqZWN0IGlzIGEgcHJvbWlzZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNQcm9taXNlKG9iaikge1xuICBpZiAob2JqICYmIHR5cGVvZiBvYmoudGhlbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB0cnVlO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuZXhwb3J0IHZhciBQUk9NSVNFX1JFU09MVkVEX0ZBTFNFID0gUHJvbWlzZS5yZXNvbHZlKGZhbHNlKTtcbmV4cG9ydCB2YXIgUFJPTUlTRV9SRVNPTFZFRF9UUlVFID0gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuZXhwb3J0IHZhciBQUk9NSVNFX1JFU09MVkVEX1ZPSUQgPSBQcm9taXNlLnJlc29sdmUoKTtcbmV4cG9ydCBmdW5jdGlvbiBzbGVlcCh0aW1lLCByZXNvbHZlV2l0aCkge1xuICBpZiAoIXRpbWUpIHRpbWUgPSAwO1xuICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlcykge1xuICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiByZXMocmVzb2x2ZVdpdGgpO1xuICAgIH0sIHRpbWUpO1xuICB9KTtcbn1cbmV4cG9ydCBmdW5jdGlvbiByYW5kb21JbnQobWluLCBtYXgpIHtcbiAgcmV0dXJuIE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIChtYXggLSBtaW4gKyAxKSArIG1pbik7XG59XG5cbi8qKlxuICogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzgwODQyNDhcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJhbmRvbVRva2VuKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDIpO1xufVxudmFyIGxhc3RNcyA9IDA7XG52YXIgYWRkaXRpb25hbCA9IDA7XG5cbi8qKlxuICogcmV0dXJucyB0aGUgY3VycmVudCB0aW1lIGluIG1pY3JvLXNlY29uZHMsXG4gKiBXQVJOSU5HOiBUaGlzIGlzIGEgcHNldWRvLWZ1bmN0aW9uXG4gKiBQZXJmb3JtYW5jZS5ub3cgaXMgbm90IHJlbGlhYmxlIGluIHdlYndvcmtlcnMsIHNvIHdlIGp1c3QgbWFrZSBzdXJlIHRvIG5ldmVyIHJldHVybiB0aGUgc2FtZSB0aW1lLlxuICogVGhpcyBpcyBlbm91Z2ggaW4gYnJvd3NlcnMsIGFuZCB0aGlzIGZ1bmN0aW9uIHdpbGwgbm90IGJlIHVzZWQgaW4gbm9kZWpzLlxuICogVGhlIG1haW4gcmVhc29uIGZvciB0aGlzIGhhY2sgaXMgdG8gZW5zdXJlIHRoYXQgQnJvYWRjYXN0Q2hhbm5lbCBiZWhhdmVzIGVxdWFsIHRvIHByb2R1Y3Rpb24gd2hlbiBpdCBpcyB1c2VkIGluIGZhc3QtcnVubmluZyB1bml0IHRlc3RzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gbWljcm9TZWNvbmRzKCkge1xuICB2YXIgbXMgPSBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcbiAgaWYgKG1zID09PSBsYXN0TXMpIHtcbiAgICBhZGRpdGlvbmFsKys7XG4gICAgcmV0dXJuIG1zICogMTAwMCArIGFkZGl0aW9uYWw7XG4gIH0gZWxzZSB7XG4gICAgbGFzdE1zID0gbXM7XG4gICAgYWRkaXRpb25hbCA9IDA7XG4gICAgcmV0dXJuIG1zICogMTAwMDtcbiAgfVxufVxuZXhwb3J0IGZ1bmN0aW9uIGFyZTNQQ1N1cHBvcnRlZCgpIHtcbiAgaWYgKHR5cGVvZiBuYXZpZ2F0b3IgPT09ICd1bmRlZmluZWQnKSByZXR1cm4gZmFsc2U7XG4gIHZhciBicm93c2VySW5mbyA9IEJvd3Nlci5wYXJzZShuYXZpZ2F0b3IudXNlckFnZW50KTtcbiAgbG9nLmluZm8oSlNPTi5zdHJpbmdpZnkoYnJvd3NlckluZm8pLCAnY3VycmVudCBicm93c2VyIGluZm8nKTtcbiAgdmFyIHRoaXJkUGFydHlDb29raWVTdXBwb3J0ID0gdHJ1ZTtcbiAgLy8gYnJhdmVcbiAgaWYgKG5hdmlnYXRvci5icmF2ZSkge1xuICAgIHRoaXJkUGFydHlDb29raWVTdXBwb3J0ID0gZmFsc2U7XG4gIH1cbiAgLy8gQWxsIHdlYmtpdCAmIGdlY2tvIGVuZ2luZSBpbnN0YW5jZXMgdXNlIGl0cCAoaW50ZWxsaWdlbnQgdHJhY2tpbmcgcHJldmVudGlvbiAtXG4gIC8vIGh0dHBzOi8vd2Via2l0Lm9yZy90cmFja2luZy1wcmV2ZW50aW9uLyNpbnRlbGxpZ2VudC10cmFja2luZy1wcmV2ZW50aW9uLWl0cClcbiAgaWYgKGJyb3dzZXJJbmZvLmVuZ2luZS5uYW1lID09PSBCb3dzZXIuRU5HSU5FX01BUC5XZWJLaXQgfHwgYnJvd3NlckluZm8uZW5naW5lLm5hbWUgPT09IEJvd3Nlci5FTkdJTkVfTUFQLkdlY2tvKSB7XG4gICAgdGhpcmRQYXJ0eUNvb2tpZVN1cHBvcnQgPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gdGhpcmRQYXJ0eUNvb2tpZVN1cHBvcnQ7XG59XG5leHBvcnQgdmFyIGxvZyA9IGxvZ2xldmVsLmdldExvZ2dlcignYnJvYWRjYXN0LWNoYW5uZWwnKTtcbmxvZy5zZXRMZXZlbCgnZXJyb3InKTtcbmV4cG9ydCB2YXIgc2V0TG9nTGV2ZWwgPSBmdW5jdGlvbiBzZXRMb2dMZXZlbChsZXZlbCkge1xuICBsb2cuc2V0TGV2ZWwobGV2ZWwpO1xufTsiXSwibmFtZXMiOlsiQm93c2VyIiwibG9nbGV2ZWwiLCJpc1Byb21pc2UiLCJvYmoiLCJ0aGVuIiwiUFJPTUlTRV9SRVNPTFZFRF9GQUxTRSIsIlByb21pc2UiLCJyZXNvbHZlIiwiUFJPTUlTRV9SRVNPTFZFRF9UUlVFIiwiUFJPTUlTRV9SRVNPTFZFRF9WT0lEIiwic2xlZXAiLCJ0aW1lIiwicmVzb2x2ZVdpdGgiLCJyZXMiLCJzZXRUaW1lb3V0IiwicmFuZG9tSW50IiwibWluIiwibWF4IiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwicmFuZG9tVG9rZW4iLCJ0b1N0cmluZyIsInN1YnN0cmluZyIsImxhc3RNcyIsImFkZGl0aW9uYWwiLCJtaWNyb1NlY29uZHMiLCJtcyIsIkRhdGUiLCJnZXRUaW1lIiwiYXJlM1BDU3VwcG9ydGVkIiwibmF2aWdhdG9yIiwiYnJvd3NlckluZm8iLCJwYXJzZSIsInVzZXJBZ2VudCIsImxvZyIsImluZm8iLCJKU09OIiwic3RyaW5naWZ5IiwidGhpcmRQYXJ0eUNvb2tpZVN1cHBvcnQiLCJicmF2ZSIsImVuZ2luZSIsIm5hbWUiLCJFTkdJTkVfTUFQIiwiV2ViS2l0IiwiR2Vja28iLCJnZXRMb2dnZXIiLCJzZXRMZXZlbCIsInNldExvZ0xldmVsIiwibGV2ZWwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/broadcast-channel/dist/esnode/util.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/eccrypto/dist/browser.js":
/*!**********************************************************!*\
  !*** ./node_modules/@toruslabs/eccrypto/dist/browser.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

"use strict";
eval("\nconst EC = (__webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\").ec);\nconst ec = new EC(\"secp256k1\");\nconst browserCrypto = global.crypto || global.msCrypto || {};\nconst subtle = browserCrypto.subtle || browserCrypto.webkitSubtle;\nconst nodeCrypto = __webpack_require__(/*! crypto */ \"crypto\");\nconst EC_GROUP_ORDER = Buffer.from(\"fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141\", \"hex\");\nconst ZERO32 = Buffer.alloc(32, 0);\nfunction assert(condition, message) {\n    if (!condition) {\n        throw new Error(message || \"Assertion failed\");\n    }\n}\nfunction isScalar(x) {\n    return Buffer.isBuffer(x) && x.length === 32;\n}\nfunction isValidPrivateKey(privateKey) {\n    if (!isScalar(privateKey)) {\n        return false;\n    }\n    return privateKey.compare(ZERO32) > 0 && // > 0\n    privateKey.compare(EC_GROUP_ORDER) < 0; // < G\n}\n// Compare two buffers in constant time to prevent timing attacks.\nfunction equalConstTime(b1, b2) {\n    if (b1.length !== b2.length) {\n        return false;\n    }\n    let res = 0;\n    for(let i = 0; i < b1.length; i++){\n        res |= b1[i] ^ b2[i]; // jshint ignore:line\n    }\n    return res === 0;\n}\n/* This must check if we're in the browser or\nnot, since the functions are different and does\nnot convert using browserify */ function randomBytes(size) {\n    const arr = new Uint8Array(size);\n    if (typeof browserCrypto.getRandomValues === \"undefined\") {\n        return Buffer.from(nodeCrypto.randomBytes(size));\n    } else {\n        browserCrypto.getRandomValues(arr);\n    }\n    return Buffer.from(arr);\n}\nasync function sha512(msg) {\n    if (subtle) {\n        const hash = await subtle.digest(\"SHA-512\", msg);\n        const result = new Uint8Array(hash);\n        return result;\n    }\n    const hash = nodeCrypto.createHash(\"sha512\");\n    const result = hash.update(msg).digest();\n    return new Uint8Array(result);\n}\nfunction getAes(op) {\n    return async function(iv, key, data) {\n        if (subtle) {\n            const importAlgorithm = {\n                name: \"AES-CBC\"\n            };\n            const cryptoKey = await subtle.importKey(\"raw\", key, importAlgorithm, false, [\n                op\n            ]);\n            const encAlgorithm = {\n                name: \"AES-CBC\",\n                iv: iv\n            };\n            const result = await subtle[op](encAlgorithm, cryptoKey, data);\n            return Buffer.from(new Uint8Array(result));\n        } else if (op === \"encrypt\") {\n            const cipher = nodeCrypto.createCipheriv(\"aes-256-cbc\", key, iv);\n            let firstChunk = cipher.update(data);\n            let secondChunk = cipher.final();\n            return Buffer.concat([\n                firstChunk,\n                secondChunk\n            ]);\n        } else if (op === \"decrypt\") {\n            const decipher = nodeCrypto.createDecipheriv(\"aes-256-cbc\", key, iv);\n            let firstChunk = decipher.update(data);\n            let secondChunk = decipher.final();\n            return Buffer.concat([\n                firstChunk,\n                secondChunk\n            ]);\n        }\n    };\n}\nconst aesCbcEncrypt = getAes(\"encrypt\");\nconst aesCbcDecrypt = getAes(\"decrypt\");\nasync function hmacSha256Sign(key, msg) {\n    if (subtle) {\n        const importAlgorithm = {\n            name: \"HMAC\",\n            hash: {\n                name: \"SHA-256\"\n            }\n        };\n        const cryptoKey = await subtle.importKey(\"raw\", new Uint8Array(key), importAlgorithm, false, [\n            \"sign\",\n            \"verify\"\n        ]);\n        const sig = await subtle.sign(\"HMAC\", cryptoKey, msg);\n        const result = Buffer.from(new Uint8Array(sig));\n        return result;\n    }\n    const hmac = nodeCrypto.createHmac(\"sha256\", Buffer.from(key));\n    hmac.update(msg);\n    const result = hmac.digest();\n    return result;\n}\nasync function hmacSha256Verify(key, msg, sig) {\n    const expectedSig = await hmacSha256Sign(key, msg);\n    return equalConstTime(expectedSig, sig);\n}\n/**\n * Generate a new valid private key. Will use the window.crypto or window.msCrypto as source\n * depending on your browser.\n * @return {Buffer} A 32-byte private key.\n * @function\n */ exports.generatePrivate = function() {\n    let privateKey = randomBytes(32);\n    while(!isValidPrivateKey(privateKey)){\n        privateKey = randomBytes(32);\n    }\n    return privateKey;\n};\nconst getPublic = exports.getPublic = function(privateKey) {\n    // This function has sync API so we throw an error immediately.\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    // XXX(Kagami): `elliptic.utils.encode` returns array for every\n    // encoding except `hex`.\n    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(\"arr\"));\n};\n/**\n * Get compressed version of public key.\n */ exports.getPublicCompressed = function(privateKey) {\n    // jshint ignore:line\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    // See https://github.com/wanderer/secp256k1-node/issues/46\n    let compressed = true;\n    return Buffer.from(ec.keyFromPrivate(privateKey).getPublic(compressed, \"arr\"));\n};\n// NOTE(Kagami): We don't use promise shim in Browser implementation\n// because it's supported natively in new browsers (see\n// <http://caniuse.com/#feat=promises>) and we can use only new browsers\n// because of the WebCryptoAPI (see\n// <http://caniuse.com/#feat=cryptography>).\nexports.sign = async function(privateKey, msg) {\n    assert(privateKey.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKey), \"Bad private key\");\n    assert(msg.length > 0, \"Message should not be empty\");\n    assert(msg.length <= 32, \"Message is too long\");\n    return Buffer.from(ec.sign(msg, privateKey, {\n        canonical: true\n    }).toDER());\n};\nexports.verify = async function(publicKey, msg, sig) {\n    assert(publicKey.length === 65 || publicKey.length === 33, \"Bad public key\");\n    if (publicKey.length === 65) {\n        assert(publicKey[0] === 4, \"Bad public key\");\n    }\n    if (publicKey.length === 33) {\n        assert(publicKey[0] === 2 || publicKey[0] === 3, \"Bad public key\");\n    }\n    assert(msg.length > 0, \"Message should not be empty\");\n    assert(msg.length <= 32, \"Message is too long\");\n    if (ec.verify(msg, sig, publicKey)) {\n        return null;\n    } else {\n        throw new Error(\"Bad signature\");\n    }\n};\nconst deriveUnpadded = exports.derive = async function(privateKeyA, publicKeyB) {\n    assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n    assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n    assert(privateKeyA.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n    assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n    if (publicKeyB.length === 65) {\n        assert(publicKeyB[0] === 4, \"Bad public key\");\n    }\n    if (publicKeyB.length === 33) {\n        assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n    }\n    const keyA = ec.keyFromPrivate(privateKeyA);\n    const keyB = ec.keyFromPublic(publicKeyB);\n    const Px = keyA.derive(keyB.getPublic()); // BN instance\n    return Buffer.from(Px.toArray());\n};\nconst derivePadded = exports.derivePadded = async function(privateKeyA, publicKeyB) {\n    assert(Buffer.isBuffer(privateKeyA), \"Bad private key\");\n    assert(Buffer.isBuffer(publicKeyB), \"Bad public key\");\n    assert(privateKeyA.length === 32, \"Bad private key\");\n    assert(isValidPrivateKey(privateKeyA), \"Bad private key\");\n    assert(publicKeyB.length === 65 || publicKeyB.length === 33, \"Bad public key\");\n    if (publicKeyB.length === 65) {\n        assert(publicKeyB[0] === 4, \"Bad public key\");\n    }\n    if (publicKeyB.length === 33) {\n        assert(publicKeyB[0] === 2 || publicKeyB[0] === 3, \"Bad public key\");\n    }\n    const keyA = ec.keyFromPrivate(privateKeyA);\n    const keyB = ec.keyFromPublic(publicKeyB);\n    const Px = keyA.derive(keyB.getPublic()); // BN instance\n    return Buffer.from(Px.toString(16, 64), \"hex\");\n};\nexports.encrypt = async function(publicKeyTo, msg, opts) {\n    opts = opts || {};\n    // Tmp variables to save context from flat promises;\n    let iv, ephemPublicKey, ciphertext, macKey;\n    let ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n    // There is a very unlikely possibility that it is not a valid key\n    while(!isValidPrivateKey(ephemPrivateKey)){\n        ephemPrivateKey = opts.ephemPrivateKey || randomBytes(32);\n    }\n    ephemPublicKey = getPublic(ephemPrivateKey);\n    const Px = await deriveUnpadded(ephemPrivateKey, publicKeyTo);\n    const hash = await sha512(Px);\n    iv = opts.iv || randomBytes(16);\n    const encryptionKey = hash.slice(0, 32);\n    macKey = hash.slice(32);\n    const data = await aesCbcEncrypt(iv, encryptionKey, msg);\n    ciphertext = data;\n    const dataToMac = Buffer.concat([\n        iv,\n        ephemPublicKey,\n        ciphertext\n    ]);\n    const mac = await hmacSha256Sign(macKey, dataToMac);\n    return {\n        iv: iv,\n        ephemPublicKey: ephemPublicKey,\n        ciphertext: ciphertext,\n        mac: mac\n    };\n};\nconst decrypt = async function(privateKey, opts) {\n    let padding = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    // Tmp variable to save context from flat promises;\n    let encryptionKey;\n    const derive = padding ? derivePadded : deriveUnpadded;\n    const Px = await derive(privateKey, opts.ephemPublicKey);\n    const hash = await sha512(Px);\n    encryptionKey = hash.slice(0, 32);\n    const macKey = hash.slice(32);\n    const dataToMac = Buffer.concat([\n        opts.iv,\n        opts.ephemPublicKey,\n        opts.ciphertext\n    ]);\n    const macGood = await hmacSha256Verify(macKey, dataToMac, opts.mac);\n    if (!macGood && padding === false) {\n        return decrypt(privateKey, opts, true);\n    } else if (!macGood && padding === true) {\n        throw new Error(\"bad MAC after trying padded\");\n    }\n    const msg = await aesCbcDecrypt(opts.iv, encryptionKey, opts.ciphertext);\n    return Buffer.from(new Uint8Array(msg));\n};\nexports.decrypt = decrypt;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/eccrypto/dist/browser.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAPIKey: () => (/* binding */ clearAPIKey),\n/* harmony export */   clearEmbedHost: () => (/* binding */ clearEmbedHost),\n/* harmony export */   enableSentryTracing: () => (/* binding */ enableSentryTracing),\n/* harmony export */   gatewayAuthHeader: () => (/* binding */ gatewayAuthHeader),\n/* harmony export */   gatewayEmbedHostHeader: () => (/* binding */ gatewayEmbedHostHeader),\n/* harmony export */   generateJsonRPCObject: () => (/* binding */ generateJsonRPCObject),\n/* harmony export */   get: () => (/* binding */ get),\n/* harmony export */   getAPIKey: () => (/* binding */ getAPIKey),\n/* harmony export */   getEmbedHost: () => (/* binding */ getEmbedHost),\n/* harmony export */   patch: () => (/* binding */ patch),\n/* harmony export */   post: () => (/* binding */ post),\n/* harmony export */   promiseRace: () => (/* binding */ promiseRace),\n/* harmony export */   promiseTimeout: () => (/* binding */ promiseTimeout),\n/* harmony export */   put: () => (/* binding */ put),\n/* harmony export */   remove: () => (/* binding */ remove),\n/* harmony export */   setAPIKey: () => (/* binding */ setAPIKey),\n/* harmony export */   setEmbedHost: () => (/* binding */ setEmbedHost),\n/* harmony export */   setLogLevel: () => (/* binding */ setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! lodash.merge */ \"(ssr)/./node_modules/lodash.merge/index.js\");\n/* harmony import */ var lodash_merge__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(lodash_merge__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_2__);\n\n\n\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nconst log = loglevel__WEBPACK_IMPORTED_MODULE_2___default().getLogger(\"http-helpers\");\nlog.setLevel(loglevel__WEBPACK_IMPORTED_MODULE_2__.levels.INFO);\nlet apiKey = \"torus-default\";\nlet embedHost = \"\";\n// #region API Keys\nconst gatewayAuthHeader = \"x-api-key\";\nconst gatewayEmbedHostHeader = \"x-embed-host\";\nlet sentry = null;\nconst tracingOrigins = [];\nconst tracingPaths = [];\nfunction enableSentryTracing(_sentry, _tracingOrigins, _tracingPaths) {\n    sentry = _sentry;\n    tracingOrigins.push(..._tracingOrigins);\n    tracingPaths.push(..._tracingPaths);\n}\nfunction setEmbedHost(embedHost_) {\n    embedHost = embedHost_;\n}\nfunction clearEmbedHost() {\n    embedHost = \"\";\n}\nfunction getEmbedHost() {\n    return embedHost;\n}\nfunction setAPIKey(apiKey_) {\n    apiKey = apiKey_;\n}\nfunction clearAPIKey() {\n    apiKey = \"torus-default\";\n}\nfunction getAPIKey() {\n    return apiKey;\n}\n// #endregion\nfunction setLogLevel(level) {\n    log.setLevel(level);\n}\nasync function fetchAndTrace(url, init) {\n    let _url = null;\n    try {\n        _url = new URL(url);\n    } catch (error) {}\n    if (sentry && _url && (tracingOrigins.includes(_url.origin) || tracingPaths.includes(_url.pathname))) {\n        const transaction = sentry.startTransaction({\n            name: url\n        });\n        const span = transaction.startChild({\n            op: \"http\"\n        }); // This function returns a Span\n        const response = await fetch(url, init);\n        span.finish(); // Remember that only finished spans will be sent with the transaction\n        transaction.finish(); // Finishing the transaction will send it to Sentry\n        return response;\n    }\n    return fetch(url, init);\n}\nfunction getApiKeyHeaders() {\n    const headers = {};\n    if (apiKey) headers[gatewayAuthHeader] = apiKey;\n    if (embedHost) headers[gatewayEmbedHostHeader] = embedHost;\n    return headers;\n}\nfunction debugLogResponse(response) {\n    log.info(`Response: ${response.status} ${response.statusText}`);\n    log.info(`Url: ${response.url}`);\n}\nfunction logTracingHeader(response) {\n    log.info(`Request tracing with traceID=${response.headers.get(\"x-web3-correlation-id\")}`);\n}\nconst promiseTimeout = (ms, promise)=>{\n    const timeout = new Promise((resolve, reject)=>{\n        const id = setTimeout(()=>{\n            clearTimeout(id);\n            reject(new Error(`Timed out in ${ms}ms`));\n        }, ms);\n    });\n    return Promise.race([\n        promise,\n        timeout\n    ]);\n};\nconst get = async function(url) {\n    let options_ = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let customOptions = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {}\n    };\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"GET\"\n    });\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst post = function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"POST\"\n    });\n    // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    return promiseTimeout(customOptions.timeout || 60000, fetchAndTrace(url, options).then((response)=>{\n        if (customOptions.logTracingHeader) {\n            logTracingHeader(response);\n        }\n        if (response.ok) {\n            return response.json();\n        }\n        debugLogResponse(response);\n        throw response;\n    }));\n};\nconst patch = async function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"PATCH\"\n    });\n    // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst put = async function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"PUT\"\n    });\n    // deep merge changes the structure of form data and url encoded data ,\n    // so we should not deepmerge body data\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst remove = async function(url) {\n    let data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let options_ = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    let customOptions = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n    const defaultOptions = {\n        mode: \"cors\",\n        headers: {\n            \"Content-Type\": \"application/json; charset=utf-8\"\n        }\n    };\n    // for multipart request browser/client will add multipart content type\n    // along with multipart boundary , so for multipart request send\n    // content-type: undefined or send with multipart boundary if already known\n    if (customOptions.useAPIKey) {\n        defaultOptions.headers = _objectSpread(_objectSpread({}, defaultOptions.headers), getApiKeyHeaders());\n    }\n    const options = lodash_merge__WEBPACK_IMPORTED_MODULE_1___default()(defaultOptions, options_, {\n        method: \"DELETE\"\n    });\n    if (customOptions.isUrlEncodedData) {\n        // for multipart request browser/client will add multipart content type\n        // along with multipart boundary , so for multipart request send\n        // content-type: undefined or send with multipart boundary if already known\n        options.body = data;\n        // If url encoded data, this must not be the content type\n        if (options.headers[\"Content-Type\"] === \"application/json; charset=utf-8\") delete options.headers[\"Content-Type\"];\n    } else {\n        options.body = JSON.stringify(data);\n    }\n    const response = await fetchAndTrace(url, options);\n    if (response.ok) {\n        return response.json();\n    }\n    debugLogResponse(response);\n    throw response;\n};\nconst generateJsonRPCObject = (method, parameters)=>({\n        jsonrpc: \"2.0\",\n        method,\n        id: 10,\n        params: parameters\n    });\nconst promiseRace = function(url, options) {\n    let timeout = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 60000;\n    return Promise.race([\n        get(url, options),\n        new Promise((resolve, reject)=>{\n            setTimeout(()=>{\n                reject(new Error(\"timed out\"));\n            }, timeout);\n        })\n    ]);\n};\n //# sourceMappingURL=httpHelpers.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   decryptData: () => (/* binding */ decryptData),\n/* harmony export */   \"default\": () => (/* binding */ MetadataStorageLayer),\n/* harmony export */   ec: () => (/* binding */ ec),\n/* harmony export */   encParamsBufToHex: () => (/* binding */ encParamsBufToHex),\n/* harmony export */   encParamsHexToBuf: () => (/* binding */ encParamsHexToBuf),\n/* harmony export */   encryptAndSetData: () => (/* binding */ encryptAndSetData),\n/* harmony export */   encryptData: () => (/* binding */ encryptData),\n/* harmony export */   getAndDecryptData: () => (/* binding */ getAndDecryptData),\n/* harmony export */   getDeviceShare: () => (/* binding */ getDeviceShare),\n/* harmony export */   getTorusShare: () => (/* binding */ getTorusShare),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   setDeviceShare: () => (/* binding */ setDeviceShare),\n/* harmony export */   setTorusShare: () => (/* binding */ setTorusShare)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! json-stable-stringify */ \"(ssr)/./node_modules/json-stable-stringify/index.js\");\n/* harmony import */ var json_stable_stringify__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(json_stable_stringify__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! elliptic */ \"(ssr)/./node_modules/elliptic/lib/elliptic.js\");\n/* harmony import */ var elliptic__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(elliptic__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ethereum-cryptography/keccak */ \"(ssr)/./node_modules/ethereum-cryptography/esm/keccak.js\");\n/* harmony import */ var _toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @toruslabs/eccrypto */ \"(ssr)/./node_modules/@toruslabs/eccrypto/dist/browser.js\");\n\n\n\n\n\n\nfunction keccak256(a) {\n    return Buffer.from((0,ethereum_cryptography_keccak__WEBPACK_IMPORTED_MODULE_4__.keccak256)(a));\n}\nconst ec = new elliptic__WEBPACK_IMPORTED_MODULE_3__.ec(\"secp256k1\");\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nclass MetadataStorageLayer {\n    // ms\n    constructor(){\n        let metadataHost = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : \"https://metadata.tor.us\";\n        let serverTimeOffset = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"metadataHost\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"serverTimeOffset\", void 0);\n        this.metadataHost = metadataHost;\n        this.serverTimeOffset = serverTimeOffset;\n    }\n    static setAPIKey(apiKey) {\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.setAPIKey)(apiKey);\n    }\n    static setEmbedHost(embedHost) {\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.setEmbedHost)(embedHost);\n    }\n    generateMetadataParams(message, privateKeyHex) {\n        const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n        const setData = {\n            data: message,\n            timestamp: Math.floor(this.serverTimeOffset + Date.now() / 1000).toString(16)\n        };\n        const sig = key.sign(keccak256(Buffer.from(json_stable_stringify__WEBPACK_IMPORTED_MODULE_2___default()(setData), \"utf8\")));\n        return {\n            pub_key_X: key.getPublic().getX().toString(16, 64),\n            pub_key_Y: key.getPublic().getY().toString(16, 64),\n            set_data: setData,\n            signature: Buffer.from(sig.r.toString(16, 64) + sig.s.toString(16, 64) + (sig.recoveryParam?.toString(16).padStart(2, \"0\").slice(-2) ?? \"00\"), \"hex\").toString(\"base64\")\n        };\n    }\n    generatePubKeyParams(privateKeyHex) {\n        const key = ec.keyFromPrivate(privateKeyHex, \"hex\");\n        return {\n            pub_key_X: key.getPublic().getX().toString(16, 64),\n            pub_key_Y: key.getPublic().getY().toString(16, 64)\n        };\n    }\n    async setMetadata(data, namespace, options) {\n        const params = namespace !== null ? _objectSpread(_objectSpread({}, data), {}, {\n            namespace\n        }) : data;\n        const metadataResponse = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.post)(`${this.metadataHost}/set`, params, options, {\n            useAPIKey: true\n        });\n        return metadataResponse.message;\n    }\n    async getMetadata(pubKey, namespace, options) {\n        const params = namespace !== null ? _objectSpread(_objectSpread({}, pubKey), {}, {\n            namespace\n        }) : pubKey;\n        const metadataResponse = await (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_1__.post)(`${this.metadataHost}/get`, params, options, {\n            useAPIKey: true\n        });\n        return metadataResponse.message;\n    }\n}\nconst WEBAUTHN_TORUS_SHARE = \"webauthn_torus_share\";\nconst WEBAUTHN_DEVICE_SHARE = \"webauthn_device_share\";\nfunction encParamsHexToBuf(encParamsHex) {\n    return {\n        iv: Buffer.from(encParamsHex.iv, \"hex\"),\n        ephemPublicKey: Buffer.from(encParamsHex.ephemPublicKey, \"hex\"),\n        ciphertext: Buffer.from(encParamsHex.ciphertext, \"hex\"),\n        mac: Buffer.from(encParamsHex.mac, \"hex\")\n    };\n}\nfunction encParamsBufToHex(encParams) {\n    return {\n        iv: Buffer.from(encParams.iv).toString(\"hex\"),\n        ephemPublicKey: Buffer.from(encParams.ephemPublicKey).toString(\"hex\"),\n        ciphertext: Buffer.from(encParams.ciphertext).toString(\"hex\"),\n        mac: Buffer.from(encParams.mac).toString(\"hex\")\n    };\n}\nasync function encryptData(privKeyHex, d) {\n    const serializedDec = JSON.stringify(d);\n    const serializedBuf = Buffer.from(serializedDec, \"utf-8\");\n    const encParams = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_5__.encrypt)((0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_5__.getPublic)(Buffer.from(privKeyHex, \"hex\")), serializedBuf);\n    const encParamsHex = encParamsBufToHex(encParams);\n    const sData = JSON.stringify(encParamsHex);\n    return sData;\n}\nasync function decryptData(privKeyHex, d) {\n    const encParamsHex = JSON.parse(d);\n    const encParams = encParamsHexToBuf(encParamsHex);\n    const keyPair = ec.keyFromPrivate(privKeyHex);\n    const serializedBuf = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_5__.decrypt)(Buffer.from(keyPair.getPrivate().toString(\"hex\", 64), \"hex\"), encParams);\n    const serializedDec = serializedBuf.toString(\"utf-8\");\n    const data = JSON.parse(serializedDec);\n    return data;\n}\nasync function getAndDecryptData(m, privKeyHex, namespace) {\n    const keyPair = ec.keyFromPrivate(privKeyHex);\n    const pubKey = keyPair.getPublic();\n    const serializedData = await m.getMetadata({\n        pub_key_X: pubKey.getX().toString(16),\n        pub_key_Y: pubKey.getY().toString(16)\n    }, namespace);\n    if (!serializedData) {\n        return null;\n    }\n    const data = await decryptData(privKeyHex, serializedData);\n    return data;\n}\nasync function encryptAndSetData(m, privKeyHex, d, namespace) {\n    const sData = await encryptData(privKeyHex, d);\n    const metadataParams = m.generateMetadataParams(sData, privKeyHex);\n    await m.setMetadata(metadataParams, namespace);\n}\nasync function setTorusShare(m, webAuthnPubKey, webAuthnRefHex, subspace, subspaceData) {\n    const refKeyPair = ec.keyFromPrivate(webAuthnRefHex);\n    const privKey = refKeyPair.getPrivate();\n    const pubKey = ec.keyFromPublic({\n        x: webAuthnPubKey.pub_key_X,\n        y: webAuthnPubKey.pub_key_Y\n    });\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n    let d = {};\n    if (data) d = data;\n    const serializedSubspaceData = JSON.stringify(subspaceData);\n    const serializedSubspaceDataBuf = Buffer.from(serializedSubspaceData, \"utf-8\");\n    const encSubspaceData = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_5__.encrypt)(Buffer.from(pubKey.getPublic(\"hex\"), \"hex\"), serializedSubspaceDataBuf);\n    const encSubspaceDataHex = encParamsBufToHex(encSubspaceData);\n    d[subspace] = encSubspaceDataHex;\n    await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_TORUS_SHARE);\n}\nasync function setDeviceShare(m, webAuthnRefHex, subspace, subspaceData) {\n    const keyPair = ec.keyFromPrivate(webAuthnRefHex);\n    const privKey = keyPair.getPrivate();\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n    let d = {};\n    if (data) d = data;\n    d[subspace] = subspaceData;\n    await encryptAndSetData(m, privKey.toString(\"hex\", 64), d, WEBAUTHN_DEVICE_SHARE);\n}\nasync function getTorusShare(m, webAuthnKeyHex, webAuthnRefHex, subspace) {\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_TORUS_SHARE);\n    if (!data) return null;\n    const encParamsHex = data[subspace];\n    if (!encParamsHex) return null;\n    const encParams = encParamsHexToBuf(encParamsHex);\n    const keyPair = ec.keyFromPrivate(webAuthnKeyHex);\n    const privKey = keyPair.getPrivate();\n    const serializedSubspaceDataBuf = await (0,_toruslabs_eccrypto__WEBPACK_IMPORTED_MODULE_5__.decrypt)(Buffer.from(privKey.toString(\"hex\", 64), \"hex\"), encParams);\n    const serializedSubspaceData = serializedSubspaceDataBuf.toString(\"utf-8\");\n    const subspaceData = JSON.parse(serializedSubspaceData);\n    return subspaceData;\n}\nasync function getDeviceShare(m, webAuthnRefHex, subspace) {\n    const data = await getAndDecryptData(m, webAuthnRefHex, WEBAUTHN_DEVICE_SHARE);\n    if (data) return data[subspace];\n    return null;\n}\n //# sourceMappingURL=metadataHelpers.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/metadata-helpers/dist/metadataHelpers.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js ***!
  \**************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BasePostMessageStream: () => (/* binding */ BasePostMessageStream),\n/* harmony export */   IGNORE_SUBSTREAM: () => (/* binding */ IGNORE_SUBSTREAM),\n/* harmony export */   JRPCEngine: () => (/* binding */ JRPCEngine),\n/* harmony export */   ObjectMultiplex: () => (/* binding */ ObjectMultiplex),\n/* harmony export */   PostMessageStream: () => (/* binding */ PostMessageStream),\n/* harmony export */   SafeEventEmitter: () => (/* binding */ SafeEventEmitter),\n/* harmony export */   SerializableError: () => (/* binding */ SerializableError),\n/* harmony export */   Substream: () => (/* binding */ Substream),\n/* harmony export */   createAsyncMiddleware: () => (/* binding */ createAsyncMiddleware),\n/* harmony export */   createEngineStream: () => (/* binding */ createEngineStream),\n/* harmony export */   createErrorMiddleware: () => (/* binding */ createErrorMiddleware),\n/* harmony export */   createIdRemapMiddleware: () => (/* binding */ createIdRemapMiddleware),\n/* harmony export */   createLoggerMiddleware: () => (/* binding */ createLoggerMiddleware),\n/* harmony export */   createScaffoldMiddleware: () => (/* binding */ createScaffoldMiddleware),\n/* harmony export */   createStreamMiddleware: () => (/* binding */ createStreamMiddleware),\n/* harmony export */   getRpcPromiseCallback: () => (/* binding */ getRpcPromiseCallback),\n/* harmony export */   mergeMiddleware: () => (/* binding */ mergeMiddleware),\n/* harmony export */   setupMultiplex: () => (/* binding */ setupMultiplex)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! readable-stream */ \"(ssr)/./node_modules/readable-stream/readable.js\");\n/* harmony import */ var readable_stream__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(readable_stream__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/openlogin-utils */ \"(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! events */ \"events\");\n/* harmony import */ var events__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(events__WEBPACK_IMPORTED_MODULE_3__);\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! fast-safe-stringify */ \"(ssr)/./node_modules/fast-safe-stringify/index.js\");\n/* harmony import */ var fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eth-rpc-errors */ \"(ssr)/./node_modules/eth-rpc-errors/dist/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! end-of-stream */ \"(ssr)/./node_modules/end-of-stream/index.js\");\n/* harmony import */ var end_of_stream__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(end_of_stream__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! once */ \"(ssr)/./node_modules/once/once.js\");\n/* harmony import */ var once__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(once__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_8__);\n\n\n\n\n\n\n\n\n\nfunction noop() {\n    return undefined;\n}\nconst SYN = \"SYN\";\nconst ACK = \"ACK\";\nconst BRK = \"BRK\";\nclass BasePostMessageStream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { name, target, targetWindow = window, targetOrigin = \"*\" } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_init\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_haveSyn\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetWindow\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_targetOrigin\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_onMessage\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_synIntervalId\", void 0);\n        if (!name || !target) {\n            throw new Error(\"Invalid input.\");\n        }\n        this._init = false;\n        this._haveSyn = false;\n        this._name = name;\n        this._target = target; // target origin\n        this._targetWindow = targetWindow;\n        this._targetOrigin = targetOrigin;\n        this._onMessage = this.onMessage.bind(this);\n        this._synIntervalId = null;\n        window.addEventListener(\"message\", this._onMessage, false);\n        this._handShake();\n    }\n    _break() {\n        this.cork();\n        this._write(BRK, null, noop);\n        this._haveSyn = false;\n        this._init = false;\n    }\n    _handShake() {\n        this._write(SYN, null, noop);\n        this.cork();\n    }\n    _onData(data) {\n        if (!this._init) {\n            // listen for handshake\n            if (data === SYN) {\n                this._haveSyn = true;\n                this._write(ACK, null, noop);\n            } else if (data === ACK) {\n                this._init = true;\n                if (!this._haveSyn) {\n                    this._write(ACK, null, noop);\n                }\n                this.uncork();\n            }\n        } else if (data === BRK) {\n            this._break();\n        } else {\n            // forward message\n            try {\n                this.push(data);\n            } catch (err) {\n                this.emit(\"error\", err);\n            }\n        }\n    }\n    _postMessage(data) {\n        const originConstraint = this._targetOrigin;\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n    onMessage(event) {\n        const message = event.data;\n        // validate message\n        if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n            return;\n        }\n        this._onData(message.data);\n    }\n    _read() {\n        return undefined;\n    }\n    _write(data, _, cb) {\n        this._postMessage(data);\n        cb();\n    }\n    _destroy() {\n        window.removeEventListener(\"message\", this._onMessage, false);\n    }\n}\nfunction safeApply(handler, context, args) {\n    try {\n        Reflect.apply(handler, context, args);\n    } catch (err) {\n        // Throw error after timeout so as not to interrupt the stack\n        setTimeout(()=>{\n            throw err;\n        });\n    }\n}\nfunction arrayClone(arr) {\n    const n = arr.length;\n    const copy = new Array(n);\n    for(let i = 0; i < n; i += 1){\n        copy[i] = arr[i];\n    }\n    return copy;\n}\nclass SafeEventEmitter extends events__WEBPACK_IMPORTED_MODULE_3__.EventEmitter {\n    emit(type) {\n        let doError = type === \"error\";\n        const events = this._events;\n        if (events !== undefined) {\n            doError = doError && events.error === undefined;\n        } else if (!doError) {\n            return false;\n        }\n        // If there is no 'error' event listener then throw.\n        for(var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++){\n            args[_key - 1] = arguments[_key];\n        }\n        if (doError) {\n            let er;\n            if (args.length > 0) {\n                [er] = args;\n            }\n            if (er instanceof Error) {\n                // Note: The comments on the `throw` lines are intentional, they show\n                // up in Node's output if this results in an unhandled exception.\n                throw er; // Unhandled 'error' event\n            }\n            // At least give some kind of context to the user\n            const err = new Error(`Unhandled error.${er ? ` (${er.message})` : \"\"}`);\n            err.context = er;\n            throw err; // Unhandled 'error' event\n        }\n        const handler = events[type];\n        if (handler === undefined) {\n            return false;\n        }\n        if (typeof handler === \"function\") {\n            safeApply(handler, this, args);\n        } else {\n            const len = handler.length;\n            const listeners = arrayClone(handler);\n            for(let i = 0; i < len; i += 1){\n                safeApply(listeners[i], this, args);\n            }\n        }\n        return true;\n    }\n}\nclass SerializableError extends Error {\n    constructor(_ref){\n        let { code, message, data } = _ref;\n        if (!Number.isInteger(code)) {\n            throw new Error(\"code must be an integer\");\n        }\n        if (!message || typeof message !== \"string\") {\n            throw new Error(\"message must be string\");\n        }\n        super(message);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"code\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"data\", void 0);\n        this.code = code;\n        if (data !== undefined) {\n            this.data = data;\n        }\n    }\n    toString() {\n        return fast_safe_stringify__WEBPACK_IMPORTED_MODULE_4___default()({\n            code: this.code,\n            message: this.message,\n            data: this.data,\n            stack: this.stack\n        });\n    }\n}\nconst getRpcPromiseCallback = function(resolve, reject) {\n    let unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    return (error, response)=>{\n        if (error || response.error) {\n            reject(error || response.error);\n        } else if (!unwrapResult || Array.isArray(response)) {\n            resolve(response);\n        } else {\n            resolve(response.result);\n        }\n    };\n};\nfunction createErrorMiddleware(log) {\n    return (req, res, next, end)=>{\n        try {\n            // json-rpc-engine will terminate the request when it notices this error\n            if (typeof req.method !== \"string\" || !req.method) {\n                res.error = new SerializableError({\n                    code: -32603,\n                    message: \"invalid method\"\n                });\n                end();\n                return;\n            }\n            next((done)=>{\n                const { error } = res;\n                if (!error) {\n                    return done();\n                }\n                log.error(`OpenLogin - RPC Error: ${error.message}`, error);\n                return done();\n            });\n        } catch (error) {\n            log.error(`OpenLogin - RPC Error thrown: ${error.message}`, error);\n            res.error = new SerializableError({\n                code: -32603,\n                message: error.message\n            });\n            end();\n        }\n    };\n}\nfunction createStreamMiddleware() {\n    const idMap = {};\n    function readNoop() {\n        return false;\n    }\n    const events = new SafeEventEmitter();\n    function processResponse(res) {\n        const context = idMap[res.id];\n        if (!context) {\n            throw new Error(`StreamMiddleware - Unknown response id \"${res.id}\"`);\n        }\n        delete idMap[res.id];\n        // copy whole res onto original res\n        Object.assign(context.res, res);\n        // run callback on empty stack,\n        // prevent internal stream-handler from catching errors\n        setTimeout(context.end);\n    }\n    function processNotification(res) {\n        events.emit(\"notification\", res);\n    }\n    function processMessage(res, _encoding, cb) {\n        let err;\n        try {\n            const isNotification = !res.id;\n            if (isNotification) {\n                processNotification(res);\n            } else {\n                processResponse(res);\n            }\n        } catch (_err) {\n            err = _err;\n        }\n        // continue processing stream\n        cb(err);\n    }\n    const stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read: readNoop,\n        write: processMessage\n    });\n    const middleware = (req, res, next, end)=>{\n        // write req to stream\n        stream.push(req);\n        // register request on id map\n        idMap[req.id] = {\n            req,\n            res,\n            next,\n            end\n        };\n    };\n    return {\n        events,\n        middleware,\n        stream\n    };\n}\nfunction createScaffoldMiddleware(handlers) {\n    return (req, res, next, end)=>{\n        const handler = handlers[req.method];\n        // if no handler, return\n        if (handler === undefined) {\n            return next();\n        }\n        // if handler is fn, call as middleware\n        if (typeof handler === \"function\") {\n            return handler(req, res, next, end);\n        }\n        // if handler is some other value, use as result\n        res.result = handler;\n        return end();\n    };\n}\nfunction createIdRemapMiddleware() {\n    return (req, res, next, _end)=>{\n        const originalId = req.id;\n        const newId = (0,_toruslabs_openlogin_utils__WEBPACK_IMPORTED_MODULE_2__.randomId)();\n        req.id = newId;\n        res.id = newId;\n        next((done)=>{\n            req.id = originalId;\n            res.id = originalId;\n            done();\n        });\n    };\n}\nfunction createLoggerMiddleware(logger) {\n    return (req, res, next, _)=>{\n        logger.debug(\"REQ\", req, \"RES\", res);\n        next();\n    };\n}\nfunction createAsyncMiddleware(asyncMiddleware) {\n    return async (req, res, next, end)=>{\n        // nextPromise is the key to the implementation\n        // it is resolved by the return handler passed to the\n        // \"next\" function\n        let resolveNextPromise;\n        const nextPromise = new Promise((resolve)=>{\n            resolveNextPromise = resolve;\n        });\n        let returnHandlerCallback = null;\n        let nextWasCalled = false;\n        // This will be called by the consumer's async middleware.\n        const asyncNext = async ()=>{\n            nextWasCalled = true;\n            // We pass a return handler to next(). When it is called by the engine,\n            // the consumer's async middleware will resume executing.\n            next((runReturnHandlersCallback)=>{\n                // This callback comes from JRPCEngine._runReturnHandlers\n                returnHandlerCallback = runReturnHandlersCallback;\n                resolveNextPromise();\n            });\n            await nextPromise;\n        };\n        try {\n            await asyncMiddleware(req, res, asyncNext);\n            if (nextWasCalled) {\n                await nextPromise; // we must wait until the return handler is called\n                returnHandlerCallback(null);\n            } else {\n                end(null);\n            }\n        } catch (error) {\n            if (returnHandlerCallback) {\n                returnHandlerCallback(error);\n            } else {\n                end(error);\n            }\n        }\n    };\n}\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys$1(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */ class JRPCEngine extends SafeEventEmitter {\n    constructor(){\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_middleware\", void 0);\n        this._middleware = [];\n    }\n    /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */ static async _runAllMiddleware(req, res, middlewareStack) {\n        const returnHandlers = [];\n        let error = null;\n        let isComplete = false;\n        // Go down stack of middleware, call and collect optional returnHandlers\n        for (const middleware of middlewareStack){\n            [error, isComplete] = await JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n            if (isComplete) {\n                break;\n            }\n        }\n        return [\n            error,\n            isComplete,\n            returnHandlers.reverse()\n        ];\n    }\n    /**\n   * Runs an individual middleware.\n   *\n   * @returns An array of any error encountered during middleware exection,\n   * and a boolean indicating whether the request should end.\n   */ static _runMiddleware(req, res, middleware, returnHandlers) {\n        return new Promise((resolve)=>{\n            const end = (err)=>{\n                const error = err || res.error;\n                if (error) {\n                    res.error = (0,eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n                }\n                // True indicates that the request should end\n                resolve([\n                    error,\n                    true\n                ]);\n            };\n            const next = (returnHandler)=>{\n                if (res.error) {\n                    end(res.error);\n                } else {\n                    if (returnHandler) {\n                        if (typeof returnHandler !== \"function\") {\n                            end(new SerializableError({\n                                code: -32603,\n                                message: \"JRPCEngine: 'next' return handlers must be functions\"\n                            }));\n                        }\n                        returnHandlers.push(returnHandler);\n                    }\n                    // False indicates that the request should not end\n                    resolve([\n                        null,\n                        false\n                    ]);\n                }\n            };\n            try {\n                middleware(req, res, next, end);\n            } catch (error) {\n                end(error);\n            }\n        });\n    }\n    /**\n   * Serially executes array of return handlers. The request and response are\n   * assumed to be in their scope.\n   */ static async _runReturnHandlers(handlers) {\n        for (const handler of handlers){\n            await new Promise((resolve, reject)=>{\n                handler((err)=>err ? reject(err) : resolve());\n            });\n        }\n    }\n    /**\n   * Throws an error if the response has neither a result nor an error, or if\n   * the \"isComplete\" flag is falsy.\n   */ static _checkForCompletion(req, res, isComplete) {\n        if (!(\"result\" in res) && !(\"error\" in res)) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Response has no error or result for request\"\n            });\n        }\n        if (!isComplete) {\n            throw new SerializableError({\n                code: -32603,\n                message: \"Nothing ended request\"\n            });\n        }\n    }\n    /**\n   * Add a middleware function to the engine's middleware stack.\n   *\n   * @param middleware - The middleware function to add.\n   */ push(middleware) {\n        this._middleware.push(middleware);\n    }\n    handle(req, cb) {\n        if (cb && typeof cb !== \"function\") {\n            throw new Error('\"callback\" must be a function if provided.');\n        }\n        if (Array.isArray(req)) {\n            if (cb) {\n                return this._handleBatch(req, cb);\n            }\n            return this._handleBatch(req);\n        }\n        if (cb) {\n            return this._handle(req, cb);\n        }\n        return this._promiseHandle(req);\n    }\n    /**\n   * Returns this engine as a middleware function that can be pushed to other\n   * engines.\n   *\n   * @returns This engine as a middleware function.\n   */ asMiddleware() {\n        return async (req, res, next, end)=>{\n            try {\n                const [middlewareError, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n                if (isComplete) {\n                    await JRPCEngine._runReturnHandlers(returnHandlers);\n                    return end(middlewareError);\n                }\n                return next(async (handlerCallback)=>{\n                    try {\n                        await JRPCEngine._runReturnHandlers(returnHandlers);\n                    } catch (error) {\n                        return handlerCallback(error);\n                    }\n                    return handlerCallback();\n                });\n            } catch (error) {\n                return end(error);\n            }\n        };\n    }\n    async _handleBatch(reqs, cb) {\n        // The order here is important\n        try {\n            // 2. Wait for all requests to finish, or throw on some kind of fatal\n            // error\n            const responses = await Promise.all(// 1. Begin executing each request in the order received\n            reqs.map(this._promiseHandle.bind(this)));\n            // 3. Return batch response\n            if (cb) {\n                return cb(null, responses);\n            }\n            return responses;\n        } catch (error) {\n            if (cb) {\n                return cb(error);\n            }\n            throw error;\n        }\n    }\n    /**\n   * A promise-wrapped _handle.\n   */ _promiseHandle(req) {\n        return new Promise((resolve)=>{\n            this._handle(req, (_err, res)=>{\n                // There will always be a response, and it will always have any error\n                // that is caught and propagated.\n                resolve(res);\n            });\n        });\n    }\n    /**\n   * Ensures that the request object is valid, processes it, and passes any\n   * error and the response object to the given callback.\n   *\n   * Does not reject.\n   */ async _handle(callerReq, cb) {\n        if (!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"request must be plain object\"\n            });\n            return cb(error, {\n                id: undefined,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        if (typeof callerReq.method !== \"string\") {\n            const error = new SerializableError({\n                code: -32603,\n                message: \"method must be string\"\n            });\n            return cb(error, {\n                id: callerReq.id,\n                jsonrpc: \"2.0\",\n                error\n            });\n        }\n        const req = _objectSpread$1({}, callerReq);\n        const res = {\n            id: req.id,\n            jsonrpc: req.jsonrpc\n        };\n        let error = null;\n        try {\n            await this._processRequest(req, res);\n        } catch (_error) {\n            // A request handler error, a re-thrown middleware error, or something\n            // unexpected.\n            error = _error;\n        }\n        if (error) {\n            // Ensure no result is present on an errored response\n            delete res.result;\n            if (!res.error) {\n                res.error = (0,eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.serializeError)(error);\n            }\n        }\n        return cb(error, res);\n    }\n    /**\n   * For the given request and response, runs all middleware and their return\n   * handlers, if any, and ensures that internal request processing semantics\n   * are satisfied.\n   */ async _processRequest(req, res) {\n        const [error, isComplete, returnHandlers] = await JRPCEngine._runAllMiddleware(req, res, this._middleware);\n        // Throw if \"end\" was not called, or if the response has neither a result\n        // nor an error.\n        JRPCEngine._checkForCompletion(req, res, isComplete);\n        // The return handlers should run even if an error was encountered during\n        // middleware processing.\n        await JRPCEngine._runReturnHandlers(returnHandlers);\n        // Now we re-throw the middleware processing error, if any, to catch it\n        // further up the call chain.\n        if (error) {\n            throw error;\n        }\n    }\n}\nfunction mergeMiddleware(middlewareStack) {\n    const engine = new JRPCEngine();\n    middlewareStack.forEach((middleware)=>engine.push(middleware));\n    return engine.asMiddleware();\n}\nfunction createEngineStream(opts) {\n    if (!opts || !opts.engine) {\n        throw new Error(\"Missing engine parameter!\");\n    }\n    const { engine } = opts;\n    // eslint-disable-next-line prefer-const\n    let stream;\n    function read() {\n        return undefined;\n    }\n    function write(req, _encoding, cb) {\n        engine.handle(req, (_err, res)=>{\n            stream.push(res);\n        });\n        cb();\n    }\n    stream = new readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex({\n        objectMode: true,\n        read,\n        write\n    });\n    // forward notifications\n    if (engine.on) {\n        engine.on(\"notification\", (message)=>{\n            stream.push(message);\n        });\n    }\n    return stream;\n}\nclass Substream extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(_ref){\n        let { parent, name } = _ref;\n        super({\n            objectMode: true\n        });\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_parent\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_name\", void 0);\n        this._parent = parent;\n        this._name = name;\n    }\n    /**\n   * Explicitly sets read operations to a no-op.\n   */ _read() {\n        return undefined;\n    }\n    /**\n   * Called when data should be written to this writable stream.\n   *\n   * @param chunk - Arbitrary object to write\n   * @param encoding - Encoding to use when writing payload\n   * @param callback - Called when writing is complete or an error occurs\n   */ _write(chunk, _encoding, callback) {\n        this._parent.push({\n            name: this._name,\n            data: chunk\n        });\n        callback();\n    }\n}\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nconst IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\nclass ObjectMultiplex extends readable_stream__WEBPACK_IMPORTED_MODULE_1__.Duplex {\n    constructor(){\n        let opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        super(_objectSpread(_objectSpread({}, opts), {}, {\n            objectMode: true\n        }));\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_substreams\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"getStream\", void 0);\n        this._substreams = {};\n    }\n    createStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // create substream\n        const substream = new Substream({\n            parent: this,\n            name\n        });\n        this._substreams[name] = substream;\n        // listen for parent stream to end\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        anyStreamEnd(this, (_error)=>substream.destroy(_error || undefined));\n        return substream;\n    }\n    // ignore streams (dont display orphaned data warning)\n    ignoreStream(name) {\n        // validate name\n        if (!name) {\n            throw new Error(\"ObjectMultiplex - name must not be empty\");\n        }\n        if (this._substreams[name]) {\n            throw new Error(`ObjectMultiplex - Substream for name \"${name}\" already exists`);\n        }\n        // set\n        this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n    _read() {\n        return undefined;\n    }\n    _write(chunk, _encoding, callback) {\n        const { name, data } = chunk;\n        if (!name) {\n            window.console.warn(`ObjectMultiplex - malformed chunk without name \"${chunk}\"`);\n            return callback();\n        }\n        // get corresponding substream\n        const substream = this._substreams[name];\n        if (!substream) {\n            window.console.warn(`ObjectMultiplex - orphaned data for stream \"${name}\"`);\n            return callback();\n        }\n        // push data into substream\n        if (substream !== IGNORE_SUBSTREAM) {\n            substream.push(data);\n        }\n        return callback();\n    }\n}\n// util\nfunction anyStreamEnd(stream, _cb) {\n    const cb = once__WEBPACK_IMPORTED_MODULE_7___default()(_cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n        readable: false\n    }, cb);\n    end_of_stream__WEBPACK_IMPORTED_MODULE_6___default()(stream, {\n        writable: false\n    }, cb);\n}\nfunction setupMultiplex(stream) {\n    const mux = new ObjectMultiplex();\n    mux.getStream = function streamHelper(name) {\n        if (this._substreams[name]) {\n            return this._substreams[name];\n        }\n        return this.createStream(name);\n    };\n    pump__WEBPACK_IMPORTED_MODULE_8___default()(stream, mux, stream, (err)=>{\n        if (err) window.console.error(err);\n    });\n    return mux;\n}\nclass PostMessageStream extends BasePostMessageStream {\n    _postMessage(data) {\n        let originConstraint = this._targetOrigin;\n        if (typeof data === \"object\") {\n            const dataObj = data;\n            if (typeof dataObj.data === \"object\") {\n                const dataObjData = dataObj.data;\n                if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n                    const dataObjDataParam = dataObjData.params[0];\n                    if (dataObjDataParam._origin) {\n                        originConstraint = dataObjDataParam._origin;\n                    }\n                    // add a constraint for the response\n                    dataObjDataParam._origin = window.location.origin;\n                }\n            }\n        }\n        this._targetWindow.postMessage({\n            target: this._target,\n            data\n        }, originConstraint);\n    }\n}\n //# sourceMappingURL=openloginJrpc.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js ***!
  \****************************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   URLWithHashParams: () => (/* binding */ URLWithHashParams),\n/* harmony export */   base64toJSON: () => (/* binding */ base64toJSON),\n/* harmony export */   base64url: () => (/* binding */ base64url),\n/* harmony export */   jsonToBase64: () => (/* binding */ jsonToBase64),\n/* harmony export */   keccak: () => (/* binding */ keccak),\n/* harmony export */   keccak256: () => (/* binding */ keccak256),\n/* harmony export */   randomId: () => (/* binding */ randomId),\n/* harmony export */   safeatob: () => (/* binding */ safeatob),\n/* harmony export */   safebtoa: () => (/* binding */ safebtoa)\n/* harmony export */ });\n/* harmony import */ var randombytes__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! randombytes */ \"(ssr)/./node_modules/randombytes/index.js\");\n/* harmony import */ var randombytes__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(randombytes__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! base64url */ \"(ssr)/./node_modules/base64url/index.js\");\n/* harmony import */ var base64url__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(base64url__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var keccak__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! keccak */ \"(ssr)/./node_modules/keccak/index.js\");\n/* harmony import */ var keccak__WEBPACK_IMPORTED_MODULE_3___default = /*#__PURE__*/__webpack_require__.n(keccak__WEBPACK_IMPORTED_MODULE_3__);\n\n\n\n\nconst randomId = ()=>randombytes__WEBPACK_IMPORTED_MODULE_0___default()(32).toString(\"hex\");\nclass URLWithHashParams extends URL {\n    constructor(){\n        super(...arguments);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_1___default()(this, \"hashParams\", new URLSearchParams());\n    }\n    toString() {\n        this.hash = this.hashParams.toString();\n        return super.toString.call(this);\n    }\n}\nconst base64url = (base64url__WEBPACK_IMPORTED_MODULE_2___default());\nfunction safebtoa(str) {\n    return base64url.encode(str);\n}\nfunction safeatob(str) {\n    // Going backwards: from bytestream, to percent-encoding, to original string.\n    return base64url.decode(str);\n}\nconst keccak = (keccak__WEBPACK_IMPORTED_MODULE_3___default());\nfunction base64toJSON(b64str) {\n    return JSON.parse(base64url.decode(b64str));\n}\nfunction jsonToBase64(json) {\n    return base64url.encode(JSON.stringify(json));\n}\nfunction keccak256(str) {\n    let input = str;\n    if (typeof str === \"string\" && str.slice(0, 2) === \"0x\" && str.length === 66) {\n        input = Buffer.from(str.slice(2), \"hex\");\n    }\n    const data = `0x${keccak(\"keccak256\").update(input).digest(\"hex\").padStart(64, \"0\")}`;\n    return data;\n}\n //# sourceMappingURL=openloginUtils.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9vcGVubG9naW4tdXRpbHMvZGlzdC9vcGVubG9naW5VdGlscy5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBc0M7QUFDOEI7QUFDL0I7QUFDTjtBQUUvQixNQUFNSSxXQUFXLElBQU1KLGtEQUFXQSxDQUFDLElBQUlLLFFBQVEsQ0FBQztBQUVoRCxNQUFNQywwQkFBMEJDO0lBQzlCQyxhQUFjO1FBQ1osS0FBSyxJQUFJQztRQUNUUiw0RUFBZUEsQ0FBQyxJQUFJLEVBQUUsY0FBYyxJQUFJUztJQUMxQztJQUNBTCxXQUFXO1FBQ1QsSUFBSSxDQUFDTSxJQUFJLEdBQUcsSUFBSSxDQUFDQyxVQUFVLENBQUNQLFFBQVE7UUFDcEMsT0FBTyxLQUFLLENBQUNBLFNBQVNRLElBQUksQ0FBQyxJQUFJO0lBQ2pDO0FBQ0Y7QUFFQSxNQUFNQyxZQUFZWixrREFBWUE7QUFDOUIsU0FBU2EsU0FBU0MsR0FBRztJQUNuQixPQUFPRixVQUFVRyxNQUFNLENBQUNEO0FBQzFCO0FBQ0EsU0FBU0UsU0FBU0YsR0FBRztJQUNuQiw2RUFBNkU7SUFDN0UsT0FBT0YsVUFBVUssTUFBTSxDQUFDSDtBQUMxQjtBQUNBLE1BQU1JLFNBQVNqQiwrQ0FBU0E7QUFDeEIsU0FBU2tCLGFBQWFDLE1BQU07SUFDMUIsT0FBT0MsS0FBS0MsS0FBSyxDQUFDVixVQUFVSyxNQUFNLENBQUNHO0FBQ3JDO0FBQ0EsU0FBU0csYUFBYUMsSUFBSTtJQUN4QixPQUFPWixVQUFVRyxNQUFNLENBQUNNLEtBQUtJLFNBQVMsQ0FBQ0Q7QUFDekM7QUFDQSxTQUFTRSxVQUFVWixHQUFHO0lBQ3BCLElBQUlhLFFBQVFiO0lBQ1osSUFBSSxPQUFPQSxRQUFRLFlBQVlBLElBQUljLEtBQUssQ0FBQyxHQUFHLE9BQU8sUUFBUWQsSUFBSWUsTUFBTSxLQUFLLElBQUk7UUFDNUVGLFFBQVFHLE9BQU9DLElBQUksQ0FBQ2pCLElBQUljLEtBQUssQ0FBQyxJQUFJO0lBQ3BDO0lBQ0EsTUFBTUksT0FBTyxDQUFDLEVBQUUsRUFBRWQsT0FBTyxhQUFhZSxNQUFNLENBQUNOLE9BQU9PLE1BQU0sQ0FBQyxPQUFPQyxRQUFRLENBQUMsSUFBSSxLQUFLLENBQUM7SUFDckYsT0FBT0g7QUFDVDtBQUVxSCxDQUNySCw4Q0FBOEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9vcGVubG9naW4tdXRpbHMvZGlzdC9vcGVubG9naW5VdGlscy5lc20uanM/ZjkzYSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgcmFuZG9tYnl0ZXMgZnJvbSAncmFuZG9tYnl0ZXMnO1xuaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCBiYXNlNjR1cmxMaWIgZnJvbSAnYmFzZTY0dXJsJztcbmltcG9ydCBrZWNjYWtMaWIgZnJvbSAna2VjY2FrJztcblxuY29uc3QgcmFuZG9tSWQgPSAoKSA9PiByYW5kb21ieXRlcygzMikudG9TdHJpbmcoXCJoZXhcIik7XG5cbmNsYXNzIFVSTFdpdGhIYXNoUGFyYW1zIGV4dGVuZHMgVVJMIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJoYXNoUGFyYW1zXCIsIG5ldyBVUkxTZWFyY2hQYXJhbXMoKSk7XG4gIH1cbiAgdG9TdHJpbmcoKSB7XG4gICAgdGhpcy5oYXNoID0gdGhpcy5oYXNoUGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgcmV0dXJuIHN1cGVyLnRvU3RyaW5nLmNhbGwodGhpcyk7XG4gIH1cbn1cblxuY29uc3QgYmFzZTY0dXJsID0gYmFzZTY0dXJsTGliO1xuZnVuY3Rpb24gc2FmZWJ0b2Eoc3RyKSB7XG4gIHJldHVybiBiYXNlNjR1cmwuZW5jb2RlKHN0cik7XG59XG5mdW5jdGlvbiBzYWZlYXRvYihzdHIpIHtcbiAgLy8gR29pbmcgYmFja3dhcmRzOiBmcm9tIGJ5dGVzdHJlYW0sIHRvIHBlcmNlbnQtZW5jb2RpbmcsIHRvIG9yaWdpbmFsIHN0cmluZy5cbiAgcmV0dXJuIGJhc2U2NHVybC5kZWNvZGUoc3RyKTtcbn1cbmNvbnN0IGtlY2NhayA9IGtlY2Nha0xpYjtcbmZ1bmN0aW9uIGJhc2U2NHRvSlNPTihiNjRzdHIpIHtcbiAgcmV0dXJuIEpTT04ucGFyc2UoYmFzZTY0dXJsLmRlY29kZShiNjRzdHIpKTtcbn1cbmZ1bmN0aW9uIGpzb25Ub0Jhc2U2NChqc29uKSB7XG4gIHJldHVybiBiYXNlNjR1cmwuZW5jb2RlKEpTT04uc3RyaW5naWZ5KGpzb24pKTtcbn1cbmZ1bmN0aW9uIGtlY2NhazI1NihzdHIpIHtcbiAgbGV0IGlucHV0ID0gc3RyO1xuICBpZiAodHlwZW9mIHN0ciA9PT0gXCJzdHJpbmdcIiAmJiBzdHIuc2xpY2UoMCwgMikgPT09IFwiMHhcIiAmJiBzdHIubGVuZ3RoID09PSA2Nikge1xuICAgIGlucHV0ID0gQnVmZmVyLmZyb20oc3RyLnNsaWNlKDIpLCBcImhleFwiKTtcbiAgfVxuICBjb25zdCBkYXRhID0gYDB4JHtrZWNjYWsoXCJrZWNjYWsyNTZcIikudXBkYXRlKGlucHV0KS5kaWdlc3QoXCJoZXhcIikucGFkU3RhcnQoNjQsIFwiMFwiKX1gO1xuICByZXR1cm4gZGF0YTtcbn1cblxuZXhwb3J0IHsgVVJMV2l0aEhhc2hQYXJhbXMsIGJhc2U2NHRvSlNPTiwgYmFzZTY0dXJsLCBqc29uVG9CYXNlNjQsIGtlY2Nhaywga2VjY2FrMjU2LCByYW5kb21JZCwgc2FmZWF0b2IsIHNhZmVidG9hIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vcGVubG9naW5VdGlscy5lc20uanMubWFwXG4iXSwibmFtZXMiOlsicmFuZG9tYnl0ZXMiLCJfZGVmaW5lUHJvcGVydHkiLCJiYXNlNjR1cmxMaWIiLCJrZWNjYWtMaWIiLCJyYW5kb21JZCIsInRvU3RyaW5nIiwiVVJMV2l0aEhhc2hQYXJhbXMiLCJVUkwiLCJjb25zdHJ1Y3RvciIsImFyZ3VtZW50cyIsIlVSTFNlYXJjaFBhcmFtcyIsImhhc2giLCJoYXNoUGFyYW1zIiwiY2FsbCIsImJhc2U2NHVybCIsInNhZmVidG9hIiwic3RyIiwiZW5jb2RlIiwic2FmZWF0b2IiLCJkZWNvZGUiLCJrZWNjYWsiLCJiYXNlNjR0b0pTT04iLCJiNjRzdHIiLCJKU09OIiwicGFyc2UiLCJqc29uVG9CYXNlNjQiLCJqc29uIiwic3RyaW5naWZ5Iiwia2VjY2FrMjU2IiwiaW5wdXQiLCJzbGljZSIsImxlbmd0aCIsIkJ1ZmZlciIsImZyb20iLCJkYXRhIiwidXBkYXRlIiwiZGlnZXN0IiwicGFkU3RhcnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/openlogin-utils/dist/openloginUtils.esm.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js ***!
  \**********************************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   BUTTON_POSITION: () => (/* binding */ BUTTON_POSITION),\n/* harmony export */   LOGIN_PROVIDER: () => (/* binding */ LOGIN_PROVIDER),\n/* harmony export */   PAYMENT_PROVIDER: () => (/* binding */ PAYMENT_PROVIDER),\n/* harmony export */   TORUS_BUILD_ENV: () => (/* binding */ TORUS_BUILD_ENV),\n/* harmony export */   TorusInPageProvider: () => (/* binding */ TorusInPageProvider),\n/* harmony export */   \"default\": () => (/* binding */ Torus)\n/* harmony export */ });\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @babel/runtime/helpers/defineProperty */ \"(ssr)/./node_modules/@babel/runtime/helpers/defineProperty.js\");\n/* harmony import */ var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @solana/web3.js */ \"(ssr)/./node_modules/@solana/web3.js/lib/index.esm.js\");\n/* harmony import */ var _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @toruslabs/base-controllers */ \"(ssr)/./node_modules/@toruslabs/base-controllers/dist/baseControllers.esm.js\");\n/* harmony import */ var _toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @toruslabs/http-helpers */ \"(ssr)/./node_modules/@toruslabs/http-helpers/dist/httpHelpers.esm.js\");\n/* harmony import */ var _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @toruslabs/openlogin-jrpc */ \"(ssr)/./node_modules/@toruslabs/openlogin-jrpc/dist/openloginJrpc.esm.js\");\n/* harmony import */ var eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! eth-rpc-errors */ \"(ssr)/./node_modules/eth-rpc-errors/dist/index.js\");\n/* harmony import */ var is_stream__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! is-stream */ \"(ssr)/./node_modules/is-stream/index.js\");\n/* harmony import */ var is_stream__WEBPACK_IMPORTED_MODULE_6___default = /*#__PURE__*/__webpack_require__.n(is_stream__WEBPACK_IMPORTED_MODULE_6__);\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! pump */ \"(ssr)/./node_modules/pump/index.js\");\n/* harmony import */ var pump__WEBPACK_IMPORTED_MODULE_7___default = /*#__PURE__*/__webpack_require__.n(pump__WEBPACK_IMPORTED_MODULE_7__);\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! loglevel */ \"(ssr)/./node_modules/loglevel/lib/loglevel.js\");\n/* harmony import */ var loglevel__WEBPACK_IMPORTED_MODULE_8___default = /*#__PURE__*/__webpack_require__.n(loglevel__WEBPACK_IMPORTED_MODULE_8__);\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! fast-deep-equal */ \"(ssr)/./node_modules/fast-deep-equal/index.js\");\n/* harmony import */ var fast_deep_equal__WEBPACK_IMPORTED_MODULE_9___default = /*#__PURE__*/__webpack_require__.n(fast_deep_equal__WEBPACK_IMPORTED_MODULE_9__);\n\n\n\n\n\n\n\n\n\n\nvar version = \"0.3.4\";\nvar messages = {\n    errors: {\n        disconnected: ()=>\"Torus: Lost connection to Torus.\",\n        permanentlyDisconnected: ()=>\"Torus: Disconnected from iframe. Page reload required.\",\n        unsupportedSync: (method)=>`Torus: The Torus Ethereum provider does not support synchronous methods like ${method} without a callback parameter.`,\n        invalidDuplexStream: ()=>\"Must provide a Node.js-style duplex stream.\",\n        invalidOptions: (maxEventListeners)=>`Invalid options. Received: { maxEventListeners: ${maxEventListeners}}`,\n        invalidRequestArgs: ()=>`Expected a single, non-array, object argument.`,\n        invalidRequestMethod: ()=>`'args.method' must be a non-empty string.`,\n        invalidRequestParams: ()=>`'args.params' must be an object or array if provided.`,\n        invalidLoggerObject: ()=>`'args.logger' must be an object if provided.`,\n        invalidLoggerMethod: (method)=>`'args.logger' must include required method '${method}'.`\n    },\n    info: {\n        connected: (chainId)=>`Torus: Connected to chain with ID \"${chainId}\".`\n    },\n    warnings: {}\n};\nconst PAYMENT_PROVIDER = {\n    MOONPAY: \"moonpay\",\n    WYRE: \"wyre\",\n    RAMPNETWORK: \"rampnetwork\",\n    XANPOOL: \"xanpool\",\n    MERCURYO: \"mercuryo\",\n    TRANSAK: \"transak\"\n};\nconst TORUS_BUILD_ENV = {\n    PRODUCTION: \"production\",\n    DEVELOPMENT: \"development\",\n    TESTING: \"testing\"\n};\nconst BUTTON_POSITION = {\n    BOTTOM_LEFT: \"bottom-left\",\n    TOP_LEFT: \"top-left\",\n    BOTTOM_RIGHT: \"bottom-right\",\n    TOP_RIGHT: \"top-right\"\n};\nconst LOGIN_PROVIDER = {\n    GOOGLE: \"google\",\n    FACEBOOK: \"facebook\",\n    REDDIT: \"reddit\",\n    DISCORD: \"discord\",\n    TWITCH: \"twitch\",\n    APPLE: \"apple\",\n    LINE: \"line\",\n    GITHUB: \"github\",\n    KAKAO: \"kakao\",\n    LINKEDIN: \"linkedin\",\n    TWITTER: \"twitter\",\n    WEIBO: \"weibo\",\n    WECHAT: \"wechat\",\n    EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nconst translations = {\n    en: {\n        embed: {\n            continue: \"Continue\",\n            actionRequired: \"Authorization required\",\n            pendingAction: \"Click continue to proceed with your request in a popup\",\n            cookiesRequired: \"Cookies Required\",\n            enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n            clickHere: \"More Info\"\n        }\n    },\n    de: {\n        embed: {\n            continue: \"Fortsetzen\",\n            actionRequired: \"Autorisierung erforderlich\",\n            pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n            cookiesRequired: \"Cookies ben\\xf6tigt\",\n            enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n            clickHere: \"Mehr Info\"\n        }\n    },\n    ja: {\n        embed: {\n            continue: \"継続する\",\n            actionRequired: \"認証が必要です\",\n            pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n            cookiesRequired: \"必要なクッキー\",\n            enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n            clickHere: \"詳しくは\"\n        }\n    },\n    ko: {\n        embed: {\n            continue: \"계속하다\",\n            actionRequired: \"승인 필요\",\n            pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n            cookiesRequired: \"쿠키 필요\",\n            enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n            clickHere: \"더 많은 정보\"\n        }\n    },\n    zh: {\n        embed: {\n            continue: \"继续\",\n            actionRequired: \"需要授权\",\n            pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n            cookiesRequired: \"必填Cookie\",\n            enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n            clickHere: \"更多信息\"\n        }\n    }\n};\nvar configuration = {\n    supportedVerifierList: [\n        LOGIN_PROVIDER.GOOGLE,\n        LOGIN_PROVIDER.REDDIT,\n        LOGIN_PROVIDER.DISCORD\n    ],\n    api: \"https://api.tor.us\",\n    translations,\n    prodTorusUrl: \"\",\n    localStorageKeyPrefix: `torus-`\n};\nvar log = loglevel__WEBPACK_IMPORTED_MODULE_8___default().getLogger(\"solana-embed\");\n// utility functions\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */ function createErrorMiddleware() {\n    return (req, res, next)=>{\n        // json-rpc-engine will terminate the request when it notices this error\n        if (typeof req.method !== \"string\" || !req.method) {\n            res.error = eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.ethErrors.rpc.invalidRequest({\n                message: `The request 'method' must be a non-empty string.`,\n                data: req\n            });\n        }\n        next((done)=>{\n            const { error } = res;\n            if (!error) {\n                return done();\n            }\n            log.error(`Torus - RPC Error: ${error.message}`, error);\n            return done();\n        });\n    };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */ function logStreamDisconnectWarning(remoteLabel, error, emitter) {\n    let warningMsg = `Torus: Lost connection to \"${remoteLabel}\".`;\n    if (error?.stack) {\n        warningMsg += `\\n${error.stack}`;\n    }\n    log.warn(warningMsg);\n    if (emitter && emitter.listenerCount(\"error\") > 0) {\n        emitter.emit(\"error\", warningMsg);\n    }\n}\nconst getWindowId = ()=>Math.random().toString(36).slice(2);\nconst getTorusUrl = async (buildEnv)=>{\n    let torusUrl;\n    let logLevel;\n    // const versionUsed = version;\n    // log.info(\"solana embed version used: \", versionUsed);\n    switch(buildEnv){\n        case \"testing\":\n            torusUrl = \"https://solana-testing.tor.us\";\n            logLevel = \"debug\";\n            break;\n        case \"development\":\n            torusUrl = \"http://localhost:8080\";\n            logLevel = \"debug\";\n            break;\n        default:\n            torusUrl = `https://solana.tor.us`;\n            logLevel = \"error\";\n            break;\n    }\n    return {\n        torusUrl,\n        logLevel\n    };\n};\nconst getUserLanguage = ()=>{\n    let userLanguage = window.navigator.language || \"en-US\";\n    const userLanguages = userLanguage.split(\"-\");\n    userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n    return userLanguage;\n};\nconst FEATURES_PROVIDER_CHANGE_WINDOW = {\n    height: 660,\n    width: 375\n};\nconst FEATURES_DEFAULT_WALLET_WINDOW = {\n    height: 740,\n    width: 1315\n};\nconst FEATURES_DEFAULT_POPUP_WINDOW = {\n    height: 700,\n    width: 1200\n};\nconst FEATURES_CONFIRM_WINDOW = {\n    height: 600,\n    width: 400\n};\nfunction storageAvailable(type) {\n    let storage;\n    try {\n        storage = window[type];\n        const x = \"__storage_test__\";\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    } catch (e) {\n        return e && // everything except Firefox\n        (e.code === 22 || // Firefox\n        e.code === 1014 || // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === \"QuotaExceededError\" || // Firefox\n        e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n        storage && storage.length !== 0;\n    }\n}\n/**\n * popup handler utils\n */ function getPopupFeatures(_ref) {\n    let { width: w, height: h } = _ref;\n    // Fixes dual-screen position                             Most browsers      Firefox\n    const dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n    const dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n    const width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n    const height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n    const systemZoom = 1; // No reliable estimate\n    const left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n    const top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n    const features = `titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=${h / systemZoom},width=${w / systemZoom},top=${top},left=${left}`;\n    return features;\n}\nclass BaseProvider extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.SafeEventEmitter {\n    /**\n   * Indicating that this provider is a Torus provider.\n   */ constructor(connectionStream, _ref){\n        let { maxEventListeners = 100, jsonRpcStreamName = \"provider\" } = _ref;\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"isTorus\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_rpcEngine\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"jsonRpcConnectionEvents\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"_state\", void 0);\n        if (!(0,is_stream__WEBPACK_IMPORTED_MODULE_6__.duplex)(connectionStream)) {\n            throw new Error(messages.errors.invalidDuplexStream());\n        }\n        this.isTorus = true;\n        this.setMaxListeners(maxEventListeners);\n        this._handleConnect = this._handleConnect.bind(this);\n        this._handleDisconnect = this._handleDisconnect.bind(this);\n        this._handleStreamDisconnect = this._handleStreamDisconnect.bind(this);\n        this._rpcRequest = this._rpcRequest.bind(this);\n        this._initializeState = this._initializeState.bind(this);\n        this.request = this.request.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        // this.enable = this.enable.bind(this);\n        // setup connectionStream multiplexing\n        const mux = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.ObjectMultiplex();\n        pump__WEBPACK_IMPORTED_MODULE_7___default()(connectionStream, mux, connectionStream, this._handleStreamDisconnect.bind(this, \"Torus\"));\n        // ignore phishing warning message (handled elsewhere)\n        mux.ignoreStream(\"phishing\");\n        // setup own event listeners\n        // connect to async provider\n        const jsonRpcConnection = (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.createStreamMiddleware)();\n        pump__WEBPACK_IMPORTED_MODULE_7___default()(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, this._handleStreamDisconnect.bind(this, \"Torus RpcProvider\"));\n        // handle RPC requests via dapp-side rpc engine\n        const rpcEngine = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.JRPCEngine();\n        rpcEngine.push((0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.createIdRemapMiddleware)());\n        rpcEngine.push(createErrorMiddleware());\n        rpcEngine.push((0,_toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.createLoggerMiddleware)({\n            origin: location.origin\n        }));\n        rpcEngine.push(jsonRpcConnection.middleware);\n        this._rpcEngine = rpcEngine;\n        this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n    }\n    /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   */ async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.ethErrors.rpc.invalidRequest({\n                message: messages.errors.invalidRequestArgs(),\n                data: args\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.ethErrors.rpc.invalidRequest({\n                message: messages.errors.invalidRequestMethod(),\n                data: args\n            });\n        }\n        if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.ethErrors.rpc.invalidRequest({\n                message: messages.errors.invalidRequestParams(),\n                data: args\n            });\n        }\n        return new Promise((resolve, reject)=>{\n            this._rpcRequest({\n                method,\n                params\n            }, (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.getRpcPromiseCallback)(resolve, reject));\n        });\n    }\n    /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */ send(payload, callback) {\n        this._rpcRequest(payload, callback);\n    }\n    /**\n   * Submits an RPC request per the given JSON-RPC request object.\n   */ sendAsync(payload) {\n        return new Promise((resolve, reject)=>{\n            this._rpcRequest(payload, (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.getRpcPromiseCallback)(resolve, reject));\n        });\n    }\n    /**\n   * Called when connection is lost to critical streams.\n   *\n   * emits TorusInpageProvider#disconnect\n   */ _handleStreamDisconnect(streamName, error) {\n        logStreamDisconnectWarning(streamName, error, this);\n        this._handleDisconnect(false, error ? error.message : undefined);\n    }\n}\nconst handleEvent = function(handle, eventName, handler) {\n    for(var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++){\n        handlerArgs[_key - 3] = arguments[_key];\n    }\n    const handlerWrapper = ()=>{\n        handler(...handlerArgs);\n        handle.removeEventListener(eventName, handlerWrapper);\n    };\n    handle.addEventListener(eventName, handlerWrapper);\n};\nasync function documentReady() {\n    return new Promise((resolve)=>{\n        if (document.readyState !== \"loading\") {\n            resolve();\n        } else {\n            handleEvent(document, \"DOMContentLoaded\", resolve);\n        }\n    });\n}\nconst htmlToElement = (html)=>{\n    const template = window.document.createElement(\"template\");\n    const trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n    template.innerHTML = trimmedHtml;\n    return template.content.firstChild;\n};\nfunction isLegacyTransactionInstance(transaction) {\n    return transaction.version === undefined;\n}\nclass PopupHandler extends _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.SafeEventEmitter {\n    constructor(_ref){\n        let { url, target, features } = _ref;\n        super();\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"url\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"target\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"features\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"window\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"windowTimer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"iClosedWindow\", void 0);\n        this.url = url;\n        this.target = target || \"_blank\";\n        this.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n        this.window = undefined;\n        this.windowTimer = undefined;\n        this.iClosedWindow = false;\n        this._setupTimer();\n    }\n    _setupTimer() {\n        this.windowTimer = Number(setInterval(()=>{\n            if (this.window && this.window.closed) {\n                clearInterval(this.windowTimer);\n                if (!this.iClosedWindow) {\n                    this.emit(\"close\");\n                }\n                this.iClosedWindow = false;\n                this.window = undefined;\n            }\n            if (this.window === undefined) clearInterval(this.windowTimer);\n        }, 500));\n    }\n    open() {\n        this.window = window.open(this.url.href, this.target, this.features);\n        if (this.window?.focus) this.window.focus();\n        return Promise.resolve();\n    }\n    close() {\n        this.iClosedWindow = true;\n        if (this.window) this.window.close();\n    }\n    redirect(locationReplaceOnRedirect) {\n        if (locationReplaceOnRedirect) {\n            window.location.replace(this.url.href);\n        } else {\n            window.location.href = this.url.href;\n        }\n    }\n}\nfunction ownKeys$2(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$2(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys$2(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$2(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nclass TorusCommunicationProvider extends BaseProvider {\n    constructor(connectionStream, _ref){\n        let { maxEventListeners = 100, jsonRpcStreamName = \"provider\" } = _ref;\n        super(connectionStream, {\n            maxEventListeners,\n            jsonRpcStreamName\n        });\n        // private state\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"embedTranslations\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"torusUrl\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"dappStorageKey\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"windowRefs\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"tryWindowHandle\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"torusAlertContainer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"torusIframe\", void 0);\n        this._state = _objectSpread$2({}, TorusCommunicationProvider._defaultState);\n        // public state\n        this.torusUrl = \"\";\n        this.dappStorageKey = \"\";\n        const languageTranslations = configuration.translations[getUserLanguage()];\n        this.embedTranslations = languageTranslations.embed;\n        this.windowRefs = {};\n        // setup own event listeners\n        // EIP-1193 connect\n        this.on(\"connect\", ()=>{\n            this._state.isConnected = true;\n        });\n        const notificationHandler = (payload)=>{\n            const { method, params } = payload;\n            if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n                const { isFullScreen, rid } = params;\n                this._displayIframe({\n                    isFull: isFullScreen,\n                    rid: rid\n                });\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n                const { windowId, url } = params;\n                this._createPopupBlockAlert(windowId, url);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n                this._handleCloseWindow(params);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n                const { currentLoginProvider } = params;\n                this._state.isLoggedIn = true;\n                this._state.currentLoginProvider = currentLoginProvider;\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n                this._state.isLoggedIn = false;\n                this._state.currentLoginProvider = null;\n                this._displayIframe();\n            }\n        };\n        this.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n    }\n    get isLoggedIn() {\n        return this._state.isLoggedIn;\n    }\n    get isIFrameFullScreen() {\n        return this._state.isIFrameFullScreen;\n    }\n    /**\n   * Returns whether the inPage provider is connected to Torus.\n   */ isConnected() {\n        return this._state.isConnected;\n    }\n    async _initializeState(params) {\n        try {\n            const { torusUrl, dappStorageKey, torusAlertContainer, torusIframe } = params;\n            this.torusUrl = torusUrl;\n            this.dappStorageKey = dappStorageKey;\n            this.torusAlertContainer = torusAlertContainer;\n            this.torusIframe = torusIframe;\n            this.torusIframe.addEventListener(\"load\", ()=>{\n                // only do this if iframe is not full screen\n                if (!this._state.isIFrameFullScreen) this._displayIframe();\n            });\n            const { currentLoginProvider, isLoggedIn } = await this.request({\n                method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n                params: []\n            });\n            // indicate that we've connected, for EIP-1193 compliance\n            this._handleConnect(currentLoginProvider, isLoggedIn);\n        } catch (error) {\n            log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n        } finally{\n            log.info(\"initialized communication state\");\n            this._state.initialized = true;\n            this.emit(\"_initialized\");\n        }\n    }\n    _handleWindow(windowId) {\n        let { url, target, features } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const finalUrl = new URL(url || `${this.torusUrl}/redirect?windowId=${windowId}`);\n        if (this.dappStorageKey) {\n            // If multiple instances, it returns the first one\n            if (finalUrl.hash) finalUrl.hash += `&dappStorageKey=${this.dappStorageKey}`;\n            else finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n        }\n        const handledWindow = new PopupHandler({\n            url: finalUrl,\n            target,\n            features\n        });\n        handledWindow.open();\n        if (!handledWindow.window) {\n            this._createPopupBlockAlert(windowId, finalUrl.href);\n            return;\n        }\n        // Add to collection only if window is opened\n        this.windowRefs[windowId] = handledWindow;\n        // We tell the iframe that the window has been successfully opened\n        this.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n            params: {\n                windowId\n            }\n        });\n        handledWindow.once(\"close\", ()=>{\n            // user closed the window\n            delete this.windowRefs[windowId];\n            this.request({\n                method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n                params: {\n                    windowId\n                }\n            });\n        });\n    }\n    _displayIframe() {\n        let { isFull = false, rid = \"\" } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        const style = {};\n        // set phase\n        if (!isFull) {\n            style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n            style.height = \"70px\";\n            style.width = \"70px\";\n            switch(this._state.buttonPosition){\n                case BUTTON_POSITION.TOP_LEFT:\n                    style.top = \"0px\";\n                    style.left = \"0px\";\n                    style.right = \"auto\";\n                    style.bottom = \"auto\";\n                    break;\n                case BUTTON_POSITION.TOP_RIGHT:\n                    style.top = \"0px\";\n                    style.right = \"0px\";\n                    style.left = \"auto\";\n                    style.bottom = \"auto\";\n                    break;\n                case BUTTON_POSITION.BOTTOM_RIGHT:\n                    style.bottom = \"0px\";\n                    style.right = \"0px\";\n                    style.top = \"auto\";\n                    style.left = \"auto\";\n                    break;\n                case BUTTON_POSITION.BOTTOM_LEFT:\n                default:\n                    style.bottom = \"0px\";\n                    style.left = \"0px\";\n                    style.top = \"auto\";\n                    style.right = \"auto\";\n                    break;\n            }\n        } else {\n            style.display = \"block\";\n            style.width = \"100%\";\n            style.height = \"100%\";\n            style.top = \"0px\";\n            style.right = \"0px\";\n            style.left = \"0px\";\n            style.bottom = \"0px\";\n        }\n        Object.assign(this.torusIframe.style, style);\n        this._state.isIFrameFullScreen = isFull;\n        this.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n            params: {\n                isIFrameFullScreen: isFull,\n                rid\n            }\n        });\n    }\n    hideTorusButton() {\n        this._state.torusWidgetVisibility = false;\n        this._displayIframe();\n    }\n    showTorusButton() {\n        this._state.torusWidgetVisibility = true;\n        this._displayIframe();\n    }\n    /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */ _rpcRequest(payload, callback) {\n        const cb = callback;\n        const _payload = payload;\n        if (!Array.isArray(_payload)) {\n            if (!_payload.jsonrpc) {\n                _payload.jsonrpc = \"2.0\";\n            }\n        }\n        this.tryWindowHandle(_payload, cb);\n    }\n    /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param currentLoginProvider - The login Provider\n   * emits TorusInpageProvider#connect\n   */ _handleConnect(currentLoginProvider, isLoggedIn) {\n        if (!this._state.isConnected) {\n            this._state.isConnected = true;\n            this.emit(\"connect\", {\n                currentLoginProvider,\n                isLoggedIn\n            });\n            log.debug(messages.info.connected(currentLoginProvider));\n        }\n    }\n    /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */ _handleDisconnect(isRecoverable, errorMessage) {\n        if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n            this._state.isConnected = false;\n            let error;\n            if (isRecoverable) {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.EthereumRpcError(1013, // Try again later\n                errorMessage || messages.errors.disconnected());\n                log.debug(error);\n            } else {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.EthereumRpcError(1011, // Internal error\n                errorMessage || messages.errors.permanentlyDisconnected());\n                log.error(error);\n                this._state.currentLoginProvider = null;\n                this._state.isLoggedIn = false;\n                this._state.torusWidgetVisibility = false;\n                this._state.isIFrameFullScreen = false;\n                this._state.isPermanentlyDisconnected = true;\n            }\n            this.emit(\"disconnect\", error);\n        }\n    }\n    // Called if the iframe wants to close the window cause it is done processing the request\n    _handleCloseWindow(params) {\n        const { windowId } = params;\n        if (this.windowRefs[windowId]) {\n            this.windowRefs[windowId].close();\n            delete this.windowRefs[windowId];\n        }\n    }\n    async _createPopupBlockAlert(windowId, url) {\n        const logoUrl = this.getLogoUrl();\n        const torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\">' + `<div id=\"torusAlert__logo\"><img src=\"${logoUrl}\" /></div>` + \"<div>\" + `<h1 id=\"torusAlert__title\">${this.embedTranslations.actionRequired}</h1>` + `<p id=\"torusAlert__desc\">${this.embedTranslations.pendingAction}</p>` + \"</div>\" + \"</div>\");\n        const successAlert = htmlToElement(`<div><a id=\"torusAlert__btn\">${this.embedTranslations.continue}</a></div>`);\n        const btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n        btnContainer.appendChild(successAlert);\n        torusAlert.appendChild(btnContainer);\n        const bindOnLoad = ()=>{\n            successAlert.addEventListener(\"click\", ()=>{\n                this._handleWindow(windowId, {\n                    url,\n                    target: \"_blank\",\n                    features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                });\n                torusAlert.remove();\n                if (this.torusAlertContainer.children.length === 0) this.torusAlertContainer.style.display = \"none\";\n            });\n        };\n        const attachOnLoad = ()=>{\n            this.torusAlertContainer.appendChild(torusAlert);\n        };\n        await documentReady();\n        attachOnLoad();\n        bindOnLoad();\n        this.torusAlertContainer.style.display = \"block\";\n    }\n    getLogoUrl() {\n        const logoUrl = `${this.torusUrl}/images/torus_icon-blue.svg`;\n        return logoUrl;\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(TorusCommunicationProvider, \"_defaultState\", {\n    buttonPosition: \"bottom-left\",\n    currentLoginProvider: null,\n    isIFrameFullScreen: false,\n    hasEmittedConnection: false,\n    torusWidgetVisibility: false,\n    initialized: false,\n    isLoggedIn: false,\n    isPermanentlyDisconnected: false,\n    isConnected: false\n});\nfunction ownKeys$1(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread$1(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys$1(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nclass TorusInPageProvider extends BaseProvider {\n    /**\n   * The chain ID of the currently connected Solana chain.\n   * See [chainId.network]{@link https://chainid.network} for more information.\n   */ /**\n   * The user's currently selected Solana address.\n   * If null, Torus is either locked or the user has not permitted any\n   * addresses to be viewed.\n   */ constructor(connectionStream, _ref){\n        let { maxEventListeners = 100, jsonRpcStreamName = \"provider\" } = _ref;\n        super(connectionStream, {\n            maxEventListeners,\n            jsonRpcStreamName\n        });\n        // private state\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"chainId\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"selectedAddress\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"tryWindowHandle\", void 0);\n        this._state = _objectSpread$1({}, TorusInPageProvider._defaultState);\n        // public state\n        this.selectedAddress = null;\n        this.chainId = null;\n        this._handleAccountsChanged = this._handleAccountsChanged.bind(this);\n        this._handleChainChanged = this._handleChainChanged.bind(this);\n        this._handleUnlockStateChanged = this._handleUnlockStateChanged.bind(this);\n        // setup own event listeners\n        // EIP-1193 connect\n        this.on(\"connect\", ()=>{\n            this._state.isConnected = true;\n        });\n        const jsonRpcNotificationHandler = (payload)=>{\n            const { method, params } = payload;\n            if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n                this._handleAccountsChanged(params);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n                this._handleUnlockStateChanged(params);\n            } else if (method === _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n                this._handleChainChanged(params);\n            }\n        };\n        // json rpc notification listener\n        this.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n    }\n    /**\n   * Returns whether the inpage provider is connected to Torus.\n   */ isConnected() {\n        return this._state.isConnected;\n    }\n    // Private Methods\n    //= ===================\n    /**\n   * Constructor helper.\n   * Populates initial state by calling 'wallet_getProviderState' and emits\n   * necessary events.\n   */ async _initializeState() {\n        try {\n            const { accounts, chainId, isUnlocked } = await this.request({\n                method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n                params: []\n            });\n            // indicate that we've connected, for EIP-1193 compliance\n            this.emit(\"connect\", {\n                chainId\n            });\n            this._handleChainChanged({\n                chainId\n            });\n            this._handleUnlockStateChanged({\n                accounts,\n                isUnlocked\n            });\n            this._handleAccountsChanged(accounts);\n        } catch (error) {\n            log.error(\"Torus: Failed to get initial state. Please report this bug.\", error);\n        } finally{\n            log.info(\"initialized provider state\");\n            this._state.initialized = true;\n            this.emit(\"_initialized\");\n        }\n    }\n    /**\n   * Internal RPC method. Forwards requests to background via the RPC engine.\n   * Also remap ids inbound and outbound\n   */ _rpcRequest(payload, callback) {\n        let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        let cb = callback;\n        const _payload = payload;\n        if (!Array.isArray(_payload)) {\n            if (!_payload.jsonrpc) {\n                _payload.jsonrpc = \"2.0\";\n            }\n            if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n                // handle accounts changing\n                cb = (err, res)=>{\n                    this._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n                    callback(err, res);\n                };\n            } else if (_payload.method === \"wallet_getProviderState\") {\n                this._rpcEngine.handle(payload, cb);\n                return;\n            }\n        }\n        this.tryWindowHandle(_payload, cb);\n    }\n    /**\n   * When the provider becomes connected, updates internal state and emits\n   * required events. Idempotent.\n   *\n   * @param chainId - The ID of the newly connected chain.\n   * emits TorusInpageProvider#connect\n   */ _handleConnect(chainId) {\n        if (!this._state.isConnected) {\n            this._state.isConnected = true;\n            this.emit(\"connect\", {\n                chainId\n            });\n            log.debug(messages.info.connected(chainId));\n        }\n    }\n    /**\n   * When the provider becomes disconnected, updates internal state and emits\n   * required events. Idempotent with respect to the isRecoverable parameter.\n   *\n   * Error codes per the CloseEvent status codes as required by EIP-1193:\n   * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n   *\n   * @param isRecoverable - Whether the disconnection is recoverable.\n   * @param errorMessage - A custom error message.\n   * emits TorusInpageProvider#disconnect\n   */ _handleDisconnect(isRecoverable, errorMessage) {\n        if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n            this._state.isConnected = false;\n            let error;\n            if (isRecoverable) {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.EthereumRpcError(1013, // Try again later\n                errorMessage || messages.errors.disconnected());\n                log.debug(error);\n            } else {\n                error = new eth_rpc_errors__WEBPACK_IMPORTED_MODULE_5__.EthereumRpcError(1011, // Internal error\n                errorMessage || messages.errors.permanentlyDisconnected());\n                log.error(error);\n                this.chainId = null;\n                this._state.accounts = null;\n                this.selectedAddress = null;\n                this._state.isUnlocked = false;\n                this._state.isPermanentlyDisconnected = true;\n            }\n            this.emit(\"disconnect\", error);\n        }\n    }\n    /**\n   * Called when accounts may have changed.\n   */ _handleAccountsChanged(accounts) {\n        let isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n        let isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n        // defensive programming\n        let finalAccounts = accounts;\n        if (!Array.isArray(finalAccounts)) {\n            log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n            finalAccounts = [];\n        }\n        for (const account of accounts){\n            if (typeof account !== \"string\") {\n                log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n                finalAccounts = [];\n                break;\n            }\n        }\n        // emit accountsChanged if anything about the accounts array has changed\n        if (!fast_deep_equal__WEBPACK_IMPORTED_MODULE_9___default()(this._state.accounts, finalAccounts)) {\n            // we should always have the correct accounts even before solana_accounts\n            // returns, except in cases where isInternal is true\n            if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n                log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n            }\n            this._state.accounts = finalAccounts;\n            this.emit(\"accountsChanged\", finalAccounts);\n        }\n        // handle selectedAddress\n        if (this.selectedAddress !== finalAccounts[0]) {\n            this.selectedAddress = finalAccounts[0] || null;\n        }\n    }\n    /**\n   * Upon receipt of a new chainId and networkVersion, emits corresponding\n   * events and sets relevant public state.\n   * Does nothing if neither the chainId nor the networkVersion are different\n   * from existing values.\n   *\n   * emits TorusInpageProvider#chainChanged\n   * @param networkInfo - An object with network info.\n   */ _handleChainChanged() {\n        let { chainId } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!chainId) {\n            log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n                chainId\n            });\n            return;\n        }\n        if (chainId === \"loading\") {\n            this._handleDisconnect(true);\n        } else {\n            this._handleConnect(chainId);\n            if (chainId !== this.chainId) {\n                this.chainId = chainId;\n                if (this._state.initialized) {\n                    this.emit(\"chainChanged\", this.chainId);\n                }\n            }\n        }\n    }\n    /**\n   * Upon receipt of a new isUnlocked state, sets relevant public state.\n   * Calls the accounts changed handler with the received accounts, or an empty\n   * array.\n   *\n   * Does nothing if the received value is equal to the existing value.\n   * There are no lock/unlock events.\n   *\n   * @param opts - Options bag.\n   */ _handleUnlockStateChanged() {\n        let { accounts, isUnlocked } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (typeof isUnlocked !== \"boolean\") {\n            log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n                isUnlocked\n            });\n            return;\n        }\n        if (isUnlocked !== this._state.isUnlocked) {\n            this._state.isUnlocked = isUnlocked;\n            this._handleAccountsChanged(accounts || []);\n        }\n    }\n}\n_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(TorusInPageProvider, \"_defaultState\", {\n    accounts: null,\n    isConnected: false,\n    isUnlocked: false,\n    initialized: false,\n    isPermanentlyDisconnected: false,\n    hasEmittedConnection: false\n});\n/**\n * Returns whether the given image URL exists\n */ function imgExists(url) {\n    return new Promise((resolve, reject)=>{\n        try {\n            const img = document.createElement(\"img\");\n            img.onload = ()=>resolve(true);\n            img.onerror = ()=>resolve(false);\n            img.src = url;\n        } catch (e) {\n            reject(e);\n        }\n    });\n}\n/**\n * Extracts a name for the site from the DOM\n */ const getSiteName = (window1)=>{\n    const { document: document1 } = window1;\n    const siteName = document1.querySelector('head > meta[property=\"og:site_name\"]');\n    if (siteName) {\n        return siteName.content;\n    }\n    const metaTitle = document1.querySelector('head > meta[name=\"title\"]');\n    if (metaTitle) {\n        return metaTitle.content;\n    }\n    if (document1.title && document1.title.length > 0) {\n        return document1.title;\n    }\n    return window1.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */ async function getSiteIcon(window1) {\n    try {\n        const { document: document1 } = window1;\n        // Use the site's favicon if it exists\n        let icon = document1.querySelector('head > link[rel=\"shortcut icon\"]');\n        if (icon && await imgExists(icon.href)) {\n            return icon.href;\n        }\n        // Search through available icons in no particular order\n        icon = Array.from(document1.querySelectorAll('head > link[rel=\"icon\"]')).find((_icon)=>Boolean(_icon.href));\n        if (icon && await imgExists(icon.href)) {\n            return icon.href;\n        }\n        return \"\";\n    } catch (error) {\n        return \"\";\n    }\n}\n/**\n * Gets site metadata and returns it\n *\n */ const getSiteMetadata = async ()=>({\n        name: getSiteName(window),\n        icon: await getSiteIcon(window)\n    });\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter(function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        })), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\nfunction _objectSpread(target) {\n    for(var i = 1; i < arguments.length; i++){\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach(function(key) {\n            _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(target, key, source[key]);\n        }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        });\n    }\n    return target;\n}\nconst PROVIDER_UNSAFE_METHODS = [\n    \"send_transaction\",\n    \"sign_transaction\",\n    \"sign_all_transactions\",\n    \"sign_message\",\n    \"connect\"\n];\nconst COMMUNICATION_UNSAFE_METHODS = [\n    _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.SET_PROVIDER\n];\nconst isLocalStorageAvailable = storageAvailable(\"localStorage\");\n// preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n(async function preLoadIframe() {\n    try {\n        if (typeof document === \"undefined\") return;\n        const torusIframeHtml = document.createElement(\"link\");\n        const { torusUrl } = await getTorusUrl(\"production\");\n        torusIframeHtml.href = `${torusUrl}/frame`;\n        torusIframeHtml.crossOrigin = \"anonymous\";\n        torusIframeHtml.type = \"text/html\";\n        torusIframeHtml.rel = \"prefetch\";\n        if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n            if (torusIframeHtml.relList.supports(\"prefetch\")) {\n                document.head.appendChild(torusIframeHtml);\n            }\n        }\n    } catch (error) {\n        log.warn(error);\n    }\n})();\nclass Torus {\n    constructor(){\n        let { modalZIndex = 99999 } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"isInitialized\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"torusAlert\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"modalZIndex\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"alertZIndex\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"requestedLoginProvider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"provider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"communicationProvider\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"dappStorageKey\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"isTopupHidden\", false);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"torusAlertContainer\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"torusUrl\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"torusIframe\", void 0);\n        _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_0___default()(this, \"styleLink\", void 0);\n        this.torusUrl = \"\";\n        this.isInitialized = false; // init done\n        this.requestedLoginProvider = null;\n        this.modalZIndex = modalZIndex;\n        this.alertZIndex = modalZIndex + 1000;\n        this.dappStorageKey = \"\";\n    }\n    get isLoggedIn() {\n        if (!this.communicationProvider) return false;\n        return this.communicationProvider.isLoggedIn;\n    }\n    async init() {\n        let { buildEnv = TORUS_BUILD_ENV.PRODUCTION, enableLogging = false, network, showTorusButton = false, useLocalStorage = false, buttonPosition = BUTTON_POSITION.BOTTOM_LEFT, apiKey = \"torus-default\", extraParams = {}, whiteLabel } = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (this.isInitialized) throw new Error(\"Already initialized\");\n        (0,_toruslabs_http_helpers__WEBPACK_IMPORTED_MODULE_3__.setAPIKey)(apiKey);\n        const { torusUrl, logLevel } = await getTorusUrl(buildEnv);\n        log.enableAll();\n        log.info(torusUrl, \"url loaded\");\n        log.info(`Solana Embed Version :${version}`);\n        this.torusUrl = torusUrl;\n        log.setDefaultLevel(logLevel);\n        if (enableLogging) log.enableAll();\n        else log.disableAll();\n        const dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n        const torusIframeUrl = new URL(torusUrl);\n        if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";\n        else torusIframeUrl.pathname += \"/frame\";\n        const hashParams = new URLSearchParams();\n        if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n        hashParams.append(\"origin\", window.location.origin);\n        torusIframeUrl.hash = hashParams.toString();\n        // Iframe code\n        this.torusIframe = htmlToElement(`<iframe\n        id=\"torusIframe\"\n        class=\"torusIframe\"\n        src=\"${torusIframeUrl.href}\"\n        style=\"display: none; position: fixed; top: 0; right: 0; width: 100%;\n        height: 100%; border: none; border-radius: 0; z-index: ${this.modalZIndex.toString()}\"\n      ></iframe>`);\n        this.torusAlertContainer = htmlToElement(`<div id=\"torusAlertContainer\" style=\"display:none; z-index: ${this.alertZIndex.toString()}\"></div>`);\n        this.styleLink = htmlToElement(`<link href=\"${torusUrl}/css/widget.css\" rel=\"stylesheet\" type=\"text/css\">`);\n        const handleSetup = async ()=>{\n            return new Promise((resolve, reject)=>{\n                try {\n                    window.document.head.appendChild(this.styleLink);\n                    window.document.body.appendChild(this.torusIframe);\n                    window.document.body.appendChild(this.torusAlertContainer);\n                    this.torusIframe.addEventListener(\"load\", async ()=>{\n                        const dappMetadata = await getSiteMetadata();\n                        // send init params here\n                        this.torusIframe.contentWindow.postMessage({\n                            buttonPosition,\n                            apiKey,\n                            network,\n                            dappMetadata,\n                            extraParams,\n                            whiteLabel\n                        }, torusIframeUrl.origin);\n                        await this._setupWeb3({\n                            torusUrl\n                        });\n                        if (showTorusButton) this.showTorusButton();\n                        if (whiteLabel?.topupHide) this.isTopupHidden = whiteLabel.topupHide;\n                        else this.hideTorusButton();\n                        this.isInitialized = true;\n                        window.torus = this;\n                        resolve();\n                    });\n                } catch (error) {\n                    reject(error);\n                }\n            });\n        };\n        await documentReady();\n        await handleSetup();\n    }\n    async login() {\n        let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        if (!this.isInitialized) throw new Error(\"Call init() first\");\n        try {\n            this.requestedLoginProvider = params.loginProvider || null;\n            if (!this.requestedLoginProvider) {\n                this.communicationProvider._displayIframe({\n                    isFull: true\n                });\n            }\n            // If user is already logged in, we assume they have given access to the website\n            const res = await new Promise((resolve, reject)=>{\n                // We use this method because we want to update inPage provider state with account info\n                this.provider._rpcRequest({\n                    method: \"solana_requestAccounts\",\n                    params: [\n                        this.requestedLoginProvider,\n                        params.login_hint\n                    ]\n                }, (0,_toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.getRpcPromiseCallback)(resolve, reject));\n            });\n            if (Array.isArray(res) && res.length > 0) {\n                return res;\n            }\n            // This would never happen, but just in case\n            throw new Error(\"Login failed\");\n        } catch (error) {\n            log.error(\"login failed\", error);\n            throw error;\n        } finally{\n            if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n        }\n    }\n    async loginWithPrivateKey(loginParams) {\n        if (!this.isInitialized) throw new Error(\"Call init() first\");\n        const { privateKey, userInfo } = loginParams;\n        const { success } = await this.communicationProvider.request({\n            method: \"login_with_private_key\",\n            params: {\n                privateKey,\n                userInfo\n            }\n        });\n        if (!success) throw new Error(\"Login Failed\");\n    }\n    async logout() {\n        if (!this.communicationProvider.isLoggedIn) throw new Error(\"Not logged in\");\n        await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.LOGOUT,\n            params: []\n        });\n        this.requestedLoginProvider = null;\n    }\n    async cleanUp() {\n        if (this.communicationProvider.isLoggedIn) {\n            await this.logout();\n        }\n        this.clearInit();\n    }\n    clearInit() {\n        function isElement(element) {\n            return element instanceof Element || element instanceof Document;\n        }\n        if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n            this.styleLink.remove();\n            this.styleLink = undefined;\n        }\n        if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n            this.torusIframe.remove();\n            this.torusIframe = undefined;\n        }\n        if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n            this.torusAlert = undefined;\n            this.torusAlertContainer.remove();\n            this.torusAlertContainer = undefined;\n        }\n        this.isInitialized = false;\n    }\n    hideTorusButton() {\n        this.communicationProvider.hideTorusButton();\n    }\n    showTorusButton() {\n        this.communicationProvider.showTorusButton();\n    }\n    async setProvider(params) {\n        await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n            params: _objectSpread({}, params)\n        });\n    }\n    async showWallet(path) {\n        let params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n        const instanceId = await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n            params: []\n        });\n        const finalPath = path ? `/${path}` : \"\";\n        const finalUrl = new URL(`${this.torusUrl}/wallet${finalPath}`);\n        // Using URL constructor to prevent js injection and allow parameter validation.!\n        finalUrl.searchParams.append(\"instanceId\", instanceId);\n        Object.keys(params).forEach((x)=>{\n            finalUrl.searchParams.append(x, params[x]);\n        });\n        if (this.dappStorageKey) {\n            finalUrl.hash = `#dappStorageKey=${this.dappStorageKey}`;\n        }\n        // No need to track this window state. Hence, no _handleWindow call.\n        const walletWindow = new PopupHandler({\n            url: finalUrl,\n            features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n        });\n        walletWindow.open();\n    }\n    async getUserInfo() {\n        const userInfoResponse = await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.USER_INFO,\n            params: []\n        });\n        return userInfoResponse;\n    }\n    async initiateTopup(provider, params) {\n        if (!this.isInitialized) throw new Error(\"Torus is not initialized\");\n        const windowId = getWindowId();\n        this.communicationProvider._handleWindow(windowId);\n        const topupResponse = await this.communicationProvider.request({\n            method: _toruslabs_base_controllers__WEBPACK_IMPORTED_MODULE_2__.COMMUNICATION_JRPC_METHODS.TOPUP,\n            params: {\n                provider,\n                params,\n                windowId\n            }\n        });\n        return topupResponse;\n    }\n    // Solana specific API\n    async getAccounts() {\n        const response = await this.provider.request({\n            method: \"getAccounts\",\n            params: []\n        });\n        return response;\n    }\n    async sendTransaction(transaction) {\n        const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n        const message = isLegacyTransaction ? transaction.serialize({\n            requireAllSignatures: false\n        }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n        const response = await this.provider.request({\n            method: \"send_transaction\",\n            params: {\n                message,\n                isLegacyTransaction\n            }\n        });\n        return response;\n    }\n    // support sendOptions\n    async signAndSendTransaction(transaction, options) {\n        const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n        const message = isLegacyTransaction ? transaction.serialize({\n            requireAllSignatures: false\n        }).toString(\"hex\") : Buffer.from(transaction.serialize()).toString(\"hex\");\n        const response = await this.provider.request({\n            method: \"send_transaction\",\n            params: {\n                message,\n                options,\n                isLegacyTransaction\n            }\n        });\n        return {\n            signature: response\n        };\n    }\n    async signTransaction(transaction) {\n        const isLegacyTransaction = isLegacyTransactionInstance(transaction);\n        const message = isLegacyTransaction ? transaction.serializeMessage().toString(\"hex\") : Buffer.from(transaction.message.serialize()).toString(\"hex\");\n        const response = await this.provider.request({\n            method: \"sign_transaction\",\n            params: {\n                message,\n                messageOnly: true,\n                isLegacyTransaction\n            }\n        });\n        // reconstruct signature pair\n        const parsed = JSON.parse(response);\n        const signature = {\n            publicKey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(parsed.publicKey),\n            signature: Buffer.from(parsed.signature, \"hex\")\n        };\n        transaction.addSignature(signature.publicKey, signature.signature);\n        return transaction;\n    }\n    async signAllTransactions(transactions) {\n        let isLegacyTransaction;\n        const encodedMessage = transactions.map((tx)=>{\n            isLegacyTransaction = isLegacyTransactionInstance(tx);\n            return isLegacyTransaction ? tx.serializeMessage().toString(\"hex\") : Buffer.from(tx.message.serialize()).toString(\"hex\");\n        });\n        const responses = await this.provider.request({\n            method: \"sign_all_transactions\",\n            params: {\n                message: encodedMessage,\n                messageOnly: true,\n                isLegacyTransaction\n            }\n        });\n        // reconstruct signature pairs\n        const signatures = responses.map((item)=>{\n            const parsed = JSON.parse(item);\n            return {\n                publicKey: new _solana_web3_js__WEBPACK_IMPORTED_MODULE_1__.PublicKey(parsed.publicKey),\n                signature: Buffer.from(parsed.signature, \"hex\")\n            };\n        });\n        transactions.forEach((tx, idx)=>{\n            tx.addSignature(signatures[idx].publicKey, signatures[idx].signature);\n            return tx;\n        });\n        return transactions;\n    }\n    async signMessage(data) {\n        const response = await this.provider.request({\n            method: \"sign_message\",\n            params: {\n                data\n            }\n        });\n        return response;\n    }\n    async getGaslessPublicKey() {\n        const response = await this.provider.request({\n            method: \"get_gasless_public_key\",\n            params: []\n        });\n        return response;\n    }\n    // async connect(): Promise<boolean> {\n    //   const response = (await this.provider.request({\n    //     method: \"connect\",\n    //     params: {},\n    //   })) as boolean;\n    //   return response;\n    // }\n    handleDappStorageKey(useLocalStorage) {\n        const localStorageKey = `${configuration.localStorageKeyPrefix}${window.location.hostname}`;\n        let dappStorageKey = \"\";\n        if (isLocalStorageAvailable && useLocalStorage) {\n            const storedKey = window.localStorage.getItem(localStorageKey);\n            if (storedKey) dappStorageKey = storedKey;\n            else {\n                const generatedKey = `torus-app-${getWindowId()}`;\n                window.localStorage.setItem(localStorageKey, generatedKey);\n                dappStorageKey = generatedKey;\n            }\n        }\n        this.dappStorageKey = dappStorageKey;\n        return dappStorageKey;\n    }\n    async _setupWeb3(providerParams) {\n        log.info(\"setupWeb3 running\");\n        // setup background connection\n        const providerStream = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.BasePostMessageStream({\n            name: \"embed_torus\",\n            target: \"iframe_torus\",\n            targetWindow: this.torusIframe.contentWindow\n        });\n        // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n        const communicationStream = new _toruslabs_openlogin_jrpc__WEBPACK_IMPORTED_MODULE_4__.BasePostMessageStream({\n            name: \"embed_communication\",\n            target: \"iframe_communication\",\n            targetWindow: this.torusIframe.contentWindow\n        });\n        // compose the inPage provider\n        const inPageProvider = new TorusInPageProvider(providerStream, {});\n        const communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n        inPageProvider.tryWindowHandle = (payload, cb)=>{\n            const _payload = payload;\n            if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n                if (!this.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n                const windowId = getWindowId();\n                communicationProvider._handleWindow(windowId, {\n                    target: \"_blank\",\n                    features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                });\n                // for inPageProvider methods sending windowId in request instead of params\n                // as params might be positional.\n                _payload.windowId = windowId;\n            }\n            inPageProvider._rpcEngine.handle(_payload, cb);\n        };\n        communicationProvider.tryWindowHandle = (payload, cb)=>{\n            const _payload = payload;\n            if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n                const windowId = getWindowId();\n                communicationProvider._handleWindow(windowId, {\n                    target: \"_blank\",\n                    features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n                });\n                // for communication methods sending window id in jrpc req params\n                _payload.params.windowId = windowId;\n            }\n            communicationProvider._rpcEngine.handle(_payload, cb);\n        };\n        // detect solana_requestAccounts and pipe to enable for now\n        const detectAccountRequestPrototypeModifier = (m)=>{\n            const originalMethod = inPageProvider[m];\n            // eslint-disable-next-line @typescript-eslint/no-this-alias\n            const self = this;\n            inPageProvider[m] = function providerFunc(request, cb) {\n                const { method, params = [] } = request;\n                if (method === \"solana_requestAccounts\") {\n                    if (!cb) return self.login({\n                        loginProvider: params[0]\n                    });\n                    self.login({\n                        loginProvider: params[0]\n                    })// eslint-disable-next-line promise/no-callback-in-promise\n                    .then((res)=>cb(null, res))// eslint-disable-next-line promise/no-callback-in-promise\n                    .catch((err)=>cb(err));\n                }\n                return originalMethod.apply(this, [\n                    request,\n                    cb\n                ]);\n            };\n        };\n        // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n        detectAccountRequestPrototypeModifier(\"request\");\n        detectAccountRequestPrototypeModifier(\"sendAsync\");\n        detectAccountRequestPrototypeModifier(\"send\");\n        const proxiedInPageProvider = new Proxy(inPageProvider, {\n            // straight up lie that we deleted the property so that it doesn't\n            // throw an error in strict mode\n            deleteProperty: ()=>true\n        });\n        const proxiedCommunicationProvider = new Proxy(communicationProvider, {\n            // straight up lie that we deleted the property so that it doesn't\n            // throw an error in strict mode\n            deleteProperty: ()=>true\n        });\n        this.provider = proxiedInPageProvider;\n        this.communicationProvider = proxiedCommunicationProvider;\n        await Promise.all([\n            inPageProvider._initializeState(),\n            communicationProvider._initializeState(_objectSpread(_objectSpread({}, providerParams), {}, {\n                dappStorageKey: this.dappStorageKey,\n                torusAlertContainer: this.torusAlertContainer,\n                torusIframe: this.torusIframe\n            }))\n        ]);\n        log.debug(\"Torus - injected provider\");\n    }\n}\n //# sourceMappingURL=solanaEmbed.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRvcnVzbGFicy9zb2xhbmEtZW1iZWQvZGlzdC9zb2xhbmFFbWJlZC5lc20uanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQW9FO0FBQ3hCO0FBQ2lJO0FBQ3pIO0FBQ3FJO0FBQzVIO0FBQzFCO0FBQ1g7QUFDUTtBQUNLO0FBRXJDLElBQUlxQixVQUFVO0FBRWQsSUFBSUMsV0FBVztJQUNiQyxRQUFRO1FBQ05DLGNBQWMsSUFBTTtRQUNwQkMseUJBQXlCLElBQU07UUFDL0JDLGlCQUFpQkMsQ0FBQUEsU0FBVSxDQUFDLDZFQUE2RSxFQUFFQSxPQUFPLDhCQUE4QixDQUFDO1FBQ2pKQyxxQkFBcUIsSUFBTTtRQUMzQkMsZ0JBQWdCQyxDQUFBQSxvQkFBcUIsQ0FBQyxnREFBZ0QsRUFBRUEsa0JBQWtCLENBQUMsQ0FBQztRQUM1R0Msb0JBQW9CLElBQU0sQ0FBQyw4Q0FBOEMsQ0FBQztRQUMxRUMsc0JBQXNCLElBQU0sQ0FBQyx5Q0FBeUMsQ0FBQztRQUN2RUMsc0JBQXNCLElBQU0sQ0FBQyxxREFBcUQsQ0FBQztRQUNuRkMscUJBQXFCLElBQU0sQ0FBQyw0Q0FBNEMsQ0FBQztRQUN6RUMscUJBQXFCUixDQUFBQSxTQUFVLENBQUMsNENBQTRDLEVBQUVBLE9BQU8sRUFBRSxDQUFDO0lBQzFGO0lBQ0FTLE1BQU07UUFDSkMsV0FBV0MsQ0FBQUEsVUFBVyxDQUFDLG1DQUFtQyxFQUFFQSxRQUFRLEVBQUUsQ0FBQztJQUN6RTtJQUNBQyxVQUFVLENBQUM7QUFDYjtBQUVBLE1BQU1DLG1CQUFtQjtJQUN2QkMsU0FBUztJQUNUQyxNQUFNO0lBQ05DLGFBQWE7SUFDYkMsU0FBUztJQUNUQyxVQUFVO0lBQ1ZDLFNBQVM7QUFDWDtBQUNBLE1BQU1DLGtCQUFrQjtJQUN0QkMsWUFBWTtJQUNaQyxhQUFhO0lBQ2JDLFNBQVM7QUFDWDtBQUNBLE1BQU1DLGtCQUFrQjtJQUN0QkMsYUFBYTtJQUNiQyxVQUFVO0lB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QUM3RTtvQkFBU29JO2lCQUFHO1lBQ2pEO1FBQ0Y7UUFDQSxvRkFBb0Y7UUFDcEYrSyxzQ0FBc0M7UUFDdENBLHNDQUFzQztRQUN0Q0Esc0NBQXNDO1FBQ3RDLE1BQU1PLHdCQUF3QixJQUFJQyxNQUFNVixnQkFBZ0I7WUFDdEQsa0VBQWtFO1lBQ2xFLGdDQUFnQztZQUNoQ1csZ0JBQWdCLElBQU07UUFDeEI7UUFDQSxNQUFNQywrQkFBK0IsSUFBSUYsTUFBTTVHLHVCQUF1QjtZQUNwRSxrRUFBa0U7WUFDbEUsZ0NBQWdDO1lBQ2hDNkcsZ0JBQWdCLElBQU07UUFDeEI7UUFDQSxJQUFJLENBQUMvRSxRQUFRLEdBQUc2RTtRQUNoQixJQUFJLENBQUMzRyxxQkFBcUIsR0FBRzhHO1FBQzdCLE1BQU0xUyxRQUFRMlMsR0FBRyxDQUFDO1lBQUNiLGVBQWVsVCxnQkFBZ0I7WUFBSWdOLHNCQUFzQmhOLGdCQUFnQixDQUFDK0wsY0FBY0EsY0FBYyxDQUFDLEdBQUcrRyxpQkFBaUIsQ0FBQyxHQUFHO2dCQUNoSnBOLGdCQUFnQixJQUFJLENBQUNBLGNBQWM7Z0JBQ25Dc0IscUJBQXFCLElBQUksQ0FBQ0EsbUJBQW1CO2dCQUM3Q0MsYUFBYSxJQUFJLENBQUNBLFdBQVc7WUFDL0I7U0FBSTtRQUNKNU0sSUFBSW9PLEtBQUssQ0FBQztJQUNaO0FBQ0Y7QUFFcUgsQ0FDckgsMkNBQTJDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0B0b3J1c2xhYnMvc29sYW5hLWVtYmVkL2Rpc3Qvc29sYW5hRW1iZWQuZXNtLmpzPzAwOGIiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF9kZWZpbmVQcm9wZXJ0eSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5JztcbmltcG9ydCB7IFB1YmxpY0tleSB9IGZyb20gJ0Bzb2xhbmEvd2ViMy5qcyc7XG5pbXBvcnQgeyBjcmVhdGVMb2dnZXJNaWRkbGV3YXJlLCBDT01NVU5JQ0FUSU9OX0pSUENfTUVUSE9EUywgQ09NTVVOSUNBVElPTl9OT1RJRklDQVRJT05TLCBQUk9WSURFUl9KUlBDX01FVEhPRFMsIFBST1ZJREVSX05PVElGSUNBVElPTlMgfSBmcm9tICdAdG9ydXNsYWJzL2Jhc2UtY29udHJvbGxlcnMnO1xuaW1wb3J0IHsgc2V0QVBJS2V5IH0gZnJvbSAnQHRvcnVzbGFicy9odHRwLWhlbHBlcnMnO1xuaW1wb3J0IHsgU2FmZUV2ZW50RW1pdHRlciwgT2JqZWN0TXVsdGlwbGV4LCBjcmVhdGVTdHJlYW1NaWRkbGV3YXJlLCBKUlBDRW5naW5lLCBjcmVhdGVJZFJlbWFwTWlkZGxld2FyZSwgZ2V0UnBjUHJvbWlzZUNhbGxiYWNrLCBCYXNlUG9zdE1lc3NhZ2VTdHJlYW0gfSBmcm9tICdAdG9ydXNsYWJzL29wZW5sb2dpbi1qcnBjJztcbmltcG9ydCB7IGV0aEVycm9ycywgRXRoZXJldW1ScGNFcnJvciB9IGZyb20gJ2V0aC1ycGMtZXJyb3JzJztcbmltcG9ydCB7IGR1cGxleCB9IGZyb20gJ2lzLXN0cmVhbSc7XG5pbXBvcnQgcHVtcCBmcm9tICdwdW1wJztcbmltcG9ydCBsb2dsZXZlbCBmcm9tICdsb2dsZXZlbCc7XG5pbXBvcnQgZGVxdWFsIGZyb20gJ2Zhc3QtZGVlcC1lcXVhbCc7XG5cbnZhciB2ZXJzaW9uID0gXCIwLjMuNFwiO1xuXG52YXIgbWVzc2FnZXMgPSB7XG4gIGVycm9yczoge1xuICAgIGRpc2Nvbm5lY3RlZDogKCkgPT4gXCJUb3J1czogTG9zdCBjb25uZWN0aW9uIHRvIFRvcnVzLlwiLFxuICAgIHBlcm1hbmVudGx5RGlzY29ubmVjdGVkOiAoKSA9PiBcIlRvcnVzOiBEaXNjb25uZWN0ZWQgZnJvbSBpZnJhbWUuIFBhZ2UgcmVsb2FkIHJlcXVpcmVkLlwiLFxuICAgIHVuc3VwcG9ydGVkU3luYzogbWV0aG9kID0+IGBUb3J1czogVGhlIFRvcnVzIEV0aGVyZXVtIHByb3ZpZGVyIGRvZXMgbm90IHN1cHBvcnQgc3luY2hyb25vdXMgbWV0aG9kcyBsaWtlICR7bWV0aG9kfSB3aXRob3V0IGEgY2FsbGJhY2sgcGFyYW1ldGVyLmAsXG4gICAgaW52YWxpZER1cGxleFN0cmVhbTogKCkgPT4gXCJNdXN0IHByb3ZpZGUgYSBOb2RlLmpzLXN0eWxlIGR1cGxleCBzdHJlYW0uXCIsXG4gICAgaW52YWxpZE9wdGlvbnM6IG1heEV2ZW50TGlzdGVuZXJzID0+IGBJbnZhbGlkIG9wdGlvbnMuIFJlY2VpdmVkOiB7IG1heEV2ZW50TGlzdGVuZXJzOiAke21heEV2ZW50TGlzdGVuZXJzfX1gLFxuICAgIGludmFsaWRSZXF1ZXN0QXJnczogKCkgPT4gYEV4cGVjdGVkIGEgc2luZ2xlLCBub24tYXJyYXksIG9iamVjdCBhcmd1bWVudC5gLFxuICAgIGludmFsaWRSZXF1ZXN0TWV0aG9kOiAoKSA9PiBgJ2FyZ3MubWV0aG9kJyBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy5gLFxuICAgIGludmFsaWRSZXF1ZXN0UGFyYW1zOiAoKSA9PiBgJ2FyZ3MucGFyYW1zJyBtdXN0IGJlIGFuIG9iamVjdCBvciBhcnJheSBpZiBwcm92aWRlZC5gLFxuICAgIGludmFsaWRMb2dnZXJPYmplY3Q6ICgpID0+IGAnYXJncy5sb2dnZXInIG11c3QgYmUgYW4gb2JqZWN0IGlmIHByb3ZpZGVkLmAsXG4gICAgaW52YWxpZExvZ2dlck1ldGhvZDogbWV0aG9kID0+IGAnYXJncy5sb2dnZXInIG11c3QgaW5jbHVkZSByZXF1aXJlZCBtZXRob2QgJyR7bWV0aG9kfScuYFxuICB9LFxuICBpbmZvOiB7XG4gICAgY29ubmVjdGVkOiBjaGFpbklkID0+IGBUb3J1czogQ29ubmVjdGVkIHRvIGNoYWluIHdpdGggSUQgXCIke2NoYWluSWR9XCIuYFxuICB9LFxuICB3YXJuaW5nczoge31cbn07XG5cbmNvbnN0IFBBWU1FTlRfUFJPVklERVIgPSB7XG4gIE1PT05QQVk6IFwibW9vbnBheVwiLFxuICBXWVJFOiBcInd5cmVcIixcbiAgUkFNUE5FVFdPUks6IFwicmFtcG5ldHdvcmtcIixcbiAgWEFOUE9PTDogXCJ4YW5wb29sXCIsXG4gIE1FUkNVUllPOiBcIm1lcmN1cnlvXCIsXG4gIFRSQU5TQUs6IFwidHJhbnNha1wiXG59O1xuY29uc3QgVE9SVVNfQlVJTERfRU5WID0ge1xuICBQUk9EVUNUSU9OOiBcInByb2R1Y3Rpb25cIixcbiAgREVWRUxPUE1FTlQ6IFwiZGV2ZWxvcG1lbnRcIixcbiAgVEVTVElORzogXCJ0ZXN0aW5nXCJcbn07XG5jb25zdCBCVVRUT05fUE9TSVRJT04gPSB7XG4gIEJPVFRPTV9MRUZUOiBcImJvdHRvbS1sZWZ0XCIsXG4gIFRPUF9MRUZUOiBcInRvcC1sZWZ0XCIsXG4gIEJPVFRPTV9SSUdIVDogXCJib3R0b20tcmlnaHRcIixcbiAgVE9QX1JJR0hUOiBcInRvcC1yaWdodFwiXG59O1xuY29uc3QgTE9HSU5fUFJPVklERVIgPSB7XG4gIEdPT0dMRTogXCJnb29nbGVcIixcbiAgRkFDRUJPT0s6IFwiZmFjZWJvb2tcIixcbiAgUkVERElUOiBcInJlZGRpdFwiLFxuICBESVNDT1JEOiBcImRpc2NvcmRcIixcbiAgVFdJVENIOiBcInR3aXRjaFwiLFxuICBBUFBMRTogXCJhcHBsZVwiLFxuICBMSU5FOiBcImxpbmVcIixcbiAgR0lUSFVCOiBcImdpdGh1YlwiLFxuICBLQUtBTzogXCJrYWthb1wiLFxuICBMSU5LRURJTjogXCJsaW5rZWRpblwiLFxuICBUV0lUVEVSOiBcInR3aXR0ZXJcIixcbiAgV0VJQk86IFwid2VpYm9cIixcbiAgV0VDSEFUOiBcIndlY2hhdFwiLFxuICBFTUFJTF9QQVNTV09SRExFU1M6IFwiZW1haWxfcGFzc3dvcmRsZXNzXCJcbn07XG5cbmNvbnN0IHRyYW5zbGF0aW9ucyA9IHtcbiAgZW46IHtcbiAgICBlbWJlZDoge1xuICAgICAgY29udGludWU6IFwiQ29udGludWVcIixcbiAgICAgIGFjdGlvblJlcXVpcmVkOiBcIkF1dGhvcml6YXRpb24gcmVxdWlyZWRcIixcbiAgICAgIHBlbmRpbmdBY3Rpb246IFwiQ2xpY2sgY29udGludWUgdG8gcHJvY2VlZCB3aXRoIHlvdXIgcmVxdWVzdCBpbiBhIHBvcHVwXCIsXG4gICAgICBjb29raWVzUmVxdWlyZWQ6IFwiQ29va2llcyBSZXF1aXJlZFwiLFxuICAgICAgZW5hYmxlQ29va2llczogXCJQbGVhc2UgZW5hYmxlIGNvb2tpZXMgaW4geW91ciBicm93c2VyIHByZWZlcmVuY2VzIHRvIGFjY2VzcyBUb3J1c1wiLFxuICAgICAgY2xpY2tIZXJlOiBcIk1vcmUgSW5mb1wiXG4gICAgfVxuICB9LFxuICBkZToge1xuICAgIGVtYmVkOiB7XG4gICAgICBjb250aW51ZTogXCJGb3J0c2V0emVuXCIsXG4gICAgICBhY3Rpb25SZXF1aXJlZDogXCJBdXRvcmlzaWVydW5nIGVyZm9yZGVybGljaFwiLFxuICAgICAgcGVuZGluZ0FjdGlvbjogXCJLbGlja2VuIFNpZSBpbiBlaW5lbSBQb3B1cCBhdWYgV2VpdGVyLCB1bSBtaXQgSWhyZXIgQW5mcmFnZSBmb3J0enVmYWhyZW5cIixcbiAgICAgIGNvb2tpZXNSZXF1aXJlZDogXCJDb29raWVzIGJlbsO2dGlndFwiLFxuICAgICAgZW5hYmxlQ29va2llczogXCJCaXR0ZSBha3RpdmllcmVuIFNpZSBDb29raWVzIGluIElocmVuIEJyb3dzZXJlaW5zdGVsbHVuZ2VuLCB1bSBhdWYgVG9ydXMgenV6dWdyZWlmZW5cIixcbiAgICAgIGNsaWNrSGVyZTogXCJNZWhyIEluZm9cIlxuICAgIH1cbiAgfSxcbiAgamE6IHtcbiAgICBlbWJlZDoge1xuICAgICAgY29udGludWU6IFwi57aZ57aa44GZ44KLXCIsXG4gICAgICBhY3Rpb25SZXF1aXJlZDogXCLoqo3oqLzjgYzlv4XopoHjgafjgZlcIixcbiAgICAgIHBlbmRpbmdBY3Rpb246IFwi57aa6KGM44KS44Kv44Oq44OD44Kv44GX44Gm44CB44Od44OD44OX44Ki44OD44OX44Gn44Oq44Kv44Ko44K544OI44KS57aa6KGM44GX44G+44GZXCIsXG4gICAgICBjb29raWVzUmVxdWlyZWQ6IFwi5b+F6KaB44Gq44Kv44OD44Kt44O8XCIsXG4gICAgICBlbmFibGVDb29raWVzOiBcIlRvcnVz44Gr44Ki44Kv44K744K544GZ44KL44Gr44Gv44CB44OW44Op44Km44K244Gu6Kit5a6a44GnQ29va2ll44KS5pyJ5Yq544Gr44GX44Gm44GP44Gg44GV44GE44CCXCIsXG4gICAgICBjbGlja0hlcmU6IFwi6Kmz44GX44GP44GvXCJcbiAgICB9XG4gIH0sXG4gIGtvOiB7XG4gICAgZW1iZWQ6IHtcbiAgICAgIGNvbnRpbnVlOiBcIuqzhOyGje2VmOuLpFwiLFxuICAgICAgYWN0aW9uUmVxdWlyZWQ6IFwi7Iq57J24IO2VhOyalFwiLFxuICAgICAgcGVuZGluZ0FjdGlvbjogXCLtjJ3sl4Xsl5DshJwg7JqU7LKt7J2EIOynhO2Wie2VmOugpOuptCDqs4Tsho3snYQg7YG066at7ZWY7Iut7Iuc7JikLlwiLFxuICAgICAgY29va2llc1JlcXVpcmVkOiBcIuy/oO2CpCDtlYTsmpRcIixcbiAgICAgIGVuYWJsZUNvb2tpZXM6IFwi67iM65287Jqw7KCAIO2ZmOqyvSDshKTsoJXsl5DshJwg7L+g7YKk66W8IO2ZnOyEse2ZlO2VmOyXrCBUb3J1c+yXkCDslaHshLjsiqTtlZjsi63si5zsmKQuXCIsXG4gICAgICBjbGlja0hlcmU6IFwi642UIOunjuydgCDsoJXrs7RcIlxuICAgIH1cbiAgfSxcbiAgemg6IHtcbiAgICBlbWJlZDoge1xuICAgICAgY29udGludWU6IFwi57un57utXCIsXG4gICAgICBhY3Rpb25SZXF1aXJlZDogXCLpnIDopoHmjojmnYNcIixcbiAgICAgIHBlbmRpbmdBY3Rpb246IFwi5Y2V5Ye757un57ut5Lul5Zyo5by55Ye656qX5Y+j5Lit57un57ut5oKo55qE6K+35rGCXCIsXG4gICAgICBjb29raWVzUmVxdWlyZWQ6IFwi5b+F5aGrQ29va2llXCIsXG4gICAgICBlbmFibGVDb29raWVzOiBcIuivt+WcqOaCqOeahOa1j+iniOWZqOmmlumAiemhueS4reWQr+eUqGNvb2tpZeS7peiuv+mXrlRvcnVz44CCXCIsXG4gICAgICBjbGlja0hlcmU6IFwi5pu05aSa5L+h5oGvXCJcbiAgICB9XG4gIH1cbn07XG52YXIgY29uZmlndXJhdGlvbiA9IHtcbiAgc3VwcG9ydGVkVmVyaWZpZXJMaXN0OiBbTE9HSU5fUFJPVklERVIuR09PR0xFLCBMT0dJTl9QUk9WSURFUi5SRURESVQsIExPR0lOX1BST1ZJREVSLkRJU0NPUkRdLFxuICBhcGk6IFwiaHR0cHM6Ly9hcGkudG9yLnVzXCIsXG4gIHRyYW5zbGF0aW9ucyxcbiAgcHJvZFRvcnVzVXJsOiBcIlwiLFxuICBsb2NhbFN0b3JhZ2VLZXlQcmVmaXg6IGB0b3J1cy1gXG59O1xuXG52YXIgbG9nID0gbG9nbGV2ZWwuZ2V0TG9nZ2VyKFwic29sYW5hLWVtYmVkXCIpO1xuXG4vLyB1dGlsaXR5IGZ1bmN0aW9uc1xuLyoqXG4gKiBqc29uLXJwYy1lbmdpbmUgbWlkZGxld2FyZSB0aGF0IGxvZ3MgUlBDIGVycm9ycyBhbmQgYW5kIHZhbGlkYXRlcyByZXEubWV0aG9kLlxuICpcbiAqIEBwYXJhbSBsb2cgLSBUaGUgbG9nZ2luZyBBUEkgdG8gdXNlLlxuICogQHJldHVybnMgIGpzb24tcnBjLWVuZ2luZSBtaWRkbGV3YXJlIGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUVycm9yTWlkZGxld2FyZSgpIHtcbiAgcmV0dXJuIChyZXEsIHJlcywgbmV4dCkgPT4ge1xuICAgIC8vIGpzb24tcnBjLWVuZ2luZSB3aWxsIHRlcm1pbmF0ZSB0aGUgcmVxdWVzdCB3aGVuIGl0IG5vdGljZXMgdGhpcyBlcnJvclxuICAgIGlmICh0eXBlb2YgcmVxLm1ldGhvZCAhPT0gXCJzdHJpbmdcIiB8fCAhcmVxLm1ldGhvZCkge1xuICAgICAgcmVzLmVycm9yID0gZXRoRXJyb3JzLnJwYy5pbnZhbGlkUmVxdWVzdCh7XG4gICAgICAgIG1lc3NhZ2U6IGBUaGUgcmVxdWVzdCAnbWV0aG9kJyBtdXN0IGJlIGEgbm9uLWVtcHR5IHN0cmluZy5gLFxuICAgICAgICBkYXRhOiByZXFcbiAgICAgIH0pO1xuICAgIH1cbiAgICBuZXh0KGRvbmUgPT4ge1xuICAgICAgY29uc3Qge1xuICAgICAgICBlcnJvclxuICAgICAgfSA9IHJlcztcbiAgICAgIGlmICghZXJyb3IpIHtcbiAgICAgICAgcmV0dXJuIGRvbmUoKTtcbiAgICAgIH1cbiAgICAgIGxvZy5lcnJvcihgVG9ydXMgLSBSUEMgRXJyb3I6ICR7ZXJyb3IubWVzc2FnZX1gLCBlcnJvcik7XG4gICAgICByZXR1cm4gZG9uZSgpO1xuICAgIH0pO1xuICB9O1xufVxuLyoqXG4gKiBMb2dzIGEgc3RyZWFtIGRpc2Nvbm5lY3Rpb24gZXJyb3IuIEVtaXRzIGFuICdlcnJvcicgaWYgZ2l2ZW4gYW5cbiAqIEV2ZW50RW1pdHRlciB0aGF0IGhhcyBsaXN0ZW5lcnMgZm9yIHRoZSAnZXJyb3InIGV2ZW50LlxuICpcbiAqIEBwYXJhbSBsb2cgLSBUaGUgbG9nZ2luZyBBUEkgdG8gdXNlLlxuICogQHBhcmFtIHJlbW90ZUxhYmVsIC0gVGhlIGxhYmVsIG9mIHRoZSBkaXNjb25uZWN0ZWQgc3RyZWFtLlxuICogQHBhcmFtIGVycm9yIC0gVGhlIGFzc29jaWF0ZWQgZXJyb3IgdG8gbG9nLlxuICogQHBhcmFtIGVtaXR0ZXIgLSBUaGUgbG9nZ2luZyBBUEkgdG8gdXNlLlxuICovXG5mdW5jdGlvbiBsb2dTdHJlYW1EaXNjb25uZWN0V2FybmluZyhyZW1vdGVMYWJlbCwgZXJyb3IsIGVtaXR0ZXIpIHtcbiAgbGV0IHdhcm5pbmdNc2cgPSBgVG9ydXM6IExvc3QgY29ubmVjdGlvbiB0byBcIiR7cmVtb3RlTGFiZWx9XCIuYDtcbiAgaWYgKGVycm9yPy5zdGFjaykge1xuICAgIHdhcm5pbmdNc2cgKz0gYFxcbiR7ZXJyb3Iuc3RhY2t9YDtcbiAgfVxuICBsb2cud2Fybih3YXJuaW5nTXNnKTtcbiAgaWYgKGVtaXR0ZXIgJiYgZW1pdHRlci5saXN0ZW5lckNvdW50KFwiZXJyb3JcIikgPiAwKSB7XG4gICAgZW1pdHRlci5lbWl0KFwiZXJyb3JcIiwgd2FybmluZ01zZyk7XG4gIH1cbn1cbmNvbnN0IGdldFdpbmRvd0lkID0gKCkgPT4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc2xpY2UoMik7XG5jb25zdCBnZXRUb3J1c1VybCA9IGFzeW5jIGJ1aWxkRW52ID0+IHtcbiAgbGV0IHRvcnVzVXJsO1xuICBsZXQgbG9nTGV2ZWw7XG4gIC8vIGNvbnN0IHZlcnNpb25Vc2VkID0gdmVyc2lvbjtcbiAgLy8gbG9nLmluZm8oXCJzb2xhbmEgZW1iZWQgdmVyc2lvbiB1c2VkOiBcIiwgdmVyc2lvblVzZWQpO1xuICBzd2l0Y2ggKGJ1aWxkRW52KSB7XG4gICAgY2FzZSBcInRlc3RpbmdcIjpcbiAgICAgIHRvcnVzVXJsID0gXCJodHRwczovL3NvbGFuYS10ZXN0aW5nLnRvci51c1wiO1xuICAgICAgbG9nTGV2ZWwgPSBcImRlYnVnXCI7XG4gICAgICBicmVhaztcbiAgICBjYXNlIFwiZGV2ZWxvcG1lbnRcIjpcbiAgICAgIHRvcnVzVXJsID0gXCJodHRwOi8vbG9jYWxob3N0OjgwODBcIjtcbiAgICAgIGxvZ0xldmVsID0gXCJkZWJ1Z1wiO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRvcnVzVXJsID0gYGh0dHBzOi8vc29sYW5hLnRvci51c2A7XG4gICAgICBsb2dMZXZlbCA9IFwiZXJyb3JcIjtcbiAgICAgIGJyZWFrO1xuICB9XG4gIHJldHVybiB7XG4gICAgdG9ydXNVcmwsXG4gICAgbG9nTGV2ZWxcbiAgfTtcbn07XG5jb25zdCBnZXRVc2VyTGFuZ3VhZ2UgPSAoKSA9PiB7XG4gIGxldCB1c2VyTGFuZ3VhZ2UgPSB3aW5kb3cubmF2aWdhdG9yLmxhbmd1YWdlIHx8IFwiZW4tVVNcIjtcbiAgY29uc3QgdXNlckxhbmd1YWdlcyA9IHVzZXJMYW5ndWFnZS5zcGxpdChcIi1cIik7XG4gIHVzZXJMYW5ndWFnZSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChjb25maWd1cmF0aW9uLnRyYW5zbGF0aW9ucywgdXNlckxhbmd1YWdlc1swXSkgPyB1c2VyTGFuZ3VhZ2VzWzBdIDogXCJlblwiO1xuICByZXR1cm4gdXNlckxhbmd1YWdlO1xufTtcbmNvbnN0IEZFQVRVUkVTX1BST1ZJREVSX0NIQU5HRV9XSU5ET1cgPSB7XG4gIGhlaWdodDogNjYwLFxuICB3aWR0aDogMzc1XG59O1xuY29uc3QgRkVBVFVSRVNfREVGQVVMVF9XQUxMRVRfV0lORE9XID0ge1xuICBoZWlnaHQ6IDc0MCxcbiAgd2lkdGg6IDEzMTVcbn07XG5jb25zdCBGRUFUVVJFU19ERUZBVUxUX1BPUFVQX1dJTkRPVyA9IHtcbiAgaGVpZ2h0OiA3MDAsXG4gIHdpZHRoOiAxMjAwXG59O1xuY29uc3QgRkVBVFVSRVNfQ09ORklSTV9XSU5ET1cgPSB7XG4gIGhlaWdodDogNjAwLFxuICB3aWR0aDogNDAwXG59O1xuZnVuY3Rpb24gc3RvcmFnZUF2YWlsYWJsZSh0eXBlKSB7XG4gIGxldCBzdG9yYWdlO1xuICB0cnkge1xuICAgIHN0b3JhZ2UgPSB3aW5kb3dbdHlwZV07XG4gICAgY29uc3QgeCA9IFwiX19zdG9yYWdlX3Rlc3RfX1wiO1xuICAgIHN0b3JhZ2Uuc2V0SXRlbSh4LCB4KTtcbiAgICBzdG9yYWdlLnJlbW92ZUl0ZW0oeCk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZSAmJiAoXG4gICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgIGUuY29kZSA9PT0gMjIgfHxcbiAgICAvLyBGaXJlZm94XG4gICAgZS5jb2RlID09PSAxMDE0IHx8XG4gICAgLy8gdGVzdCBuYW1lIGZpZWxkIHRvbywgYmVjYXVzZSBjb2RlIG1pZ2h0IG5vdCBiZSBwcmVzZW50XG4gICAgLy8gZXZlcnl0aGluZyBleGNlcHQgRmlyZWZveFxuICAgIGUubmFtZSA9PT0gXCJRdW90YUV4Y2VlZGVkRXJyb3JcIiB8fFxuICAgIC8vIEZpcmVmb3hcbiAgICBlLm5hbWUgPT09IFwiTlNfRVJST1JfRE9NX1FVT1RBX1JFQUNIRURcIikgJiZcbiAgICAvLyBhY2tub3dsZWRnZSBRdW90YUV4Y2VlZGVkRXJyb3Igb25seSBpZiB0aGVyZSdzIHNvbWV0aGluZyBhbHJlYWR5IHN0b3JlZFxuICAgIHN0b3JhZ2UgJiYgc3RvcmFnZS5sZW5ndGggIT09IDA7XG4gIH1cbn1cbi8qKlxuICogcG9wdXAgaGFuZGxlciB1dGlsc1xuICovXG5mdW5jdGlvbiBnZXRQb3B1cEZlYXR1cmVzKF9yZWYpIHtcbiAgbGV0IHtcbiAgICB3aWR0aDogdyxcbiAgICBoZWlnaHQ6IGhcbiAgfSA9IF9yZWY7XG4gIC8vIEZpeGVzIGR1YWwtc2NyZWVuIHBvc2l0aW9uICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNb3N0IGJyb3dzZXJzICAgICAgRmlyZWZveFxuICBjb25zdCBkdWFsU2NyZWVuTGVmdCA9IHdpbmRvdy5zY3JlZW5MZWZ0ICE9PSB1bmRlZmluZWQgPyB3aW5kb3cuc2NyZWVuTGVmdCA6IHdpbmRvdy5zY3JlZW5YO1xuICBjb25zdCBkdWFsU2NyZWVuVG9wID0gd2luZG93LnNjcmVlblRvcCAhPT0gdW5kZWZpbmVkID8gd2luZG93LnNjcmVlblRvcCA6IHdpbmRvdy5zY3JlZW5ZO1xuICBjb25zdCB3aWR0aCA9IHdpbmRvdy5pbm5lcldpZHRoID8gd2luZG93LmlubmVyV2lkdGggOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggPyBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50V2lkdGggOiB3aW5kb3cuc2NyZWVuLndpZHRoO1xuICBjb25zdCBoZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQgPyB3aW5kb3cuaW5uZXJIZWlnaHQgOiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuY2xpZW50SGVpZ2h0ID8gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCA6IHdpbmRvdy5zY3JlZW4uaGVpZ2h0O1xuICBjb25zdCBzeXN0ZW1ab29tID0gMTsgLy8gTm8gcmVsaWFibGUgZXN0aW1hdGVcbiAgY29uc3QgbGVmdCA9IE1hdGguYWJzKCh3aWR0aCAtIHcpIC8gMiAvIHN5c3RlbVpvb20gKyBkdWFsU2NyZWVuTGVmdCk7XG4gIGNvbnN0IHRvcCA9IE1hdGguYWJzKChoZWlnaHQgLSBoKSAvIDIgLyBzeXN0ZW1ab29tICsgZHVhbFNjcmVlblRvcCk7XG4gIGNvbnN0IGZlYXR1cmVzID0gYHRpdGxlYmFyPTAsdG9vbGJhcj0wLHN0YXR1cz0wLGxvY2F0aW9uPTAsbWVudWJhcj0wLGhlaWdodD0ke2ggLyBzeXN0ZW1ab29tfSx3aWR0aD0ke3cgLyBzeXN0ZW1ab29tfSx0b3A9JHt0b3B9LGxlZnQ9JHtsZWZ0fWA7XG4gIHJldHVybiBmZWF0dXJlcztcbn1cblxuY2xhc3MgQmFzZVByb3ZpZGVyIGV4dGVuZHMgU2FmZUV2ZW50RW1pdHRlciB7XG4gIC8qKlxuICAgKiBJbmRpY2F0aW5nIHRoYXQgdGhpcyBwcm92aWRlciBpcyBhIFRvcnVzIHByb3ZpZGVyLlxuICAgKi9cblxuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyZWFtLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIG1heEV2ZW50TGlzdGVuZXJzID0gMTAwLFxuICAgICAganNvblJwY1N0cmVhbU5hbWUgPSBcInByb3ZpZGVyXCJcbiAgICB9ID0gX3JlZjtcbiAgICBzdXBlcigpO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImlzVG9ydXNcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfcnBjRW5naW5lXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwianNvblJwY0Nvbm5lY3Rpb25FdmVudHNcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJfc3RhdGVcIiwgdm9pZCAwKTtcbiAgICBpZiAoIWR1cGxleChjb25uZWN0aW9uU3RyZWFtKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2VzLmVycm9ycy5pbnZhbGlkRHVwbGV4U3RyZWFtKCkpO1xuICAgIH1cbiAgICB0aGlzLmlzVG9ydXMgPSB0cnVlO1xuICAgIHRoaXMuc2V0TWF4TGlzdGVuZXJzKG1heEV2ZW50TGlzdGVuZXJzKTtcbiAgICB0aGlzLl9oYW5kbGVDb25uZWN0ID0gdGhpcy5faGFuZGxlQ29ubmVjdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QgPSB0aGlzLl9oYW5kbGVEaXNjb25uZWN0LmJpbmQodGhpcyk7XG4gICAgdGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdCA9IHRoaXMuX2hhbmRsZVN0cmVhbURpc2Nvbm5lY3QuYmluZCh0aGlzKTtcbiAgICB0aGlzLl9ycGNSZXF1ZXN0ID0gdGhpcy5fcnBjUmVxdWVzdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2luaXRpYWxpemVTdGF0ZSA9IHRoaXMuX2luaXRpYWxpemVTdGF0ZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMucmVxdWVzdCA9IHRoaXMucmVxdWVzdC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2VuZEFzeW5jID0gdGhpcy5zZW5kQXN5bmMuYmluZCh0aGlzKTtcbiAgICAvLyB0aGlzLmVuYWJsZSA9IHRoaXMuZW5hYmxlLmJpbmQodGhpcyk7XG4gICAgLy8gc2V0dXAgY29ubmVjdGlvblN0cmVhbSBtdWx0aXBsZXhpbmdcbiAgICBjb25zdCBtdXggPSBuZXcgT2JqZWN0TXVsdGlwbGV4KCk7XG4gICAgcHVtcChjb25uZWN0aW9uU3RyZWFtLCBtdXgsIGNvbm5lY3Rpb25TdHJlYW0sIHRoaXMuX2hhbmRsZVN0cmVhbURpc2Nvbm5lY3QuYmluZCh0aGlzLCBcIlRvcnVzXCIpKTtcbiAgICAvLyBpZ25vcmUgcGhpc2hpbmcgd2FybmluZyBtZXNzYWdlIChoYW5kbGVkIGVsc2V3aGVyZSlcbiAgICBtdXguaWdub3JlU3RyZWFtKFwicGhpc2hpbmdcIik7XG4gICAgLy8gc2V0dXAgb3duIGV2ZW50IGxpc3RlbmVyc1xuICAgIC8vIGNvbm5lY3QgdG8gYXN5bmMgcHJvdmlkZXJcbiAgICBjb25zdCBqc29uUnBjQ29ubmVjdGlvbiA9IGNyZWF0ZVN0cmVhbU1pZGRsZXdhcmUoKTtcbiAgICBwdW1wKGpzb25ScGNDb25uZWN0aW9uLnN0cmVhbSwgbXV4LmNyZWF0ZVN0cmVhbShqc29uUnBjU3RyZWFtTmFtZSksIGpzb25ScGNDb25uZWN0aW9uLnN0cmVhbSwgdGhpcy5faGFuZGxlU3RyZWFtRGlzY29ubmVjdC5iaW5kKHRoaXMsIFwiVG9ydXMgUnBjUHJvdmlkZXJcIikpO1xuICAgIC8vIGhhbmRsZSBSUEMgcmVxdWVzdHMgdmlhIGRhcHAtc2lkZSBycGMgZW5naW5lXG4gICAgY29uc3QgcnBjRW5naW5lID0gbmV3IEpSUENFbmdpbmUoKTtcbiAgICBycGNFbmdpbmUucHVzaChjcmVhdGVJZFJlbWFwTWlkZGxld2FyZSgpKTtcbiAgICBycGNFbmdpbmUucHVzaChjcmVhdGVFcnJvck1pZGRsZXdhcmUoKSk7XG4gICAgcnBjRW5naW5lLnB1c2goY3JlYXRlTG9nZ2VyTWlkZGxld2FyZSh7XG4gICAgICBvcmlnaW46IGxvY2F0aW9uLm9yaWdpblxuICAgIH0pKTtcbiAgICBycGNFbmdpbmUucHVzaChqc29uUnBjQ29ubmVjdGlvbi5taWRkbGV3YXJlKTtcbiAgICB0aGlzLl9ycGNFbmdpbmUgPSBycGNFbmdpbmU7XG4gICAgdGhpcy5qc29uUnBjQ29ubmVjdGlvbkV2ZW50cyA9IGpzb25ScGNDb25uZWN0aW9uLmV2ZW50cztcbiAgfVxuICAvKipcbiAgICogU3VibWl0cyBhbiBSUEMgcmVxdWVzdCBmb3IgdGhlIGdpdmVuIG1ldGhvZCwgd2l0aCB0aGUgZ2l2ZW4gcGFyYW1zLlxuICAgKiBSZXNvbHZlcyB3aXRoIHRoZSByZXN1bHQgb2YgdGhlIG1ldGhvZCBjYWxsLCBvciByZWplY3RzIG9uIGVycm9yLlxuICAgKi9cbiAgYXN5bmMgcmVxdWVzdChhcmdzKSB7XG4gICAgaWYgKCFhcmdzIHx8IHR5cGVvZiBhcmdzICE9PSBcIm9iamVjdFwiIHx8IEFycmF5LmlzQXJyYXkoYXJncykpIHtcbiAgICAgIHRocm93IGV0aEVycm9ycy5ycGMuaW52YWxpZFJlcXVlc3Qoe1xuICAgICAgICBtZXNzYWdlOiBtZXNzYWdlcy5lcnJvcnMuaW52YWxpZFJlcXVlc3RBcmdzKCksXG4gICAgICAgIGRhdGE6IGFyZ3NcbiAgICAgIH0pO1xuICAgIH1cbiAgICBjb25zdCB7XG4gICAgICBtZXRob2QsXG4gICAgICBwYXJhbXNcbiAgICB9ID0gYXJncztcbiAgICBpZiAodHlwZW9mIG1ldGhvZCAhPT0gXCJzdHJpbmdcIiB8fCBtZXRob2QubGVuZ3RoID09PSAwKSB7XG4gICAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRSZXF1ZXN0KHtcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZXMuZXJyb3JzLmludmFsaWRSZXF1ZXN0TWV0aG9kKCksXG4gICAgICAgIGRhdGE6IGFyZ3NcbiAgICAgIH0pO1xuICAgIH1cbiAgICBpZiAocGFyYW1zICE9PSB1bmRlZmluZWQgJiYgIUFycmF5LmlzQXJyYXkocGFyYW1zKSAmJiAodHlwZW9mIHBhcmFtcyAhPT0gXCJvYmplY3RcIiB8fCBwYXJhbXMgPT09IG51bGwpKSB7XG4gICAgICB0aHJvdyBldGhFcnJvcnMucnBjLmludmFsaWRSZXF1ZXN0KHtcbiAgICAgICAgbWVzc2FnZTogbWVzc2FnZXMuZXJyb3JzLmludmFsaWRSZXF1ZXN0UGFyYW1zKCksXG4gICAgICAgIGRhdGE6IGFyZ3NcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fcnBjUmVxdWVzdCh7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcGFyYW1zXG4gICAgICB9LCBnZXRScGNQcm9taXNlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0KSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIFN1Ym1pdHMgYW4gUlBDIHJlcXVlc3QgcGVyIHRoZSBnaXZlbiBKU09OLVJQQyByZXF1ZXN0IG9iamVjdC5cbiAgICovXG4gIHNlbmQocGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICB0aGlzLl9ycGNSZXF1ZXN0KHBheWxvYWQsIGNhbGxiYWNrKTtcbiAgfVxuICAvKipcbiAgICogU3VibWl0cyBhbiBSUEMgcmVxdWVzdCBwZXIgdGhlIGdpdmVuIEpTT04tUlBDIHJlcXVlc3Qgb2JqZWN0LlxuICAgKi9cbiAgc2VuZEFzeW5jKHBheWxvYWQpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgdGhpcy5fcnBjUmVxdWVzdChwYXlsb2FkLCBnZXRScGNQcm9taXNlQ2FsbGJhY2socmVzb2x2ZSwgcmVqZWN0KSk7XG4gICAgfSk7XG4gIH1cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgbG9zdCB0byBjcml0aWNhbCBzdHJlYW1zLlxuICAgKlxuICAgKiBlbWl0cyBUb3J1c0lucGFnZVByb3ZpZGVyI2Rpc2Nvbm5lY3RcbiAgICovXG4gIF9oYW5kbGVTdHJlYW1EaXNjb25uZWN0KHN0cmVhbU5hbWUsIGVycm9yKSB7XG4gICAgbG9nU3RyZWFtRGlzY29ubmVjdFdhcm5pbmcoc3RyZWFtTmFtZSwgZXJyb3IsIHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QoZmFsc2UsIGVycm9yID8gZXJyb3IubWVzc2FnZSA6IHVuZGVmaW5lZCk7XG4gIH1cbn1cblxuY29uc3QgaGFuZGxlRXZlbnQgPSBmdW5jdGlvbiAoaGFuZGxlLCBldmVudE5hbWUsIGhhbmRsZXIpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGhhbmRsZXJBcmdzID0gbmV3IEFycmF5KF9sZW4gPiAzID8gX2xlbiAtIDMgOiAwKSwgX2tleSA9IDM7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICBoYW5kbGVyQXJnc1tfa2V5IC0gM10gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cbiAgY29uc3QgaGFuZGxlcldyYXBwZXIgPSAoKSA9PiB7XG4gICAgaGFuZGxlciguLi5oYW5kbGVyQXJncyk7XG4gICAgaGFuZGxlLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBoYW5kbGVyV3JhcHBlcik7XG4gIH07XG4gIGhhbmRsZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgaGFuZGxlcldyYXBwZXIpO1xufTtcbmFzeW5jIGZ1bmN0aW9uIGRvY3VtZW50UmVhZHkoKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBpZiAoZG9jdW1lbnQucmVhZHlTdGF0ZSAhPT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgIHJlc29sdmUoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaGFuZGxlRXZlbnQoZG9jdW1lbnQsIFwiRE9NQ29udGVudExvYWRlZFwiLCByZXNvbHZlKTtcbiAgICB9XG4gIH0pO1xufVxuY29uc3QgaHRtbFRvRWxlbWVudCA9IGh0bWwgPT4ge1xuICBjb25zdCB0ZW1wbGF0ZSA9IHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG4gIGNvbnN0IHRyaW1tZWRIdG1sID0gaHRtbC50cmltKCk7IC8vIE5ldmVyIHJldHVybiBhIHRleHQgbm9kZSBvZiB3aGl0ZXNwYWNlIGFzIHRoZSByZXN1bHRcbiAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdHJpbW1lZEh0bWw7XG4gIHJldHVybiB0ZW1wbGF0ZS5jb250ZW50LmZpcnN0Q2hpbGQ7XG59O1xuZnVuY3Rpb24gaXNMZWdhY3lUcmFuc2FjdGlvbkluc3RhbmNlKHRyYW5zYWN0aW9uKSB7XG4gIHJldHVybiB0cmFuc2FjdGlvbi52ZXJzaW9uID09PSB1bmRlZmluZWQ7XG59XG5cbmNsYXNzIFBvcHVwSGFuZGxlciBleHRlbmRzIFNhZmVFdmVudEVtaXR0ZXIge1xuICBjb25zdHJ1Y3RvcihfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIHVybCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGZlYXR1cmVzXG4gICAgfSA9IF9yZWY7XG4gICAgc3VwZXIoKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ1cmxcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0YXJnZXRcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJmZWF0dXJlc1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIndpbmRvd1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIndpbmRvd1RpbWVyXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaUNsb3NlZFdpbmRvd1wiLCB2b2lkIDApO1xuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMudGFyZ2V0ID0gdGFyZ2V0IHx8IFwiX2JsYW5rXCI7XG4gICAgdGhpcy5mZWF0dXJlcyA9IGZlYXR1cmVzIHx8IGdldFBvcHVwRmVhdHVyZXMoRkVBVFVSRVNfREVGQVVMVF9QT1BVUF9XSU5ET1cpO1xuICAgIHRoaXMud2luZG93ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMud2luZG93VGltZXIgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5pQ2xvc2VkV2luZG93ID0gZmFsc2U7XG4gICAgdGhpcy5fc2V0dXBUaW1lcigpO1xuICB9XG4gIF9zZXR1cFRpbWVyKCkge1xuICAgIHRoaXMud2luZG93VGltZXIgPSBOdW1iZXIoc2V0SW50ZXJ2YWwoKCkgPT4ge1xuICAgICAgaWYgKHRoaXMud2luZG93ICYmIHRoaXMud2luZG93LmNsb3NlZCkge1xuICAgICAgICBjbGVhckludGVydmFsKHRoaXMud2luZG93VGltZXIpO1xuICAgICAgICBpZiAoIXRoaXMuaUNsb3NlZFdpbmRvdykge1xuICAgICAgICAgIHRoaXMuZW1pdChcImNsb3NlXCIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaUNsb3NlZFdpbmRvdyA9IGZhbHNlO1xuICAgICAgICB0aGlzLndpbmRvdyA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLndpbmRvdyA9PT0gdW5kZWZpbmVkKSBjbGVhckludGVydmFsKHRoaXMud2luZG93VGltZXIpO1xuICAgIH0sIDUwMCkpO1xuICB9XG4gIG9wZW4oKSB7XG4gICAgdGhpcy53aW5kb3cgPSB3aW5kb3cub3Blbih0aGlzLnVybC5ocmVmLCB0aGlzLnRhcmdldCwgdGhpcy5mZWF0dXJlcyk7XG4gICAgaWYgKHRoaXMud2luZG93Py5mb2N1cykgdGhpcy53aW5kb3cuZm9jdXMoKTtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH1cbiAgY2xvc2UoKSB7XG4gICAgdGhpcy5pQ2xvc2VkV2luZG93ID0gdHJ1ZTtcbiAgICBpZiAodGhpcy53aW5kb3cpIHRoaXMud2luZG93LmNsb3NlKCk7XG4gIH1cbiAgcmVkaXJlY3QobG9jYXRpb25SZXBsYWNlT25SZWRpcmVjdCkge1xuICAgIGlmIChsb2NhdGlvblJlcGxhY2VPblJlZGlyZWN0KSB7XG4gICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZSh0aGlzLnVybC5ocmVmKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSB0aGlzLnVybC5ocmVmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBvd25LZXlzJDIob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkJDIodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMkMihPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzJDIoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuY2xhc3MgVG9ydXNDb21tdW5pY2F0aW9uUHJvdmlkZXIgZXh0ZW5kcyBCYXNlUHJvdmlkZXIge1xuICBjb25zdHJ1Y3Rvcihjb25uZWN0aW9uU3RyZWFtLCBfcmVmKSB7XG4gICAgbGV0IHtcbiAgICAgIG1heEV2ZW50TGlzdGVuZXJzID0gMTAwLFxuICAgICAganNvblJwY1N0cmVhbU5hbWUgPSBcInByb3ZpZGVyXCJcbiAgICB9ID0gX3JlZjtcbiAgICBzdXBlcihjb25uZWN0aW9uU3RyZWFtLCB7XG4gICAgICBtYXhFdmVudExpc3RlbmVycyxcbiAgICAgIGpzb25ScGNTdHJlYW1OYW1lXG4gICAgfSk7XG4gICAgLy8gcHJpdmF0ZSBzdGF0ZVxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImVtYmVkVHJhbnNsYXRpb25zXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidG9ydXNVcmxcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJkYXBwU3RvcmFnZUtleVwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcIndpbmRvd1JlZnNcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0cnlXaW5kb3dIYW5kbGVcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b3J1c0FsZXJ0Q29udGFpbmVyXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidG9ydXNJZnJhbWVcIiwgdm9pZCAwKTtcbiAgICB0aGlzLl9zdGF0ZSA9IF9vYmplY3RTcHJlYWQkMih7fSwgVG9ydXNDb21tdW5pY2F0aW9uUHJvdmlkZXIuX2RlZmF1bHRTdGF0ZSk7XG4gICAgLy8gcHVibGljIHN0YXRlXG4gICAgdGhpcy50b3J1c1VybCA9IFwiXCI7XG4gICAgdGhpcy5kYXBwU3RvcmFnZUtleSA9IFwiXCI7XG4gICAgY29uc3QgbGFuZ3VhZ2VUcmFuc2xhdGlvbnMgPSBjb25maWd1cmF0aW9uLnRyYW5zbGF0aW9uc1tnZXRVc2VyTGFuZ3VhZ2UoKV07XG4gICAgdGhpcy5lbWJlZFRyYW5zbGF0aW9ucyA9IGxhbmd1YWdlVHJhbnNsYXRpb25zLmVtYmVkO1xuICAgIHRoaXMud2luZG93UmVmcyA9IHt9O1xuICAgIC8vIHNldHVwIG93biBldmVudCBsaXN0ZW5lcnNcbiAgICAvLyBFSVAtMTE5MyBjb25uZWN0XG4gICAgdGhpcy5vbihcImNvbm5lY3RcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIGNvbnN0IG5vdGlmaWNhdGlvbkhhbmRsZXIgPSBwYXlsb2FkID0+IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgbWV0aG9kLFxuICAgICAgICBwYXJhbXNcbiAgICAgIH0gPSBwYXlsb2FkO1xuICAgICAgaWYgKG1ldGhvZCA9PT0gQ09NTVVOSUNBVElPTl9OT1RJRklDQVRJT05TLklGUkFNRV9TVEFUVVMpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIGlzRnVsbFNjcmVlbixcbiAgICAgICAgICByaWRcbiAgICAgICAgfSA9IHBhcmFtcztcbiAgICAgICAgdGhpcy5fZGlzcGxheUlmcmFtZSh7XG4gICAgICAgICAgaXNGdWxsOiBpc0Z1bGxTY3JlZW4sXG4gICAgICAgICAgcmlkOiByaWRcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gQ09NTVVOSUNBVElPTl9OT1RJRklDQVRJT05TLkNSRUFURV9XSU5ET1cpIHtcbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHdpbmRvd0lkLFxuICAgICAgICAgIHVybFxuICAgICAgICB9ID0gcGFyYW1zO1xuICAgICAgICB0aGlzLl9jcmVhdGVQb3B1cEJsb2NrQWxlcnQod2luZG93SWQsIHVybCk7XG4gICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gQ09NTVVOSUNBVElPTl9OT1RJRklDQVRJT05TLkNMT1NFX1dJTkRPVykge1xuICAgICAgICB0aGlzLl9oYW5kbGVDbG9zZVdpbmRvdyhwYXJhbXMpO1xuICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09IENPTU1VTklDQVRJT05fTk9USUZJQ0FUSU9OUy5VU0VSX0xPR0dFRF9JTikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgY3VycmVudExvZ2luUHJvdmlkZXJcbiAgICAgICAgfSA9IHBhcmFtcztcbiAgICAgICAgdGhpcy5fc3RhdGUuaXNMb2dnZWRJbiA9IHRydWU7XG4gICAgICAgIHRoaXMuX3N0YXRlLmN1cnJlbnRMb2dpblByb3ZpZGVyID0gY3VycmVudExvZ2luUHJvdmlkZXI7XG4gICAgICB9IGVsc2UgaWYgKG1ldGhvZCA9PT0gQ09NTVVOSUNBVElPTl9OT1RJRklDQVRJT05TLlVTRVJfTE9HR0VEX09VVCkge1xuICAgICAgICB0aGlzLl9zdGF0ZS5pc0xvZ2dlZEluID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3N0YXRlLmN1cnJlbnRMb2dpblByb3ZpZGVyID0gbnVsbDtcbiAgICAgICAgdGhpcy5fZGlzcGxheUlmcmFtZSgpO1xuICAgICAgfVxuICAgIH07XG4gICAgdGhpcy5qc29uUnBjQ29ubmVjdGlvbkV2ZW50cy5vbihcIm5vdGlmaWNhdGlvblwiLCBub3RpZmljYXRpb25IYW5kbGVyKTtcbiAgfVxuICBnZXQgaXNMb2dnZWRJbigpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGUuaXNMb2dnZWRJbjtcbiAgfVxuICBnZXQgaXNJRnJhbWVGdWxsU2NyZWVuKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZS5pc0lGcmFtZUZ1bGxTY3JlZW47XG4gIH1cbiAgLyoqXG4gICAqIFJldHVybnMgd2hldGhlciB0aGUgaW5QYWdlIHByb3ZpZGVyIGlzIGNvbm5lY3RlZCB0byBUb3J1cy5cbiAgICovXG4gIGlzQ29ubmVjdGVkKCkge1xuICAgIHJldHVybiB0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZDtcbiAgfVxuICBhc3luYyBfaW5pdGlhbGl6ZVN0YXRlKHBhcmFtcykge1xuICAgIHRyeSB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIHRvcnVzVXJsLFxuICAgICAgICBkYXBwU3RvcmFnZUtleSxcbiAgICAgICAgdG9ydXNBbGVydENvbnRhaW5lcixcbiAgICAgICAgdG9ydXNJZnJhbWVcbiAgICAgIH0gPSBwYXJhbXM7XG4gICAgICB0aGlzLnRvcnVzVXJsID0gdG9ydXNVcmw7XG4gICAgICB0aGlzLmRhcHBTdG9yYWdlS2V5ID0gZGFwcFN0b3JhZ2VLZXk7XG4gICAgICB0aGlzLnRvcnVzQWxlcnRDb250YWluZXIgPSB0b3J1c0FsZXJ0Q29udGFpbmVyO1xuICAgICAgdGhpcy50b3J1c0lmcmFtZSA9IHRvcnVzSWZyYW1lO1xuICAgICAgdGhpcy50b3J1c0lmcmFtZS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XG4gICAgICAgIC8vIG9ubHkgZG8gdGhpcyBpZiBpZnJhbWUgaXMgbm90IGZ1bGwgc2NyZWVuXG4gICAgICAgIGlmICghdGhpcy5fc3RhdGUuaXNJRnJhbWVGdWxsU2NyZWVuKSB0aGlzLl9kaXNwbGF5SWZyYW1lKCk7XG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgY3VycmVudExvZ2luUHJvdmlkZXIsXG4gICAgICAgIGlzTG9nZ2VkSW5cbiAgICAgIH0gPSBhd2FpdCB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICBtZXRob2Q6IENPTU1VTklDQVRJT05fSlJQQ19NRVRIT0RTLkdFVF9QUk9WSURFUl9TVEFURSxcbiAgICAgICAgcGFyYW1zOiBbXVxuICAgICAgfSk7XG4gICAgICAvLyBpbmRpY2F0ZSB0aGF0IHdlJ3ZlIGNvbm5lY3RlZCwgZm9yIEVJUC0xMTkzIGNvbXBsaWFuY2VcbiAgICAgIHRoaXMuX2hhbmRsZUNvbm5lY3QoY3VycmVudExvZ2luUHJvdmlkZXIsIGlzTG9nZ2VkSW4pO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBsb2cuZXJyb3IoXCJUb3J1czogRmFpbGVkIHRvIGdldCBpbml0aWFsIHN0YXRlLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLlwiLCBlcnJvcik7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIGxvZy5pbmZvKFwiaW5pdGlhbGl6ZWQgY29tbXVuaWNhdGlvbiBzdGF0ZVwiKTtcbiAgICAgIHRoaXMuX3N0YXRlLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZW1pdChcIl9pbml0aWFsaXplZFwiKTtcbiAgICB9XG4gIH1cbiAgX2hhbmRsZVdpbmRvdyh3aW5kb3dJZCkge1xuICAgIGxldCB7XG4gICAgICB1cmwsXG4gICAgICB0YXJnZXQsXG4gICAgICBmZWF0dXJlc1xuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuICAgIGNvbnN0IGZpbmFsVXJsID0gbmV3IFVSTCh1cmwgfHwgYCR7dGhpcy50b3J1c1VybH0vcmVkaXJlY3Q/d2luZG93SWQ9JHt3aW5kb3dJZH1gKTtcbiAgICBpZiAodGhpcy5kYXBwU3RvcmFnZUtleSkge1xuICAgICAgLy8gSWYgbXVsdGlwbGUgaW5zdGFuY2VzLCBpdCByZXR1cm5zIHRoZSBmaXJzdCBvbmVcbiAgICAgIGlmIChmaW5hbFVybC5oYXNoKSBmaW5hbFVybC5oYXNoICs9IGAmZGFwcFN0b3JhZ2VLZXk9JHt0aGlzLmRhcHBTdG9yYWdlS2V5fWA7ZWxzZSBmaW5hbFVybC5oYXNoID0gYCNkYXBwU3RvcmFnZUtleT0ke3RoaXMuZGFwcFN0b3JhZ2VLZXl9YDtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlZFdpbmRvdyA9IG5ldyBQb3B1cEhhbmRsZXIoe1xuICAgICAgdXJsOiBmaW5hbFVybCxcbiAgICAgIHRhcmdldCxcbiAgICAgIGZlYXR1cmVzXG4gICAgfSk7XG4gICAgaGFuZGxlZFdpbmRvdy5vcGVuKCk7XG4gICAgaWYgKCFoYW5kbGVkV2luZG93LndpbmRvdykge1xuICAgICAgdGhpcy5fY3JlYXRlUG9wdXBCbG9ja0FsZXJ0KHdpbmRvd0lkLCBmaW5hbFVybC5ocmVmKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gQWRkIHRvIGNvbGxlY3Rpb24gb25seSBpZiB3aW5kb3cgaXMgb3BlbmVkXG4gICAgdGhpcy53aW5kb3dSZWZzW3dpbmRvd0lkXSA9IGhhbmRsZWRXaW5kb3c7XG4gICAgLy8gV2UgdGVsbCB0aGUgaWZyYW1lIHRoYXQgdGhlIHdpbmRvdyBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgb3BlbmVkXG4gICAgdGhpcy5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogQ09NTVVOSUNBVElPTl9KUlBDX01FVEhPRFMuT1BFTkVEX1dJTkRPVyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICB3aW5kb3dJZFxuICAgICAgfVxuICAgIH0pO1xuICAgIGhhbmRsZWRXaW5kb3cub25jZShcImNsb3NlXCIsICgpID0+IHtcbiAgICAgIC8vIHVzZXIgY2xvc2VkIHRoZSB3aW5kb3dcbiAgICAgIGRlbGV0ZSB0aGlzLndpbmRvd1JlZnNbd2luZG93SWRdO1xuICAgICAgdGhpcy5yZXF1ZXN0KHtcbiAgICAgICAgbWV0aG9kOiBDT01NVU5JQ0FUSU9OX0pSUENfTUVUSE9EUy5DTE9TRURfV0lORE9XLFxuICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICB3aW5kb3dJZFxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuICBfZGlzcGxheUlmcmFtZSgpIHtcbiAgICBsZXQge1xuICAgICAgaXNGdWxsID0gZmFsc2UsXG4gICAgICByaWQgPSBcIlwiXG4gICAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgY29uc3Qgc3R5bGUgPSB7fTtcbiAgICAvLyBzZXQgcGhhc2VcbiAgICBpZiAoIWlzRnVsbCkge1xuICAgICAgc3R5bGUuZGlzcGxheSA9IHRoaXMuX3N0YXRlLnRvcnVzV2lkZ2V0VmlzaWJpbGl0eSA/IFwiYmxvY2tcIiA6IFwibm9uZVwiO1xuICAgICAgc3R5bGUuaGVpZ2h0ID0gXCI3MHB4XCI7XG4gICAgICBzdHlsZS53aWR0aCA9IFwiNzBweFwiO1xuICAgICAgc3dpdGNoICh0aGlzLl9zdGF0ZS5idXR0b25Qb3NpdGlvbikge1xuICAgICAgICBjYXNlIEJVVFRPTl9QT1NJVElPTi5UT1BfTEVGVDpcbiAgICAgICAgICBzdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICAgIHN0eWxlLmxlZnQgPSBcIjBweFwiO1xuICAgICAgICAgIHN0eWxlLnJpZ2h0ID0gXCJhdXRvXCI7XG4gICAgICAgICAgc3R5bGUuYm90dG9tID0gXCJhdXRvXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQlVUVE9OX1BPU0lUSU9OLlRPUF9SSUdIVDpcbiAgICAgICAgICBzdHlsZS50b3AgPSBcIjBweFwiO1xuICAgICAgICAgIHN0eWxlLnJpZ2h0ID0gXCIwcHhcIjtcbiAgICAgICAgICBzdHlsZS5sZWZ0ID0gXCJhdXRvXCI7XG4gICAgICAgICAgc3R5bGUuYm90dG9tID0gXCJhdXRvXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQlVUVE9OX1BPU0lUSU9OLkJPVFRPTV9SSUdIVDpcbiAgICAgICAgICBzdHlsZS5ib3R0b20gPSBcIjBweFwiO1xuICAgICAgICAgIHN0eWxlLnJpZ2h0ID0gXCIwcHhcIjtcbiAgICAgICAgICBzdHlsZS50b3AgPSBcImF1dG9cIjtcbiAgICAgICAgICBzdHlsZS5sZWZ0ID0gXCJhdXRvXCI7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICAgIGNhc2UgQlVUVE9OX1BPU0lUSU9OLkJPVFRPTV9MRUZUOlxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHN0eWxlLmJvdHRvbSA9IFwiMHB4XCI7XG4gICAgICAgICAgc3R5bGUubGVmdCA9IFwiMHB4XCI7XG4gICAgICAgICAgc3R5bGUudG9wID0gXCJhdXRvXCI7XG4gICAgICAgICAgc3R5bGUucmlnaHQgPSBcImF1dG9cIjtcbiAgICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGUuZGlzcGxheSA9IFwiYmxvY2tcIjtcbiAgICAgIHN0eWxlLndpZHRoID0gXCIxMDAlXCI7XG4gICAgICBzdHlsZS5oZWlnaHQgPSBcIjEwMCVcIjtcbiAgICAgIHN0eWxlLnRvcCA9IFwiMHB4XCI7XG4gICAgICBzdHlsZS5yaWdodCA9IFwiMHB4XCI7XG4gICAgICBzdHlsZS5sZWZ0ID0gXCIwcHhcIjtcbiAgICAgIHN0eWxlLmJvdHRvbSA9IFwiMHB4XCI7XG4gICAgfVxuICAgIE9iamVjdC5hc3NpZ24odGhpcy50b3J1c0lmcmFtZS5zdHlsZSwgc3R5bGUpO1xuICAgIHRoaXMuX3N0YXRlLmlzSUZyYW1lRnVsbFNjcmVlbiA9IGlzRnVsbDtcbiAgICB0aGlzLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBDT01NVU5JQ0FUSU9OX0pSUENfTUVUSE9EUy5JRlJBTUVfU1RBVFVTLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGlzSUZyYW1lRnVsbFNjcmVlbjogaXNGdWxsLFxuICAgICAgICByaWRcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuICBoaWRlVG9ydXNCdXR0b24oKSB7XG4gICAgdGhpcy5fc3RhdGUudG9ydXNXaWRnZXRWaXNpYmlsaXR5ID0gZmFsc2U7XG4gICAgdGhpcy5fZGlzcGxheUlmcmFtZSgpO1xuICB9XG4gIHNob3dUb3J1c0J1dHRvbigpIHtcbiAgICB0aGlzLl9zdGF0ZS50b3J1c1dpZGdldFZpc2liaWxpdHkgPSB0cnVlO1xuICAgIHRoaXMuX2Rpc3BsYXlJZnJhbWUoKTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJuYWwgUlBDIG1ldGhvZC4gRm9yd2FyZHMgcmVxdWVzdHMgdG8gYmFja2dyb3VuZCB2aWEgdGhlIFJQQyBlbmdpbmUuXG4gICAqIEFsc28gcmVtYXAgaWRzIGluYm91bmQgYW5kIG91dGJvdW5kXG4gICAqL1xuICBfcnBjUmVxdWVzdChwYXlsb2FkLCBjYWxsYmFjaykge1xuICAgIGNvbnN0IGNiID0gY2FsbGJhY2s7XG4gICAgY29uc3QgX3BheWxvYWQgPSBwYXlsb2FkO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShfcGF5bG9hZCkpIHtcbiAgICAgIGlmICghX3BheWxvYWQuanNvbnJwYykge1xuICAgICAgICBfcGF5bG9hZC5qc29ucnBjID0gXCIyLjBcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy50cnlXaW5kb3dIYW5kbGUoX3BheWxvYWQsIGNiKTtcbiAgfVxuICAvKipcbiAgICogV2hlbiB0aGUgcHJvdmlkZXIgYmVjb21lcyBjb25uZWN0ZWQsIHVwZGF0ZXMgaW50ZXJuYWwgc3RhdGUgYW5kIGVtaXRzXG4gICAqIHJlcXVpcmVkIGV2ZW50cy4gSWRlbXBvdGVudC5cbiAgICpcbiAgICogQHBhcmFtIGN1cnJlbnRMb2dpblByb3ZpZGVyIC0gVGhlIGxvZ2luIFByb3ZpZGVyXG4gICAqIGVtaXRzIFRvcnVzSW5wYWdlUHJvdmlkZXIjY29ubmVjdFxuICAgKi9cbiAgX2hhbmRsZUNvbm5lY3QoY3VycmVudExvZ2luUHJvdmlkZXIsIGlzTG9nZ2VkSW4pIHtcbiAgICBpZiAoIXRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkKSB7XG4gICAgICB0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICB0aGlzLmVtaXQoXCJjb25uZWN0XCIsIHtcbiAgICAgICAgY3VycmVudExvZ2luUHJvdmlkZXIsXG4gICAgICAgIGlzTG9nZ2VkSW5cbiAgICAgIH0pO1xuICAgICAgbG9nLmRlYnVnKG1lc3NhZ2VzLmluZm8uY29ubmVjdGVkKGN1cnJlbnRMb2dpblByb3ZpZGVyKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBXaGVuIHRoZSBwcm92aWRlciBiZWNvbWVzIGRpc2Nvbm5lY3RlZCwgdXBkYXRlcyBpbnRlcm5hbCBzdGF0ZSBhbmQgZW1pdHNcbiAgICogcmVxdWlyZWQgZXZlbnRzLiBJZGVtcG90ZW50IHdpdGggcmVzcGVjdCB0byB0aGUgaXNSZWNvdmVyYWJsZSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIEVycm9yIGNvZGVzIHBlciB0aGUgQ2xvc2VFdmVudCBzdGF0dXMgY29kZXMgYXMgcmVxdWlyZWQgYnkgRUlQLTExOTM6XG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2Rlc1xuICAgKlxuICAgKiBAcGFyYW0gaXNSZWNvdmVyYWJsZSAtIFdoZXRoZXIgdGhlIGRpc2Nvbm5lY3Rpb24gaXMgcmVjb3ZlcmFibGUuXG4gICAqIEBwYXJhbSBlcnJvck1lc3NhZ2UgLSBBIGN1c3RvbSBlcnJvciBtZXNzYWdlLlxuICAgKiBlbWl0cyBUb3J1c0lucGFnZVByb3ZpZGVyI2Rpc2Nvbm5lY3RcbiAgICovXG4gIF9oYW5kbGVEaXNjb25uZWN0KGlzUmVjb3ZlcmFibGUsIGVycm9yTWVzc2FnZSkge1xuICAgIGlmICh0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZCB8fCAhdGhpcy5fc3RhdGUuaXNQZXJtYW5lbnRseURpc2Nvbm5lY3RlZCAmJiAhaXNSZWNvdmVyYWJsZSkge1xuICAgICAgdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgIGxldCBlcnJvcjtcbiAgICAgIGlmIChpc1JlY292ZXJhYmxlKSB7XG4gICAgICAgIGVycm9yID0gbmV3IEV0aGVyZXVtUnBjRXJyb3IoMTAxMyxcbiAgICAgICAgLy8gVHJ5IGFnYWluIGxhdGVyXG4gICAgICAgIGVycm9yTWVzc2FnZSB8fCBtZXNzYWdlcy5lcnJvcnMuZGlzY29ubmVjdGVkKCkpO1xuICAgICAgICBsb2cuZGVidWcoZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXRoZXJldW1ScGNFcnJvcigxMDExLFxuICAgICAgICAvLyBJbnRlcm5hbCBlcnJvclxuICAgICAgICBlcnJvck1lc3NhZ2UgfHwgbWVzc2FnZXMuZXJyb3JzLnBlcm1hbmVudGx5RGlzY29ubmVjdGVkKCkpO1xuICAgICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgICAgICB0aGlzLl9zdGF0ZS5jdXJyZW50TG9naW5Qcm92aWRlciA9IG51bGw7XG4gICAgICAgIHRoaXMuX3N0YXRlLmlzTG9nZ2VkSW4gPSBmYWxzZTtcbiAgICAgICAgdGhpcy5fc3RhdGUudG9ydXNXaWRnZXRWaXNpYmlsaXR5ID0gZmFsc2U7XG4gICAgICAgIHRoaXMuX3N0YXRlLmlzSUZyYW1lRnVsbFNjcmVlbiA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zdGF0ZS5pc1Blcm1hbmVudGx5RGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZW1pdChcImRpc2Nvbm5lY3RcIiwgZXJyb3IpO1xuICAgIH1cbiAgfVxuICAvLyBDYWxsZWQgaWYgdGhlIGlmcmFtZSB3YW50cyB0byBjbG9zZSB0aGUgd2luZG93IGNhdXNlIGl0IGlzIGRvbmUgcHJvY2Vzc2luZyB0aGUgcmVxdWVzdFxuICBfaGFuZGxlQ2xvc2VXaW5kb3cocGFyYW1zKSB7XG4gICAgY29uc3Qge1xuICAgICAgd2luZG93SWRcbiAgICB9ID0gcGFyYW1zO1xuICAgIGlmICh0aGlzLndpbmRvd1JlZnNbd2luZG93SWRdKSB7XG4gICAgICB0aGlzLndpbmRvd1JlZnNbd2luZG93SWRdLmNsb3NlKCk7XG4gICAgICBkZWxldGUgdGhpcy53aW5kb3dSZWZzW3dpbmRvd0lkXTtcbiAgICB9XG4gIH1cbiAgYXN5bmMgX2NyZWF0ZVBvcHVwQmxvY2tBbGVydCh3aW5kb3dJZCwgdXJsKSB7XG4gICAgY29uc3QgbG9nb1VybCA9IHRoaXMuZ2V0TG9nb1VybCgpO1xuICAgIGNvbnN0IHRvcnVzQWxlcnQgPSBodG1sVG9FbGVtZW50KCc8ZGl2IGlkPVwidG9ydXNBbGVydFwiIGNsYXNzPVwidG9ydXMtYWxlcnQtLXYyXCI+JyArIGA8ZGl2IGlkPVwidG9ydXNBbGVydF9fbG9nb1wiPjxpbWcgc3JjPVwiJHtsb2dvVXJsfVwiIC8+PC9kaXY+YCArIFwiPGRpdj5cIiArIGA8aDEgaWQ9XCJ0b3J1c0FsZXJ0X190aXRsZVwiPiR7dGhpcy5lbWJlZFRyYW5zbGF0aW9ucy5hY3Rpb25SZXF1aXJlZH08L2gxPmAgKyBgPHAgaWQ9XCJ0b3J1c0FsZXJ0X19kZXNjXCI+JHt0aGlzLmVtYmVkVHJhbnNsYXRpb25zLnBlbmRpbmdBY3Rpb259PC9wPmAgKyBcIjwvZGl2PlwiICsgXCI8L2Rpdj5cIik7XG4gICAgY29uc3Qgc3VjY2Vzc0FsZXJ0ID0gaHRtbFRvRWxlbWVudChgPGRpdj48YSBpZD1cInRvcnVzQWxlcnRfX2J0blwiPiR7dGhpcy5lbWJlZFRyYW5zbGF0aW9ucy5jb250aW51ZX08L2E+PC9kaXY+YCk7XG4gICAgY29uc3QgYnRuQ29udGFpbmVyID0gaHRtbFRvRWxlbWVudCgnPGRpdiBpZD1cInRvcnVzQWxlcnRfX2J0bi1jb250YWluZXJcIj48L2Rpdj4nKTtcbiAgICBidG5Db250YWluZXIuYXBwZW5kQ2hpbGQoc3VjY2Vzc0FsZXJ0KTtcbiAgICB0b3J1c0FsZXJ0LmFwcGVuZENoaWxkKGJ0bkNvbnRhaW5lcik7XG4gICAgY29uc3QgYmluZE9uTG9hZCA9ICgpID0+IHtcbiAgICAgIHN1Y2Nlc3NBbGVydC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgKCkgPT4ge1xuICAgICAgICB0aGlzLl9oYW5kbGVXaW5kb3cod2luZG93SWQsIHtcbiAgICAgICAgICB1cmwsXG4gICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICAgIGZlYXR1cmVzOiBnZXRQb3B1cEZlYXR1cmVzKEZFQVRVUkVTX0NPTkZJUk1fV0lORE9XKVxuICAgICAgICB9KTtcbiAgICAgICAgdG9ydXNBbGVydC5yZW1vdmUoKTtcbiAgICAgICAgaWYgKHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5jaGlsZHJlbi5sZW5ndGggPT09IDApIHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5zdHlsZS5kaXNwbGF5ID0gXCJub25lXCI7XG4gICAgICB9KTtcbiAgICB9O1xuICAgIGNvbnN0IGF0dGFjaE9uTG9hZCA9ICgpID0+IHtcbiAgICAgIHRoaXMudG9ydXNBbGVydENvbnRhaW5lci5hcHBlbmRDaGlsZCh0b3J1c0FsZXJ0KTtcbiAgICB9O1xuICAgIGF3YWl0IGRvY3VtZW50UmVhZHkoKTtcbiAgICBhdHRhY2hPbkxvYWQoKTtcbiAgICBiaW5kT25Mb2FkKCk7XG4gICAgdGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyLnN0eWxlLmRpc3BsYXkgPSBcImJsb2NrXCI7XG4gIH1cbiAgZ2V0TG9nb1VybCgpIHtcbiAgICBjb25zdCBsb2dvVXJsID0gYCR7dGhpcy50b3J1c1VybH0vaW1hZ2VzL3RvcnVzX2ljb24tYmx1ZS5zdmdgO1xuICAgIHJldHVybiBsb2dvVXJsO1xuICB9XG59XG5fZGVmaW5lUHJvcGVydHkoVG9ydXNDb21tdW5pY2F0aW9uUHJvdmlkZXIsIFwiX2RlZmF1bHRTdGF0ZVwiLCB7XG4gIGJ1dHRvblBvc2l0aW9uOiBcImJvdHRvbS1sZWZ0XCIsXG4gIGN1cnJlbnRMb2dpblByb3ZpZGVyOiBudWxsLFxuICBpc0lGcmFtZUZ1bGxTY3JlZW46IGZhbHNlLFxuICBoYXNFbWl0dGVkQ29ubmVjdGlvbjogZmFsc2UsXG4gIHRvcnVzV2lkZ2V0VmlzaWJpbGl0eTogZmFsc2UsXG4gIGluaXRpYWxpemVkOiBmYWxzZSxcbiAgaXNMb2dnZWRJbjogZmFsc2UsXG4gIGlzUGVybWFuZW50bHlEaXNjb25uZWN0ZWQ6IGZhbHNlLFxuICBpc0Nvbm5lY3RlZDogZmFsc2Vcbn0pO1xuXG5mdW5jdGlvbiBvd25LZXlzJDEob2JqZWN0LCBlbnVtZXJhYmxlT25seSkgeyB2YXIga2V5cyA9IE9iamVjdC5rZXlzKG9iamVjdCk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhvYmplY3QpOyBlbnVtZXJhYmxlT25seSAmJiAoc3ltYm9scyA9IHN5bWJvbHMuZmlsdGVyKGZ1bmN0aW9uIChzeW0pIHsgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7IH0pKSwga2V5cy5wdXNoLmFwcGx5KGtleXMsIHN5bWJvbHMpOyB9IHJldHVybiBrZXlzOyB9XG5mdW5jdGlvbiBfb2JqZWN0U3ByZWFkJDEodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMkMShPYmplY3Qoc291cmNlKSwgITApLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBfZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIHNvdXJjZVtrZXldKTsgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoc291cmNlKSkgOiBvd25LZXlzJDEoT2JqZWN0KHNvdXJjZSkpLmZvckVhY2goZnVuY3Rpb24gKGtleSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBrZXksIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTsgfSk7IH0gcmV0dXJuIHRhcmdldDsgfVxuY2xhc3MgVG9ydXNJblBhZ2VQcm92aWRlciBleHRlbmRzIEJhc2VQcm92aWRlciB7XG4gIC8qKlxuICAgKiBUaGUgY2hhaW4gSUQgb2YgdGhlIGN1cnJlbnRseSBjb25uZWN0ZWQgU29sYW5hIGNoYWluLlxuICAgKiBTZWUgW2NoYWluSWQubmV0d29ya117QGxpbmsgaHR0cHM6Ly9jaGFpbmlkLm5ldHdvcmt9IGZvciBtb3JlIGluZm9ybWF0aW9uLlxuICAgKi9cblxuICAvKipcbiAgICogVGhlIHVzZXIncyBjdXJyZW50bHkgc2VsZWN0ZWQgU29sYW5hIGFkZHJlc3MuXG4gICAqIElmIG51bGwsIFRvcnVzIGlzIGVpdGhlciBsb2NrZWQgb3IgdGhlIHVzZXIgaGFzIG5vdCBwZXJtaXR0ZWQgYW55XG4gICAqIGFkZHJlc3NlcyB0byBiZSB2aWV3ZWQuXG4gICAqL1xuXG4gIGNvbnN0cnVjdG9yKGNvbm5lY3Rpb25TdHJlYW0sIF9yZWYpIHtcbiAgICBsZXQge1xuICAgICAgbWF4RXZlbnRMaXN0ZW5lcnMgPSAxMDAsXG4gICAgICBqc29uUnBjU3RyZWFtTmFtZSA9IFwicHJvdmlkZXJcIlxuICAgIH0gPSBfcmVmO1xuICAgIHN1cGVyKGNvbm5lY3Rpb25TdHJlYW0sIHtcbiAgICAgIG1heEV2ZW50TGlzdGVuZXJzLFxuICAgICAganNvblJwY1N0cmVhbU5hbWVcbiAgICB9KTtcbiAgICAvLyBwcml2YXRlIHN0YXRlXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY2hhaW5JZFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInNlbGVjdGVkQWRkcmVzc1wiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRyeVdpbmRvd0hhbmRsZVwiLCB2b2lkIDApO1xuICAgIHRoaXMuX3N0YXRlID0gX29iamVjdFNwcmVhZCQxKHt9LCBUb3J1c0luUGFnZVByb3ZpZGVyLl9kZWZhdWx0U3RhdGUpO1xuICAgIC8vIHB1YmxpYyBzdGF0ZVxuICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzID0gbnVsbDtcbiAgICB0aGlzLmNoYWluSWQgPSBudWxsO1xuICAgIHRoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZCA9IHRoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZCA9IHRoaXMuX2hhbmRsZUNoYWluQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZCA9IHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZC5iaW5kKHRoaXMpO1xuICAgIC8vIHNldHVwIG93biBldmVudCBsaXN0ZW5lcnNcbiAgICAvLyBFSVAtMTE5MyBjb25uZWN0XG4gICAgdGhpcy5vbihcImNvbm5lY3RcIiwgKCkgPT4ge1xuICAgICAgdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIGNvbnN0IGpzb25ScGNOb3RpZmljYXRpb25IYW5kbGVyID0gcGF5bG9hZCA9PiB7XG4gICAgICBjb25zdCB7XG4gICAgICAgIG1ldGhvZCxcbiAgICAgICAgcGFyYW1zXG4gICAgICB9ID0gcGF5bG9hZDtcbiAgICAgIGlmIChtZXRob2QgPT09IFBST1ZJREVSX05PVElGSUNBVElPTlMuQUNDT1VOVFNfQ0hBTkdFRCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQocGFyYW1zKTtcbiAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09PSBQUk9WSURFUl9OT1RJRklDQVRJT05TLlVOTE9DS19TVEFURV9DSEFOR0VEKSB7XG4gICAgICAgIHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZChwYXJhbXMpO1xuICAgICAgfSBlbHNlIGlmIChtZXRob2QgPT09IFBST1ZJREVSX05PVElGSUNBVElPTlMuQ0hBSU5fQ0hBTkdFRCkge1xuICAgICAgICB0aGlzLl9oYW5kbGVDaGFpbkNoYW5nZWQocGFyYW1zKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIC8vIGpzb24gcnBjIG5vdGlmaWNhdGlvbiBsaXN0ZW5lclxuICAgIHRoaXMuanNvblJwY0Nvbm5lY3Rpb25FdmVudHMub24oXCJub3RpZmljYXRpb25cIiwganNvblJwY05vdGlmaWNhdGlvbkhhbmRsZXIpO1xuICB9XG4gIC8qKlxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIGlucGFnZSBwcm92aWRlciBpcyBjb25uZWN0ZWQgdG8gVG9ydXMuXG4gICAqL1xuICBpc0Nvbm5lY3RlZCgpIHtcbiAgICByZXR1cm4gdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQ7XG4gIH1cbiAgLy8gUHJpdmF0ZSBNZXRob2RzXG4gIC8vPSA9PT09PT09PT09PT09PT09PT09XG4gIC8qKlxuICAgKiBDb25zdHJ1Y3RvciBoZWxwZXIuXG4gICAqIFBvcHVsYXRlcyBpbml0aWFsIHN0YXRlIGJ5IGNhbGxpbmcgJ3dhbGxldF9nZXRQcm92aWRlclN0YXRlJyBhbmQgZW1pdHNcbiAgICogbmVjZXNzYXJ5IGV2ZW50cy5cbiAgICovXG4gIGFzeW5jIF9pbml0aWFsaXplU3RhdGUoKSB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHtcbiAgICAgICAgYWNjb3VudHMsXG4gICAgICAgIGNoYWluSWQsXG4gICAgICAgIGlzVW5sb2NrZWRcbiAgICAgIH0gPSBhd2FpdCB0aGlzLnJlcXVlc3Qoe1xuICAgICAgICBtZXRob2Q6IFBST1ZJREVSX0pSUENfTUVUSE9EUy5HRVRfUFJPVklERVJfU1RBVEUsXG4gICAgICAgIHBhcmFtczogW11cbiAgICAgIH0pO1xuICAgICAgLy8gaW5kaWNhdGUgdGhhdCB3ZSd2ZSBjb25uZWN0ZWQsIGZvciBFSVAtMTE5MyBjb21wbGlhbmNlXG4gICAgICB0aGlzLmVtaXQoXCJjb25uZWN0XCIsIHtcbiAgICAgICAgY2hhaW5JZFxuICAgICAgfSk7XG4gICAgICB0aGlzLl9oYW5kbGVDaGFpbkNoYW5nZWQoe1xuICAgICAgICBjaGFpbklkXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZCh7XG4gICAgICAgIGFjY291bnRzLFxuICAgICAgICBpc1VubG9ja2VkXG4gICAgICB9KTtcbiAgICAgIHRoaXMuX2hhbmRsZUFjY291bnRzQ2hhbmdlZChhY2NvdW50cyk7XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGxvZy5lcnJvcihcIlRvcnVzOiBGYWlsZWQgdG8gZ2V0IGluaXRpYWwgc3RhdGUuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsIGVycm9yKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgbG9nLmluZm8oXCJpbml0aWFsaXplZCBwcm92aWRlciBzdGF0ZVwiKTtcbiAgICAgIHRoaXMuX3N0YXRlLmluaXRpYWxpemVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZW1pdChcIl9pbml0aWFsaXplZFwiKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIEludGVybmFsIFJQQyBtZXRob2QuIEZvcndhcmRzIHJlcXVlc3RzIHRvIGJhY2tncm91bmQgdmlhIHRoZSBSUEMgZW5naW5lLlxuICAgKiBBbHNvIHJlbWFwIGlkcyBpbmJvdW5kIGFuZCBvdXRib3VuZFxuICAgKi9cbiAgX3JwY1JlcXVlc3QocGF5bG9hZCwgY2FsbGJhY2spIHtcbiAgICBsZXQgaXNJbnRlcm5hbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDogZmFsc2U7XG4gICAgbGV0IGNiID0gY2FsbGJhY2s7XG4gICAgY29uc3QgX3BheWxvYWQgPSBwYXlsb2FkO1xuICAgIGlmICghQXJyYXkuaXNBcnJheShfcGF5bG9hZCkpIHtcbiAgICAgIGlmICghX3BheWxvYWQuanNvbnJwYykge1xuICAgICAgICBfcGF5bG9hZC5qc29ucnBjID0gXCIyLjBcIjtcbiAgICAgIH1cbiAgICAgIGlmIChfcGF5bG9hZC5tZXRob2QgPT09IFwic29sYW5hX2FjY291bnRzXCIgfHwgX3BheWxvYWQubWV0aG9kID09PSBcInNvbGFuYV9yZXF1ZXN0QWNjb3VudHNcIikge1xuICAgICAgICAvLyBoYW5kbGUgYWNjb3VudHMgY2hhbmdpbmdcbiAgICAgICAgY2IgPSAoZXJyLCByZXMpID0+IHtcbiAgICAgICAgICB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQocmVzLnJlc3VsdCB8fCBbXSwgX3BheWxvYWQubWV0aG9kID09PSBcInNvbGFuYV9hY2NvdW50c1wiLCBpc0ludGVybmFsKTtcbiAgICAgICAgICBjYWxsYmFjayhlcnIsIHJlcyk7XG4gICAgICAgIH07XG4gICAgICB9IGVsc2UgaWYgKF9wYXlsb2FkLm1ldGhvZCA9PT0gXCJ3YWxsZXRfZ2V0UHJvdmlkZXJTdGF0ZVwiKSB7XG4gICAgICAgIHRoaXMuX3JwY0VuZ2luZS5oYW5kbGUocGF5bG9hZCwgY2IpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgfVxuICAgIHRoaXMudHJ5V2luZG93SGFuZGxlKF9wYXlsb2FkLCBjYik7XG4gIH1cbiAgLyoqXG4gICAqIFdoZW4gdGhlIHByb3ZpZGVyIGJlY29tZXMgY29ubmVjdGVkLCB1cGRhdGVzIGludGVybmFsIHN0YXRlIGFuZCBlbWl0c1xuICAgKiByZXF1aXJlZCBldmVudHMuIElkZW1wb3RlbnQuXG4gICAqXG4gICAqIEBwYXJhbSBjaGFpbklkIC0gVGhlIElEIG9mIHRoZSBuZXdseSBjb25uZWN0ZWQgY2hhaW4uXG4gICAqIGVtaXRzIFRvcnVzSW5wYWdlUHJvdmlkZXIjY29ubmVjdFxuICAgKi9cbiAgX2hhbmRsZUNvbm5lY3QoY2hhaW5JZCkge1xuICAgIGlmICghdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQpIHtcbiAgICAgIHRoaXMuX3N0YXRlLmlzQ29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgIHRoaXMuZW1pdChcImNvbm5lY3RcIiwge1xuICAgICAgICBjaGFpbklkXG4gICAgICB9KTtcbiAgICAgIGxvZy5kZWJ1ZyhtZXNzYWdlcy5pbmZvLmNvbm5lY3RlZChjaGFpbklkKSk7XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBXaGVuIHRoZSBwcm92aWRlciBiZWNvbWVzIGRpc2Nvbm5lY3RlZCwgdXBkYXRlcyBpbnRlcm5hbCBzdGF0ZSBhbmQgZW1pdHNcbiAgICogcmVxdWlyZWQgZXZlbnRzLiBJZGVtcG90ZW50IHdpdGggcmVzcGVjdCB0byB0aGUgaXNSZWNvdmVyYWJsZSBwYXJhbWV0ZXIuXG4gICAqXG4gICAqIEVycm9yIGNvZGVzIHBlciB0aGUgQ2xvc2VFdmVudCBzdGF0dXMgY29kZXMgYXMgcmVxdWlyZWQgYnkgRUlQLTExOTM6XG4gICAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9DbG9zZUV2ZW50I1N0YXR1c19jb2Rlc1xuICAgKlxuICAgKiBAcGFyYW0gaXNSZWNvdmVyYWJsZSAtIFdoZXRoZXIgdGhlIGRpc2Nvbm5lY3Rpb24gaXMgcmVjb3ZlcmFibGUuXG4gICAqIEBwYXJhbSBlcnJvck1lc3NhZ2UgLSBBIGN1c3RvbSBlcnJvciBtZXNzYWdlLlxuICAgKiBlbWl0cyBUb3J1c0lucGFnZVByb3ZpZGVyI2Rpc2Nvbm5lY3RcbiAgICovXG4gIF9oYW5kbGVEaXNjb25uZWN0KGlzUmVjb3ZlcmFibGUsIGVycm9yTWVzc2FnZSkge1xuICAgIGlmICh0aGlzLl9zdGF0ZS5pc0Nvbm5lY3RlZCB8fCAhdGhpcy5fc3RhdGUuaXNQZXJtYW5lbnRseURpc2Nvbm5lY3RlZCAmJiAhaXNSZWNvdmVyYWJsZSkge1xuICAgICAgdGhpcy5fc3RhdGUuaXNDb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgIGxldCBlcnJvcjtcbiAgICAgIGlmIChpc1JlY292ZXJhYmxlKSB7XG4gICAgICAgIGVycm9yID0gbmV3IEV0aGVyZXVtUnBjRXJyb3IoMTAxMyxcbiAgICAgICAgLy8gVHJ5IGFnYWluIGxhdGVyXG4gICAgICAgIGVycm9yTWVzc2FnZSB8fCBtZXNzYWdlcy5lcnJvcnMuZGlzY29ubmVjdGVkKCkpO1xuICAgICAgICBsb2cuZGVidWcoZXJyb3IpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXJyb3IgPSBuZXcgRXRoZXJldW1ScGNFcnJvcigxMDExLFxuICAgICAgICAvLyBJbnRlcm5hbCBlcnJvclxuICAgICAgICBlcnJvck1lc3NhZ2UgfHwgbWVzc2FnZXMuZXJyb3JzLnBlcm1hbmVudGx5RGlzY29ubmVjdGVkKCkpO1xuICAgICAgICBsb2cuZXJyb3IoZXJyb3IpO1xuICAgICAgICB0aGlzLmNoYWluSWQgPSBudWxsO1xuICAgICAgICB0aGlzLl9zdGF0ZS5hY2NvdW50cyA9IG51bGw7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzID0gbnVsbDtcbiAgICAgICAgdGhpcy5fc3RhdGUuaXNVbmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLl9zdGF0ZS5pc1Blcm1hbmVudGx5RGlzY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHRoaXMuZW1pdChcImRpc2Nvbm5lY3RcIiwgZXJyb3IpO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gYWNjb3VudHMgbWF5IGhhdmUgY2hhbmdlZC5cbiAgICovXG4gIF9oYW5kbGVBY2NvdW50c0NoYW5nZWQoYWNjb3VudHMpIHtcbiAgICBsZXQgaXNFdGhBY2NvdW50cyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogZmFsc2U7XG4gICAgbGV0IGlzSW50ZXJuYWwgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IGZhbHNlO1xuICAgIC8vIGRlZmVuc2l2ZSBwcm9ncmFtbWluZ1xuICAgIGxldCBmaW5hbEFjY291bnRzID0gYWNjb3VudHM7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGZpbmFsQWNjb3VudHMpKSB7XG4gICAgICBsb2cuZXJyb3IoXCJUb3J1czogUmVjZWl2ZWQgbm9uLWFycmF5IGFjY291bnRzIHBhcmFtZXRlci4gUGxlYXNlIHJlcG9ydCB0aGlzIGJ1Zy5cIiwgZmluYWxBY2NvdW50cyk7XG4gICAgICBmaW5hbEFjY291bnRzID0gW107XG4gICAgfVxuICAgIGZvciAoY29uc3QgYWNjb3VudCBvZiBhY2NvdW50cykge1xuICAgICAgaWYgKHR5cGVvZiBhY2NvdW50ICE9PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGxvZy5lcnJvcihcIlRvcnVzOiBSZWNlaXZlZCBub24tc3RyaW5nIGFjY291bnQuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuXCIsIGFjY291bnRzKTtcbiAgICAgICAgZmluYWxBY2NvdW50cyA9IFtdO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZW1pdCBhY2NvdW50c0NoYW5nZWQgaWYgYW55dGhpbmcgYWJvdXQgdGhlIGFjY291bnRzIGFycmF5IGhhcyBjaGFuZ2VkXG4gICAgaWYgKCFkZXF1YWwodGhpcy5fc3RhdGUuYWNjb3VudHMsIGZpbmFsQWNjb3VudHMpKSB7XG4gICAgICAvLyB3ZSBzaG91bGQgYWx3YXlzIGhhdmUgdGhlIGNvcnJlY3QgYWNjb3VudHMgZXZlbiBiZWZvcmUgc29sYW5hX2FjY291bnRzXG4gICAgICAvLyByZXR1cm5zLCBleGNlcHQgaW4gY2FzZXMgd2hlcmUgaXNJbnRlcm5hbCBpcyB0cnVlXG4gICAgICBpZiAoaXNFdGhBY2NvdW50cyAmJiBBcnJheS5pc0FycmF5KHRoaXMuX3N0YXRlLmFjY291bnRzKSAmJiB0aGlzLl9zdGF0ZS5hY2NvdW50cy5sZW5ndGggPiAwICYmICFpc0ludGVybmFsKSB7XG4gICAgICAgIGxvZy5lcnJvcignVG9ydXM6IFwic29sYW5hX2FjY291bnRzXCIgdW5leHBlY3RlZGx5IHVwZGF0ZWQgYWNjb3VudHMuIFBsZWFzZSByZXBvcnQgdGhpcyBidWcuJywgZmluYWxBY2NvdW50cyk7XG4gICAgICB9XG4gICAgICB0aGlzLl9zdGF0ZS5hY2NvdW50cyA9IGZpbmFsQWNjb3VudHM7XG4gICAgICB0aGlzLmVtaXQoXCJhY2NvdW50c0NoYW5nZWRcIiwgZmluYWxBY2NvdW50cyk7XG4gICAgfVxuICAgIC8vIGhhbmRsZSBzZWxlY3RlZEFkZHJlc3NcbiAgICBpZiAodGhpcy5zZWxlY3RlZEFkZHJlc3MgIT09IGZpbmFsQWNjb3VudHNbMF0pIHtcbiAgICAgIHRoaXMuc2VsZWN0ZWRBZGRyZXNzID0gZmluYWxBY2NvdW50c1swXSB8fCBudWxsO1xuICAgIH1cbiAgfVxuICAvKipcbiAgICogVXBvbiByZWNlaXB0IG9mIGEgbmV3IGNoYWluSWQgYW5kIG5ldHdvcmtWZXJzaW9uLCBlbWl0cyBjb3JyZXNwb25kaW5nXG4gICAqIGV2ZW50cyBhbmQgc2V0cyByZWxldmFudCBwdWJsaWMgc3RhdGUuXG4gICAqIERvZXMgbm90aGluZyBpZiBuZWl0aGVyIHRoZSBjaGFpbklkIG5vciB0aGUgbmV0d29ya1ZlcnNpb24gYXJlIGRpZmZlcmVudFxuICAgKiBmcm9tIGV4aXN0aW5nIHZhbHVlcy5cbiAgICpcbiAgICogZW1pdHMgVG9ydXNJbnBhZ2VQcm92aWRlciNjaGFpbkNoYW5nZWRcbiAgICogQHBhcmFtIG5ldHdvcmtJbmZvIC0gQW4gb2JqZWN0IHdpdGggbmV0d29yayBpbmZvLlxuICAgKi9cbiAgX2hhbmRsZUNoYWluQ2hhbmdlZCgpIHtcbiAgICBsZXQge1xuICAgICAgY2hhaW5JZFxuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGlmICghY2hhaW5JZCkge1xuICAgICAgbG9nLmVycm9yKFwiVG9ydXM6IFJlY2VpdmVkIGludmFsaWQgbmV0d29yayBwYXJhbWV0ZXJzLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLlwiLCB7XG4gICAgICAgIGNoYWluSWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoY2hhaW5JZCA9PT0gXCJsb2FkaW5nXCIpIHtcbiAgICAgIHRoaXMuX2hhbmRsZURpc2Nvbm5lY3QodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2hhbmRsZUNvbm5lY3QoY2hhaW5JZCk7XG4gICAgICBpZiAoY2hhaW5JZCAhPT0gdGhpcy5jaGFpbklkKSB7XG4gICAgICAgIHRoaXMuY2hhaW5JZCA9IGNoYWluSWQ7XG4gICAgICAgIGlmICh0aGlzLl9zdGF0ZS5pbml0aWFsaXplZCkge1xuICAgICAgICAgIHRoaXMuZW1pdChcImNoYWluQ2hhbmdlZFwiLCB0aGlzLmNoYWluSWQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIC8qKlxuICAgKiBVcG9uIHJlY2VpcHQgb2YgYSBuZXcgaXNVbmxvY2tlZCBzdGF0ZSwgc2V0cyByZWxldmFudCBwdWJsaWMgc3RhdGUuXG4gICAqIENhbGxzIHRoZSBhY2NvdW50cyBjaGFuZ2VkIGhhbmRsZXIgd2l0aCB0aGUgcmVjZWl2ZWQgYWNjb3VudHMsIG9yIGFuIGVtcHR5XG4gICAqIGFycmF5LlxuICAgKlxuICAgKiBEb2VzIG5vdGhpbmcgaWYgdGhlIHJlY2VpdmVkIHZhbHVlIGlzIGVxdWFsIHRvIHRoZSBleGlzdGluZyB2YWx1ZS5cbiAgICogVGhlcmUgYXJlIG5vIGxvY2svdW5sb2NrIGV2ZW50cy5cbiAgICpcbiAgICogQHBhcmFtIG9wdHMgLSBPcHRpb25zIGJhZy5cbiAgICovXG4gIF9oYW5kbGVVbmxvY2tTdGF0ZUNoYW5nZWQoKSB7XG4gICAgbGV0IHtcbiAgICAgIGFjY291bnRzLFxuICAgICAgaXNVbmxvY2tlZFxuICAgIH0gPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIGlmICh0eXBlb2YgaXNVbmxvY2tlZCAhPT0gXCJib29sZWFuXCIpIHtcbiAgICAgIGxvZy5lcnJvcihcIlRvcnVzOiBSZWNlaXZlZCBpbnZhbGlkIGlzVW5sb2NrZWQgcGFyYW1ldGVyLiBQbGVhc2UgcmVwb3J0IHRoaXMgYnVnLlwiLCB7XG4gICAgICAgIGlzVW5sb2NrZWRcbiAgICAgIH0pO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAoaXNVbmxvY2tlZCAhPT0gdGhpcy5fc3RhdGUuaXNVbmxvY2tlZCkge1xuICAgICAgdGhpcy5fc3RhdGUuaXNVbmxvY2tlZCA9IGlzVW5sb2NrZWQ7XG4gICAgICB0aGlzLl9oYW5kbGVBY2NvdW50c0NoYW5nZWQoYWNjb3VudHMgfHwgW10pO1xuICAgIH1cbiAgfVxufVxuX2RlZmluZVByb3BlcnR5KFRvcnVzSW5QYWdlUHJvdmlkZXIsIFwiX2RlZmF1bHRTdGF0ZVwiLCB7XG4gIGFjY291bnRzOiBudWxsLFxuICBpc0Nvbm5lY3RlZDogZmFsc2UsXG4gIGlzVW5sb2NrZWQ6IGZhbHNlLFxuICBpbml0aWFsaXplZDogZmFsc2UsXG4gIGlzUGVybWFuZW50bHlEaXNjb25uZWN0ZWQ6IGZhbHNlLFxuICBoYXNFbWl0dGVkQ29ubmVjdGlvbjogZmFsc2Vcbn0pO1xuXG4vKipcbiAqIFJldHVybnMgd2hldGhlciB0aGUgZ2l2ZW4gaW1hZ2UgVVJMIGV4aXN0c1xuICovXG5mdW5jdGlvbiBpbWdFeGlzdHModXJsKSB7XG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IGltZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbWdcIik7XG4gICAgICBpbWcub25sb2FkID0gKCkgPT4gcmVzb2x2ZSh0cnVlKTtcbiAgICAgIGltZy5vbmVycm9yID0gKCkgPT4gcmVzb2x2ZShmYWxzZSk7XG4gICAgICBpbWcuc3JjID0gdXJsO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHJlamVjdChlKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBFeHRyYWN0cyBhIG5hbWUgZm9yIHRoZSBzaXRlIGZyb20gdGhlIERPTVxuICovXG5jb25zdCBnZXRTaXRlTmFtZSA9IHdpbmRvdyA9PiB7XG4gIGNvbnN0IHtcbiAgICBkb2N1bWVudFxuICB9ID0gd2luZG93O1xuICBjb25zdCBzaXRlTmFtZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQgPiBtZXRhW3Byb3BlcnR5PVwib2c6c2l0ZV9uYW1lXCJdJyk7XG4gIGlmIChzaXRlTmFtZSkge1xuICAgIHJldHVybiBzaXRlTmFtZS5jb250ZW50O1xuICB9XG4gIGNvbnN0IG1ldGFUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2hlYWQgPiBtZXRhW25hbWU9XCJ0aXRsZVwiXScpO1xuICBpZiAobWV0YVRpdGxlKSB7XG4gICAgcmV0dXJuIG1ldGFUaXRsZS5jb250ZW50O1xuICB9XG4gIGlmIChkb2N1bWVudC50aXRsZSAmJiBkb2N1bWVudC50aXRsZS5sZW5ndGggPiAwKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LnRpdGxlO1xuICB9XG4gIHJldHVybiB3aW5kb3cubG9jYXRpb24uaG9zdG5hbWU7XG59O1xuLyoqXG4gKiBFeHRyYWN0cyBhbiBpY29uIGZvciB0aGUgc2l0ZSBmcm9tIHRoZSBET01cbiAqL1xuYXN5bmMgZnVuY3Rpb24gZ2V0U2l0ZUljb24od2luZG93KSB7XG4gIHRyeSB7XG4gICAgY29uc3Qge1xuICAgICAgZG9jdW1lbnRcbiAgICB9ID0gd2luZG93O1xuICAgIC8vIFVzZSB0aGUgc2l0ZSdzIGZhdmljb24gaWYgaXQgZXhpc3RzXG4gICAgbGV0IGljb24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdoZWFkID4gbGlua1tyZWw9XCJzaG9ydGN1dCBpY29uXCJdJyk7XG4gICAgaWYgKGljb24gJiYgKGF3YWl0IGltZ0V4aXN0cyhpY29uLmhyZWYpKSkge1xuICAgICAgcmV0dXJuIGljb24uaHJlZjtcbiAgICB9XG4gICAgLy8gU2VhcmNoIHRocm91Z2ggYXZhaWxhYmxlIGljb25zIGluIG5vIHBhcnRpY3VsYXIgb3JkZXJcbiAgICBpY29uID0gQXJyYXkuZnJvbShkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCdoZWFkID4gbGlua1tyZWw9XCJpY29uXCJdJykpLmZpbmQoX2ljb24gPT4gQm9vbGVhbihfaWNvbi5ocmVmKSk7XG4gICAgaWYgKGljb24gJiYgKGF3YWl0IGltZ0V4aXN0cyhpY29uLmhyZWYpKSkge1xuICAgICAgcmV0dXJuIGljb24uaHJlZjtcbiAgICB9XG4gICAgcmV0dXJuIFwiXCI7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIFwiXCI7XG4gIH1cbn1cbi8qKlxuICogR2V0cyBzaXRlIG1ldGFkYXRhIGFuZCByZXR1cm5zIGl0XG4gKlxuICovXG5jb25zdCBnZXRTaXRlTWV0YWRhdGEgPSBhc3luYyAoKSA9PiAoe1xuICBuYW1lOiBnZXRTaXRlTmFtZSh3aW5kb3cpLFxuICBpY29uOiBhd2FpdCBnZXRTaXRlSWNvbih3aW5kb3cpXG59KTtcblxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5jb25zdCBQUk9WSURFUl9VTlNBRkVfTUVUSE9EUyA9IFtcInNlbmRfdHJhbnNhY3Rpb25cIiwgXCJzaWduX3RyYW5zYWN0aW9uXCIsIFwic2lnbl9hbGxfdHJhbnNhY3Rpb25zXCIsIFwic2lnbl9tZXNzYWdlXCIsIFwiY29ubmVjdFwiXTtcbmNvbnN0IENPTU1VTklDQVRJT05fVU5TQUZFX01FVEhPRFMgPSBbQ09NTVVOSUNBVElPTl9KUlBDX01FVEhPRFMuU0VUX1BST1ZJREVSXTtcbmNvbnN0IGlzTG9jYWxTdG9yYWdlQXZhaWxhYmxlID0gc3RvcmFnZUF2YWlsYWJsZShcImxvY2FsU3RvcmFnZVwiKTtcbi8vIHByZWxvYWQgZm9yIGlmcmFtZSBkb2Vzbid0IHdvcmsgaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTkzMjY3XG4oYXN5bmMgZnVuY3Rpb24gcHJlTG9hZElmcmFtZSgpIHtcbiAgdHJ5IHtcbiAgICBpZiAodHlwZW9mIGRvY3VtZW50ID09PSBcInVuZGVmaW5lZFwiKSByZXR1cm47XG4gICAgY29uc3QgdG9ydXNJZnJhbWVIdG1sID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG4gICAgY29uc3Qge1xuICAgICAgdG9ydXNVcmxcbiAgICB9ID0gYXdhaXQgZ2V0VG9ydXNVcmwoXCJwcm9kdWN0aW9uXCIpO1xuICAgIHRvcnVzSWZyYW1lSHRtbC5ocmVmID0gYCR7dG9ydXNVcmx9L2ZyYW1lYDtcbiAgICB0b3J1c0lmcmFtZUh0bWwuY3Jvc3NPcmlnaW4gPSBcImFub255bW91c1wiO1xuICAgIHRvcnVzSWZyYW1lSHRtbC50eXBlID0gXCJ0ZXh0L2h0bWxcIjtcbiAgICB0b3J1c0lmcmFtZUh0bWwucmVsID0gXCJwcmVmZXRjaFwiO1xuICAgIGlmICh0b3J1c0lmcmFtZUh0bWwucmVsTGlzdCAmJiB0b3J1c0lmcmFtZUh0bWwucmVsTGlzdC5zdXBwb3J0cykge1xuICAgICAgaWYgKHRvcnVzSWZyYW1lSHRtbC5yZWxMaXN0LnN1cHBvcnRzKFwicHJlZmV0Y2hcIikpIHtcbiAgICAgICAgZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0b3J1c0lmcmFtZUh0bWwpO1xuICAgICAgfVxuICAgIH1cbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBsb2cud2FybihlcnJvcik7XG4gIH1cbn0pKCk7XG5jbGFzcyBUb3J1cyB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIGxldCB7XG4gICAgICBtb2RhbFpJbmRleCA9IDk5OTk5XG4gICAgfSA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiaXNJbml0aWFsaXplZFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInRvcnVzQWxlcnRcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJtb2RhbFpJbmRleFwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImFsZXJ0WkluZGV4XCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwicmVxdWVzdGVkTG9naW5Qcm92aWRlclwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInByb3ZpZGVyXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY29tbXVuaWNhdGlvblByb3ZpZGVyXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiZGFwcFN0b3JhZ2VLZXlcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJpc1RvcHVwSGlkZGVuXCIsIGZhbHNlKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b3J1c0FsZXJ0Q29udGFpbmVyXCIsIHZvaWQgMCk7XG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwidG9ydXNVcmxcIiwgdm9pZCAwKTtcbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJ0b3J1c0lmcmFtZVwiLCB2b2lkIDApO1xuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcInN0eWxlTGlua1wiLCB2b2lkIDApO1xuICAgIHRoaXMudG9ydXNVcmwgPSBcIlwiO1xuICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IGZhbHNlOyAvLyBpbml0IGRvbmVcbiAgICB0aGlzLnJlcXVlc3RlZExvZ2luUHJvdmlkZXIgPSBudWxsO1xuICAgIHRoaXMubW9kYWxaSW5kZXggPSBtb2RhbFpJbmRleDtcbiAgICB0aGlzLmFsZXJ0WkluZGV4ID0gbW9kYWxaSW5kZXggKyAxMDAwO1xuICAgIHRoaXMuZGFwcFN0b3JhZ2VLZXkgPSBcIlwiO1xuICB9XG4gIGdldCBpc0xvZ2dlZEluKCkge1xuICAgIGlmICghdGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIpIHJldHVybiBmYWxzZTtcbiAgICByZXR1cm4gdGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIuaXNMb2dnZWRJbjtcbiAgfVxuICBhc3luYyBpbml0KCkge1xuICAgIGxldCB7XG4gICAgICBidWlsZEVudiA9IFRPUlVTX0JVSUxEX0VOVi5QUk9EVUNUSU9OLFxuICAgICAgZW5hYmxlTG9nZ2luZyA9IGZhbHNlLFxuICAgICAgbmV0d29yayxcbiAgICAgIHNob3dUb3J1c0J1dHRvbiA9IGZhbHNlLFxuICAgICAgdXNlTG9jYWxTdG9yYWdlID0gZmFsc2UsXG4gICAgICBidXR0b25Qb3NpdGlvbiA9IEJVVFRPTl9QT1NJVElPTi5CT1RUT01fTEVGVCxcbiAgICAgIGFwaUtleSA9IFwidG9ydXMtZGVmYXVsdFwiLFxuICAgICAgZXh0cmFQYXJhbXMgPSB7fSxcbiAgICAgIHdoaXRlTGFiZWxcbiAgICB9ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICBpZiAodGhpcy5pc0luaXRpYWxpemVkKSB0aHJvdyBuZXcgRXJyb3IoXCJBbHJlYWR5IGluaXRpYWxpemVkXCIpO1xuICAgIHNldEFQSUtleShhcGlLZXkpO1xuICAgIGNvbnN0IHtcbiAgICAgIHRvcnVzVXJsLFxuICAgICAgbG9nTGV2ZWxcbiAgICB9ID0gYXdhaXQgZ2V0VG9ydXNVcmwoYnVpbGRFbnYpO1xuICAgIGxvZy5lbmFibGVBbGwoKTtcbiAgICBsb2cuaW5mbyh0b3J1c1VybCwgXCJ1cmwgbG9hZGVkXCIpO1xuICAgIGxvZy5pbmZvKGBTb2xhbmEgRW1iZWQgVmVyc2lvbiA6JHt2ZXJzaW9ufWApO1xuICAgIHRoaXMudG9ydXNVcmwgPSB0b3J1c1VybDtcbiAgICBsb2cuc2V0RGVmYXVsdExldmVsKGxvZ0xldmVsKTtcbiAgICBpZiAoZW5hYmxlTG9nZ2luZykgbG9nLmVuYWJsZUFsbCgpO2Vsc2UgbG9nLmRpc2FibGVBbGwoKTtcbiAgICBjb25zdCBkYXBwU3RvcmFnZUtleSA9IHRoaXMuaGFuZGxlRGFwcFN0b3JhZ2VLZXkodXNlTG9jYWxTdG9yYWdlKTtcbiAgICBjb25zdCB0b3J1c0lmcmFtZVVybCA9IG5ldyBVUkwodG9ydXNVcmwpO1xuICAgIGlmICh0b3J1c0lmcmFtZVVybC5wYXRobmFtZS5lbmRzV2l0aChcIi9cIikpIHRvcnVzSWZyYW1lVXJsLnBhdGhuYW1lICs9IFwiZnJhbWVcIjtlbHNlIHRvcnVzSWZyYW1lVXJsLnBhdGhuYW1lICs9IFwiL2ZyYW1lXCI7XG4gICAgY29uc3QgaGFzaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgICBpZiAoZGFwcFN0b3JhZ2VLZXkpIGhhc2hQYXJhbXMuYXBwZW5kKFwiZGFwcFN0b3JhZ2VLZXlcIiwgZGFwcFN0b3JhZ2VLZXkpO1xuICAgIGhhc2hQYXJhbXMuYXBwZW5kKFwib3JpZ2luXCIsIHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pO1xuICAgIHRvcnVzSWZyYW1lVXJsLmhhc2ggPSBoYXNoUGFyYW1zLnRvU3RyaW5nKCk7XG4gICAgLy8gSWZyYW1lIGNvZGVcbiAgICB0aGlzLnRvcnVzSWZyYW1lID0gaHRtbFRvRWxlbWVudChgPGlmcmFtZVxuICAgICAgICBpZD1cInRvcnVzSWZyYW1lXCJcbiAgICAgICAgY2xhc3M9XCJ0b3J1c0lmcmFtZVwiXG4gICAgICAgIHNyYz1cIiR7dG9ydXNJZnJhbWVVcmwuaHJlZn1cIlxuICAgICAgICBzdHlsZT1cImRpc3BsYXk6IG5vbmU7IHBvc2l0aW9uOiBmaXhlZDsgdG9wOiAwOyByaWdodDogMDsgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTsgYm9yZGVyOiBub25lOyBib3JkZXItcmFkaXVzOiAwOyB6LWluZGV4OiAke3RoaXMubW9kYWxaSW5kZXgudG9TdHJpbmcoKX1cIlxuICAgICAgPjwvaWZyYW1lPmApO1xuICAgIHRoaXMudG9ydXNBbGVydENvbnRhaW5lciA9IGh0bWxUb0VsZW1lbnQoYDxkaXYgaWQ9XCJ0b3J1c0FsZXJ0Q29udGFpbmVyXCIgc3R5bGU9XCJkaXNwbGF5Om5vbmU7IHotaW5kZXg6ICR7dGhpcy5hbGVydFpJbmRleC50b1N0cmluZygpfVwiPjwvZGl2PmApO1xuICAgIHRoaXMuc3R5bGVMaW5rID0gaHRtbFRvRWxlbWVudChgPGxpbmsgaHJlZj1cIiR7dG9ydXNVcmx9L2Nzcy93aWRnZXQuY3NzXCIgcmVsPVwic3R5bGVzaGVldFwiIHR5cGU9XCJ0ZXh0L2Nzc1wiPmApO1xuICAgIGNvbnN0IGhhbmRsZVNldHVwID0gYXN5bmMgKCkgPT4ge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB3aW5kb3cuZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlTGluayk7XG4gICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy50b3J1c0lmcmFtZSk7XG4gICAgICAgICAgd2luZG93LmRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyKTtcbiAgICAgICAgICB0aGlzLnRvcnVzSWZyYW1lLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGFzeW5jICgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGRhcHBNZXRhZGF0YSA9IGF3YWl0IGdldFNpdGVNZXRhZGF0YSgpO1xuICAgICAgICAgICAgLy8gc2VuZCBpbml0IHBhcmFtcyBoZXJlXG4gICAgICAgICAgICB0aGlzLnRvcnVzSWZyYW1lLmNvbnRlbnRXaW5kb3cucG9zdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgICBidXR0b25Qb3NpdGlvbixcbiAgICAgICAgICAgICAgYXBpS2V5LFxuICAgICAgICAgICAgICBuZXR3b3JrLFxuICAgICAgICAgICAgICBkYXBwTWV0YWRhdGEsXG4gICAgICAgICAgICAgIGV4dHJhUGFyYW1zLFxuICAgICAgICAgICAgICB3aGl0ZUxhYmVsXG4gICAgICAgICAgICB9LCB0b3J1c0lmcmFtZVVybC5vcmlnaW4pO1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5fc2V0dXBXZWIzKHtcbiAgICAgICAgICAgICAgdG9ydXNVcmxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKHNob3dUb3J1c0J1dHRvbikgdGhpcy5zaG93VG9ydXNCdXR0b24oKTtcbiAgICAgICAgICAgIGlmICh3aGl0ZUxhYmVsPy50b3B1cEhpZGUpIHRoaXMuaXNUb3B1cEhpZGRlbiA9IHdoaXRlTGFiZWwudG9wdXBIaWRlO2Vsc2UgdGhpcy5oaWRlVG9ydXNCdXR0b24oKTtcbiAgICAgICAgICAgIHRoaXMuaXNJbml0aWFsaXplZCA9IHRydWU7XG4gICAgICAgICAgICB3aW5kb3cudG9ydXMgPSB0aGlzO1xuICAgICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG4gICAgYXdhaXQgZG9jdW1lbnRSZWFkeSgpO1xuICAgIGF3YWl0IGhhbmRsZVNldHVwKCk7XG4gIH1cbiAgYXN5bmMgbG9naW4oKSB7XG4gICAgbGV0IHBhcmFtcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQpIHRocm93IG5ldyBFcnJvcihcIkNhbGwgaW5pdCgpIGZpcnN0XCIpO1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnJlcXVlc3RlZExvZ2luUHJvdmlkZXIgPSBwYXJhbXMubG9naW5Qcm92aWRlciB8fCBudWxsO1xuICAgICAgaWYgKCF0aGlzLnJlcXVlc3RlZExvZ2luUHJvdmlkZXIpIHtcbiAgICAgICAgdGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIuX2Rpc3BsYXlJZnJhbWUoe1xuICAgICAgICAgIGlzRnVsbDogdHJ1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIC8vIElmIHVzZXIgaXMgYWxyZWFkeSBsb2dnZWQgaW4sIHdlIGFzc3VtZSB0aGV5IGhhdmUgZ2l2ZW4gYWNjZXNzIHRvIHRoZSB3ZWJzaXRlXG4gICAgICBjb25zdCByZXMgPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIC8vIFdlIHVzZSB0aGlzIG1ldGhvZCBiZWNhdXNlIHdlIHdhbnQgdG8gdXBkYXRlIGluUGFnZSBwcm92aWRlciBzdGF0ZSB3aXRoIGFjY291bnQgaW5mb1xuICAgICAgICB0aGlzLnByb3ZpZGVyLl9ycGNSZXF1ZXN0KHtcbiAgICAgICAgICBtZXRob2Q6IFwic29sYW5hX3JlcXVlc3RBY2NvdW50c1wiLFxuICAgICAgICAgIHBhcmFtczogW3RoaXMucmVxdWVzdGVkTG9naW5Qcm92aWRlciwgcGFyYW1zLmxvZ2luX2hpbnRdXG4gICAgICAgIH0sIGdldFJwY1Byb21pc2VDYWxsYmFjayhyZXNvbHZlLCByZWplY3QpKTtcbiAgICAgIH0pO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkocmVzKSAmJiByZXMubGVuZ3RoID4gMCkge1xuICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgfVxuICAgICAgLy8gVGhpcyB3b3VsZCBuZXZlciBoYXBwZW4sIGJ1dCBqdXN0IGluIGNhc2VcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkxvZ2luIGZhaWxlZFwiKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgbG9nLmVycm9yKFwibG9naW4gZmFpbGVkXCIsIGVycm9yKTtcbiAgICAgIHRocm93IGVycm9yO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAodGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIuaXNJRnJhbWVGdWxsU2NyZWVuKSB0aGlzLmNvbW11bmljYXRpb25Qcm92aWRlci5fZGlzcGxheUlmcmFtZSgpO1xuICAgIH1cbiAgfVxuICBhc3luYyBsb2dpbldpdGhQcml2YXRlS2V5KGxvZ2luUGFyYW1zKSB7XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQpIHRocm93IG5ldyBFcnJvcihcIkNhbGwgaW5pdCgpIGZpcnN0XCIpO1xuICAgIGNvbnN0IHtcbiAgICAgIHByaXZhdGVLZXksXG4gICAgICB1c2VySW5mb1xuICAgIH0gPSBsb2dpblBhcmFtcztcbiAgICBjb25zdCB7XG4gICAgICBzdWNjZXNzXG4gICAgfSA9IGF3YWl0IHRoaXMuY29tbXVuaWNhdGlvblByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcImxvZ2luX3dpdGhfcHJpdmF0ZV9rZXlcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBwcml2YXRlS2V5LFxuICAgICAgICB1c2VySW5mb1xuICAgICAgfVxuICAgIH0pO1xuICAgIGlmICghc3VjY2VzcykgdGhyb3cgbmV3IEVycm9yKFwiTG9naW4gRmFpbGVkXCIpO1xuICB9XG4gIGFzeW5jIGxvZ291dCgpIHtcbiAgICBpZiAoIXRoaXMuY29tbXVuaWNhdGlvblByb3ZpZGVyLmlzTG9nZ2VkSW4pIHRocm93IG5ldyBFcnJvcihcIk5vdCBsb2dnZWQgaW5cIik7XG4gICAgYXdhaXQgdGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IENPTU1VTklDQVRJT05fSlJQQ19NRVRIT0RTLkxPR09VVCxcbiAgICAgIHBhcmFtczogW11cbiAgICB9KTtcbiAgICB0aGlzLnJlcXVlc3RlZExvZ2luUHJvdmlkZXIgPSBudWxsO1xuICB9XG4gIGFzeW5jIGNsZWFuVXAoKSB7XG4gICAgaWYgKHRoaXMuY29tbXVuaWNhdGlvblByb3ZpZGVyLmlzTG9nZ2VkSW4pIHtcbiAgICAgIGF3YWl0IHRoaXMubG9nb3V0KCk7XG4gICAgfVxuICAgIHRoaXMuY2xlYXJJbml0KCk7XG4gIH1cbiAgY2xlYXJJbml0KCkge1xuICAgIGZ1bmN0aW9uIGlzRWxlbWVudChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gZWxlbWVudCBpbnN0YW5jZW9mIEVsZW1lbnQgfHwgZWxlbWVudCBpbnN0YW5jZW9mIERvY3VtZW50O1xuICAgIH1cbiAgICBpZiAoaXNFbGVtZW50KHRoaXMuc3R5bGVMaW5rKSAmJiB3aW5kb3cuZG9jdW1lbnQuYm9keS5jb250YWlucyh0aGlzLnN0eWxlTGluaykpIHtcbiAgICAgIHRoaXMuc3R5bGVMaW5rLnJlbW92ZSgpO1xuICAgICAgdGhpcy5zdHlsZUxpbmsgPSB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmIChpc0VsZW1lbnQodGhpcy50b3J1c0lmcmFtZSkgJiYgd2luZG93LmRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy50b3J1c0lmcmFtZSkpIHtcbiAgICAgIHRoaXMudG9ydXNJZnJhbWUucmVtb3ZlKCk7XG4gICAgICB0aGlzLnRvcnVzSWZyYW1lID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXNFbGVtZW50KHRoaXMudG9ydXNBbGVydENvbnRhaW5lcikgJiYgd2luZG93LmRvY3VtZW50LmJvZHkuY29udGFpbnModGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyKSkge1xuICAgICAgdGhpcy50b3J1c0FsZXJ0ID0gdW5kZWZpbmVkO1xuICAgICAgdGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyLnJlbW92ZSgpO1xuICAgICAgdGhpcy50b3J1c0FsZXJ0Q29udGFpbmVyID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICB0aGlzLmlzSW5pdGlhbGl6ZWQgPSBmYWxzZTtcbiAgfVxuICBoaWRlVG9ydXNCdXR0b24oKSB7XG4gICAgdGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIuaGlkZVRvcnVzQnV0dG9uKCk7XG4gIH1cbiAgc2hvd1RvcnVzQnV0dG9uKCkge1xuICAgIHRoaXMuY29tbXVuaWNhdGlvblByb3ZpZGVyLnNob3dUb3J1c0J1dHRvbigpO1xuICB9XG4gIGFzeW5jIHNldFByb3ZpZGVyKHBhcmFtcykge1xuICAgIGF3YWl0IHRoaXMuY29tbXVuaWNhdGlvblByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBDT01NVU5JQ0FUSU9OX0pSUENfTUVUSE9EUy5TRVRfUFJPVklERVIsXG4gICAgICBwYXJhbXM6IF9vYmplY3RTcHJlYWQoe30sIHBhcmFtcylcbiAgICB9KTtcbiAgfVxuICBhc3luYyBzaG93V2FsbGV0KHBhdGgpIHtcbiAgICBsZXQgcGFyYW1zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICBjb25zdCBpbnN0YW5jZUlkID0gYXdhaXQgdGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IENPTU1VTklDQVRJT05fSlJQQ19NRVRIT0RTLldBTExFVF9JTlNUQU5DRV9JRCxcbiAgICAgIHBhcmFtczogW11cbiAgICB9KTtcbiAgICBjb25zdCBmaW5hbFBhdGggPSBwYXRoID8gYC8ke3BhdGh9YCA6IFwiXCI7XG4gICAgY29uc3QgZmluYWxVcmwgPSBuZXcgVVJMKGAke3RoaXMudG9ydXNVcmx9L3dhbGxldCR7ZmluYWxQYXRofWApO1xuICAgIC8vIFVzaW5nIFVSTCBjb25zdHJ1Y3RvciB0byBwcmV2ZW50IGpzIGluamVjdGlvbiBhbmQgYWxsb3cgcGFyYW1ldGVyIHZhbGlkYXRpb24uIVxuICAgIGZpbmFsVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoXCJpbnN0YW5jZUlkXCIsIGluc3RhbmNlSWQpO1xuICAgIE9iamVjdC5rZXlzKHBhcmFtcykuZm9yRWFjaCh4ID0+IHtcbiAgICAgIGZpbmFsVXJsLnNlYXJjaFBhcmFtcy5hcHBlbmQoeCwgcGFyYW1zW3hdKTtcbiAgICB9KTtcbiAgICBpZiAodGhpcy5kYXBwU3RvcmFnZUtleSkge1xuICAgICAgZmluYWxVcmwuaGFzaCA9IGAjZGFwcFN0b3JhZ2VLZXk9JHt0aGlzLmRhcHBTdG9yYWdlS2V5fWA7XG4gICAgfVxuICAgIC8vIE5vIG5lZWQgdG8gdHJhY2sgdGhpcyB3aW5kb3cgc3RhdGUuIEhlbmNlLCBubyBfaGFuZGxlV2luZG93IGNhbGwuXG4gICAgY29uc3Qgd2FsbGV0V2luZG93ID0gbmV3IFBvcHVwSGFuZGxlcih7XG4gICAgICB1cmw6IGZpbmFsVXJsLFxuICAgICAgZmVhdHVyZXM6IGdldFBvcHVwRmVhdHVyZXMoRkVBVFVSRVNfREVGQVVMVF9XQUxMRVRfV0lORE9XKVxuICAgIH0pO1xuICAgIHdhbGxldFdpbmRvdy5vcGVuKCk7XG4gIH1cbiAgYXN5bmMgZ2V0VXNlckluZm8oKSB7XG4gICAgY29uc3QgdXNlckluZm9SZXNwb25zZSA9IGF3YWl0IHRoaXMuY29tbXVuaWNhdGlvblByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBDT01NVU5JQ0FUSU9OX0pSUENfTUVUSE9EUy5VU0VSX0lORk8sXG4gICAgICBwYXJhbXM6IFtdXG4gICAgfSk7XG4gICAgcmV0dXJuIHVzZXJJbmZvUmVzcG9uc2U7XG4gIH1cbiAgYXN5bmMgaW5pdGlhdGVUb3B1cChwcm92aWRlciwgcGFyYW1zKSB7XG4gICAgaWYgKCF0aGlzLmlzSW5pdGlhbGl6ZWQpIHRocm93IG5ldyBFcnJvcihcIlRvcnVzIGlzIG5vdCBpbml0aWFsaXplZFwiKTtcbiAgICBjb25zdCB3aW5kb3dJZCA9IGdldFdpbmRvd0lkKCk7XG4gICAgdGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIuX2hhbmRsZVdpbmRvdyh3aW5kb3dJZCk7XG4gICAgY29uc3QgdG9wdXBSZXNwb25zZSA9IGF3YWl0IHRoaXMuY29tbXVuaWNhdGlvblByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBDT01NVU5JQ0FUSU9OX0pSUENfTUVUSE9EUy5UT1BVUCxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBwcm92aWRlcixcbiAgICAgICAgcGFyYW1zLFxuICAgICAgICB3aW5kb3dJZFxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiB0b3B1cFJlc3BvbnNlO1xuICB9XG4gIC8vIFNvbGFuYSBzcGVjaWZpYyBBUElcbiAgYXN5bmMgZ2V0QWNjb3VudHMoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcImdldEFjY291bnRzXCIsXG4gICAgICBwYXJhbXM6IFtdXG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG4gIGFzeW5jIHNlbmRUcmFuc2FjdGlvbih0cmFuc2FjdGlvbikge1xuICAgIGNvbnN0IGlzTGVnYWN5VHJhbnNhY3Rpb24gPSBpc0xlZ2FjeVRyYW5zYWN0aW9uSW5zdGFuY2UodHJhbnNhY3Rpb24pO1xuICAgIGNvbnN0IG1lc3NhZ2UgPSBpc0xlZ2FjeVRyYW5zYWN0aW9uID8gdHJhbnNhY3Rpb24uc2VyaWFsaXplKHtcbiAgICAgIHJlcXVpcmVBbGxTaWduYXR1cmVzOiBmYWxzZVxuICAgIH0pLnRvU3RyaW5nKFwiaGV4XCIpIDogQnVmZmVyLmZyb20odHJhbnNhY3Rpb24uc2VyaWFsaXplKCkpLnRvU3RyaW5nKFwiaGV4XCIpO1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcm92aWRlci5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJzZW5kX3RyYW5zYWN0aW9uXCIsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWVzc2FnZSxcbiAgICAgICAgaXNMZWdhY3lUcmFuc2FjdGlvblxuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXNwb25zZTtcbiAgfVxuICAvLyBzdXBwb3J0IHNlbmRPcHRpb25zXG4gIGFzeW5jIHNpZ25BbmRTZW5kVHJhbnNhY3Rpb24odHJhbnNhY3Rpb24sIG9wdGlvbnMpIHtcbiAgICBjb25zdCBpc0xlZ2FjeVRyYW5zYWN0aW9uID0gaXNMZWdhY3lUcmFuc2FjdGlvbkluc3RhbmNlKHRyYW5zYWN0aW9uKTtcbiAgICBjb25zdCBtZXNzYWdlID0gaXNMZWdhY3lUcmFuc2FjdGlvbiA/IHRyYW5zYWN0aW9uLnNlcmlhbGl6ZSh7XG4gICAgICByZXF1aXJlQWxsU2lnbmF0dXJlczogZmFsc2VcbiAgICB9KS50b1N0cmluZyhcImhleFwiKSA6IEJ1ZmZlci5mcm9tKHRyYW5zYWN0aW9uLnNlcmlhbGl6ZSgpKS50b1N0cmluZyhcImhleFwiKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IFwic2VuZF90cmFuc2FjdGlvblwiLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIGlzTGVnYWN5VHJhbnNhY3Rpb25cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4ge1xuICAgICAgc2lnbmF0dXJlOiByZXNwb25zZVxuICAgIH07XG4gIH1cbiAgYXN5bmMgc2lnblRyYW5zYWN0aW9uKHRyYW5zYWN0aW9uKSB7XG4gICAgY29uc3QgaXNMZWdhY3lUcmFuc2FjdGlvbiA9IGlzTGVnYWN5VHJhbnNhY3Rpb25JbnN0YW5jZSh0cmFuc2FjdGlvbik7XG4gICAgY29uc3QgbWVzc2FnZSA9IGlzTGVnYWN5VHJhbnNhY3Rpb24gPyB0cmFuc2FjdGlvbi5zZXJpYWxpemVNZXNzYWdlKCkudG9TdHJpbmcoXCJoZXhcIikgOiBCdWZmZXIuZnJvbSh0cmFuc2FjdGlvbi5tZXNzYWdlLnNlcmlhbGl6ZSgpKS50b1N0cmluZyhcImhleFwiKTtcbiAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMucHJvdmlkZXIucmVxdWVzdCh7XG4gICAgICBtZXRob2Q6IFwic2lnbl90cmFuc2FjdGlvblwiLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1lc3NhZ2UsXG4gICAgICAgIG1lc3NhZ2VPbmx5OiB0cnVlLFxuICAgICAgICBpc0xlZ2FjeVRyYW5zYWN0aW9uXG4gICAgICB9XG4gICAgfSk7XG4gICAgLy8gcmVjb25zdHJ1Y3Qgc2lnbmF0dXJlIHBhaXJcbiAgICBjb25zdCBwYXJzZWQgPSBKU09OLnBhcnNlKHJlc3BvbnNlKTtcbiAgICBjb25zdCBzaWduYXR1cmUgPSB7XG4gICAgICBwdWJsaWNLZXk6IG5ldyBQdWJsaWNLZXkocGFyc2VkLnB1YmxpY0tleSksXG4gICAgICBzaWduYXR1cmU6IEJ1ZmZlci5mcm9tKHBhcnNlZC5zaWduYXR1cmUsIFwiaGV4XCIpXG4gICAgfTtcbiAgICB0cmFuc2FjdGlvbi5hZGRTaWduYXR1cmUoc2lnbmF0dXJlLnB1YmxpY0tleSwgc2lnbmF0dXJlLnNpZ25hdHVyZSk7XG4gICAgcmV0dXJuIHRyYW5zYWN0aW9uO1xuICB9XG4gIGFzeW5jIHNpZ25BbGxUcmFuc2FjdGlvbnModHJhbnNhY3Rpb25zKSB7XG4gICAgbGV0IGlzTGVnYWN5VHJhbnNhY3Rpb247XG4gICAgY29uc3QgZW5jb2RlZE1lc3NhZ2UgPSB0cmFuc2FjdGlvbnMubWFwKHR4ID0+IHtcbiAgICAgIGlzTGVnYWN5VHJhbnNhY3Rpb24gPSBpc0xlZ2FjeVRyYW5zYWN0aW9uSW5zdGFuY2UodHgpO1xuICAgICAgcmV0dXJuIGlzTGVnYWN5VHJhbnNhY3Rpb24gPyB0eC5zZXJpYWxpemVNZXNzYWdlKCkudG9TdHJpbmcoXCJoZXhcIikgOiBCdWZmZXIuZnJvbSh0eC5tZXNzYWdlLnNlcmlhbGl6ZSgpKS50b1N0cmluZyhcImhleFwiKTtcbiAgICB9KTtcbiAgICBjb25zdCByZXNwb25zZXMgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcInNpZ25fYWxsX3RyYW5zYWN0aW9uc1wiLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1lc3NhZ2U6IGVuY29kZWRNZXNzYWdlLFxuICAgICAgICBtZXNzYWdlT25seTogdHJ1ZSxcbiAgICAgICAgaXNMZWdhY3lUcmFuc2FjdGlvblxuICAgICAgfVxuICAgIH0pO1xuICAgIC8vIHJlY29uc3RydWN0IHNpZ25hdHVyZSBwYWlyc1xuICAgIGNvbnN0IHNpZ25hdHVyZXMgPSByZXNwb25zZXMubWFwKGl0ZW0gPT4ge1xuICAgICAgY29uc3QgcGFyc2VkID0gSlNPTi5wYXJzZShpdGVtKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHB1YmxpY0tleTogbmV3IFB1YmxpY0tleShwYXJzZWQucHVibGljS2V5KSxcbiAgICAgICAgc2lnbmF0dXJlOiBCdWZmZXIuZnJvbShwYXJzZWQuc2lnbmF0dXJlLCBcImhleFwiKVxuICAgICAgfTtcbiAgICB9KTtcbiAgICB0cmFuc2FjdGlvbnMuZm9yRWFjaCgodHgsIGlkeCkgPT4ge1xuICAgICAgdHguYWRkU2lnbmF0dXJlKHNpZ25hdHVyZXNbaWR4XS5wdWJsaWNLZXksIHNpZ25hdHVyZXNbaWR4XS5zaWduYXR1cmUpO1xuICAgICAgcmV0dXJuIHR4O1xuICAgIH0pO1xuICAgIHJldHVybiB0cmFuc2FjdGlvbnM7XG4gIH1cbiAgYXN5bmMgc2lnbk1lc3NhZ2UoZGF0YSkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgdGhpcy5wcm92aWRlci5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJzaWduX21lc3NhZ2VcIixcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBkYXRhXG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIHJlc3BvbnNlO1xuICB9XG4gIGFzeW5jIGdldEdhc2xlc3NQdWJsaWNLZXkoKSB7XG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCB0aGlzLnByb3ZpZGVyLnJlcXVlc3Qoe1xuICAgICAgbWV0aG9kOiBcImdldF9nYXNsZXNzX3B1YmxpY19rZXlcIixcbiAgICAgIHBhcmFtczogW11cbiAgICB9KTtcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH1cbiAgLy8gYXN5bmMgY29ubmVjdCgpOiBQcm9taXNlPGJvb2xlYW4+IHtcbiAgLy8gICBjb25zdCByZXNwb25zZSA9IChhd2FpdCB0aGlzLnByb3ZpZGVyLnJlcXVlc3Qoe1xuICAvLyAgICAgbWV0aG9kOiBcImNvbm5lY3RcIixcbiAgLy8gICAgIHBhcmFtczoge30sXG4gIC8vICAgfSkpIGFzIGJvb2xlYW47XG4gIC8vICAgcmV0dXJuIHJlc3BvbnNlO1xuICAvLyB9XG4gIGhhbmRsZURhcHBTdG9yYWdlS2V5KHVzZUxvY2FsU3RvcmFnZSkge1xuICAgIGNvbnN0IGxvY2FsU3RvcmFnZUtleSA9IGAke2NvbmZpZ3VyYXRpb24ubG9jYWxTdG9yYWdlS2V5UHJlZml4fSR7d2luZG93LmxvY2F0aW9uLmhvc3RuYW1lfWA7XG4gICAgbGV0IGRhcHBTdG9yYWdlS2V5ID0gXCJcIjtcbiAgICBpZiAoaXNMb2NhbFN0b3JhZ2VBdmFpbGFibGUgJiYgdXNlTG9jYWxTdG9yYWdlKSB7XG4gICAgICBjb25zdCBzdG9yZWRLZXkgPSB3aW5kb3cubG9jYWxTdG9yYWdlLmdldEl0ZW0obG9jYWxTdG9yYWdlS2V5KTtcbiAgICAgIGlmIChzdG9yZWRLZXkpIGRhcHBTdG9yYWdlS2V5ID0gc3RvcmVkS2V5O2Vsc2Uge1xuICAgICAgICBjb25zdCBnZW5lcmF0ZWRLZXkgPSBgdG9ydXMtYXBwLSR7Z2V0V2luZG93SWQoKX1gO1xuICAgICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0obG9jYWxTdG9yYWdlS2V5LCBnZW5lcmF0ZWRLZXkpO1xuICAgICAgICBkYXBwU3RvcmFnZUtleSA9IGdlbmVyYXRlZEtleTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5kYXBwU3RvcmFnZUtleSA9IGRhcHBTdG9yYWdlS2V5O1xuICAgIHJldHVybiBkYXBwU3RvcmFnZUtleTtcbiAgfVxuICBhc3luYyBfc2V0dXBXZWIzKHByb3ZpZGVyUGFyYW1zKSB7XG4gICAgbG9nLmluZm8oXCJzZXR1cFdlYjMgcnVubmluZ1wiKTtcbiAgICAvLyBzZXR1cCBiYWNrZ3JvdW5kIGNvbm5lY3Rpb25cbiAgICBjb25zdCBwcm92aWRlclN0cmVhbSA9IG5ldyBCYXNlUG9zdE1lc3NhZ2VTdHJlYW0oe1xuICAgICAgbmFtZTogXCJlbWJlZF90b3J1c1wiLFxuICAgICAgdGFyZ2V0OiBcImlmcmFtZV90b3J1c1wiLFxuICAgICAgdGFyZ2V0V2luZG93OiB0aGlzLnRvcnVzSWZyYW1lLmNvbnRlbnRXaW5kb3dcbiAgICB9KTtcbiAgICAvLyBXZSBjcmVhdGUgYW5vdGhlciBMb2NhbE1lc3NhZ2VEdXBsZXhTdHJlYW0gZm9yIGNvbW11bmljYXRpb24gYmV0d2VlbiBkYXBwIDw+IGlmcmFtZVxuICAgIGNvbnN0IGNvbW11bmljYXRpb25TdHJlYW0gPSBuZXcgQmFzZVBvc3RNZXNzYWdlU3RyZWFtKHtcbiAgICAgIG5hbWU6IFwiZW1iZWRfY29tbXVuaWNhdGlvblwiLFxuICAgICAgdGFyZ2V0OiBcImlmcmFtZV9jb21tdW5pY2F0aW9uXCIsXG4gICAgICB0YXJnZXRXaW5kb3c6IHRoaXMudG9ydXNJZnJhbWUuY29udGVudFdpbmRvd1xuICAgIH0pO1xuICAgIC8vIGNvbXBvc2UgdGhlIGluUGFnZSBwcm92aWRlclxuICAgIGNvbnN0IGluUGFnZVByb3ZpZGVyID0gbmV3IFRvcnVzSW5QYWdlUHJvdmlkZXIocHJvdmlkZXJTdHJlYW0sIHt9KTtcbiAgICBjb25zdCBjb21tdW5pY2F0aW9uUHJvdmlkZXIgPSBuZXcgVG9ydXNDb21tdW5pY2F0aW9uUHJvdmlkZXIoY29tbXVuaWNhdGlvblN0cmVhbSwge30pO1xuICAgIGluUGFnZVByb3ZpZGVyLnRyeVdpbmRvd0hhbmRsZSA9IChwYXlsb2FkLCBjYikgPT4ge1xuICAgICAgY29uc3QgX3BheWxvYWQgPSBwYXlsb2FkO1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KF9wYXlsb2FkKSAmJiBQUk9WSURFUl9VTlNBRkVfTUVUSE9EUy5pbmNsdWRlcyhfcGF5bG9hZC5tZXRob2QpKSB7XG4gICAgICAgIGlmICghdGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIuaXNMb2dnZWRJbikgdGhyb3cgbmV3IEVycm9yKFwiVXNlciBOb3QgTG9nZ2VkIEluXCIpO1xuICAgICAgICBjb25zdCB3aW5kb3dJZCA9IGdldFdpbmRvd0lkKCk7XG4gICAgICAgIGNvbW11bmljYXRpb25Qcm92aWRlci5faGFuZGxlV2luZG93KHdpbmRvd0lkLCB7XG4gICAgICAgICAgdGFyZ2V0OiBcIl9ibGFua1wiLFxuICAgICAgICAgIGZlYXR1cmVzOiBnZXRQb3B1cEZlYXR1cmVzKEZFQVRVUkVTX0NPTkZJUk1fV0lORE9XKVxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZm9yIGluUGFnZVByb3ZpZGVyIG1ldGhvZHMgc2VuZGluZyB3aW5kb3dJZCBpbiByZXF1ZXN0IGluc3RlYWQgb2YgcGFyYW1zXG4gICAgICAgIC8vIGFzIHBhcmFtcyBtaWdodCBiZSBwb3NpdGlvbmFsLlxuICAgICAgICBfcGF5bG9hZC53aW5kb3dJZCA9IHdpbmRvd0lkO1xuICAgICAgfVxuICAgICAgaW5QYWdlUHJvdmlkZXIuX3JwY0VuZ2luZS5oYW5kbGUoX3BheWxvYWQsIGNiKTtcbiAgICB9O1xuICAgIGNvbW11bmljYXRpb25Qcm92aWRlci50cnlXaW5kb3dIYW5kbGUgPSAocGF5bG9hZCwgY2IpID0+IHtcbiAgICAgIGNvbnN0IF9wYXlsb2FkID0gcGF5bG9hZDtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShfcGF5bG9hZCkgJiYgQ09NTVVOSUNBVElPTl9VTlNBRkVfTUVUSE9EUy5pbmNsdWRlcyhfcGF5bG9hZC5tZXRob2QpKSB7XG4gICAgICAgIGNvbnN0IHdpbmRvd0lkID0gZ2V0V2luZG93SWQoKTtcbiAgICAgICAgY29tbXVuaWNhdGlvblByb3ZpZGVyLl9oYW5kbGVXaW5kb3cod2luZG93SWQsIHtcbiAgICAgICAgICB0YXJnZXQ6IFwiX2JsYW5rXCIsXG4gICAgICAgICAgZmVhdHVyZXM6IGdldFBvcHVwRmVhdHVyZXMoRkVBVFVSRVNfUFJPVklERVJfQ0hBTkdFX1dJTkRPVykgLy8gdG9kbzogYXJlIHRoZXNlIGZlYXR1cmVzIGdlbmVyaWMgZm9yIGFsbFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gZm9yIGNvbW11bmljYXRpb24gbWV0aG9kcyBzZW5kaW5nIHdpbmRvdyBpZCBpbiBqcnBjIHJlcSBwYXJhbXNcbiAgICAgICAgX3BheWxvYWQucGFyYW1zLndpbmRvd0lkID0gd2luZG93SWQ7XG4gICAgICB9XG4gICAgICBjb21tdW5pY2F0aW9uUHJvdmlkZXIuX3JwY0VuZ2luZS5oYW5kbGUoX3BheWxvYWQsIGNiKTtcbiAgICB9O1xuICAgIC8vIGRldGVjdCBzb2xhbmFfcmVxdWVzdEFjY291bnRzIGFuZCBwaXBlIHRvIGVuYWJsZSBmb3Igbm93XG4gICAgY29uc3QgZGV0ZWN0QWNjb3VudFJlcXVlc3RQcm90b3R5cGVNb2RpZmllciA9IG0gPT4ge1xuICAgICAgY29uc3Qgb3JpZ2luYWxNZXRob2QgPSBpblBhZ2VQcm92aWRlclttXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xuICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICBpblBhZ2VQcm92aWRlclttXSA9IGZ1bmN0aW9uIHByb3ZpZGVyRnVuYyhyZXF1ZXN0LCBjYikge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgbWV0aG9kLFxuICAgICAgICAgIHBhcmFtcyA9IFtdXG4gICAgICAgIH0gPSByZXF1ZXN0O1xuICAgICAgICBpZiAobWV0aG9kID09PSBcInNvbGFuYV9yZXF1ZXN0QWNjb3VudHNcIikge1xuICAgICAgICAgIGlmICghY2IpIHJldHVybiBzZWxmLmxvZ2luKHtcbiAgICAgICAgICAgIGxvZ2luUHJvdmlkZXI6IHBhcmFtc1swXVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHNlbGYubG9naW4oe1xuICAgICAgICAgICAgbG9naW5Qcm92aWRlcjogcGFyYW1zWzBdXG4gICAgICAgICAgfSlcbiAgICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcHJvbWlzZS9uby1jYWxsYmFjay1pbi1wcm9taXNlXG4gICAgICAgICAgLnRoZW4ocmVzID0+IGNiKG51bGwsIHJlcykpXG4gICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByb21pc2Uvbm8tY2FsbGJhY2staW4tcHJvbWlzZVxuICAgICAgICAgIC5jYXRjaChlcnIgPT4gY2IoZXJyKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG9yaWdpbmFsTWV0aG9kLmFwcGx5KHRoaXMsIFtyZXF1ZXN0LCBjYl0pO1xuICAgICAgfTtcbiAgICB9O1xuICAgIC8vIERldGVjdHMgY2FsbCB0byBzb2xhbmFfcmVxdWVzdEFjY291bnRzIGluIHJlcXVlc3QgJiBzZW5kQXN5bmMgYW5kIHBhc3NlcyB0byBsb2dpblxuICAgIGRldGVjdEFjY291bnRSZXF1ZXN0UHJvdG90eXBlTW9kaWZpZXIoXCJyZXF1ZXN0XCIpO1xuICAgIGRldGVjdEFjY291bnRSZXF1ZXN0UHJvdG90eXBlTW9kaWZpZXIoXCJzZW5kQXN5bmNcIik7XG4gICAgZGV0ZWN0QWNjb3VudFJlcXVlc3RQcm90b3R5cGVNb2RpZmllcihcInNlbmRcIik7XG4gICAgY29uc3QgcHJveGllZEluUGFnZVByb3ZpZGVyID0gbmV3IFByb3h5KGluUGFnZVByb3ZpZGVyLCB7XG4gICAgICAvLyBzdHJhaWdodCB1cCBsaWUgdGhhdCB3ZSBkZWxldGVkIHRoZSBwcm9wZXJ0eSBzbyB0aGF0IGl0IGRvZXNuJ3RcbiAgICAgIC8vIHRocm93IGFuIGVycm9yIGluIHN0cmljdCBtb2RlXG4gICAgICBkZWxldGVQcm9wZXJ0eTogKCkgPT4gdHJ1ZVxuICAgIH0pO1xuICAgIGNvbnN0IHByb3hpZWRDb21tdW5pY2F0aW9uUHJvdmlkZXIgPSBuZXcgUHJveHkoY29tbXVuaWNhdGlvblByb3ZpZGVyLCB7XG4gICAgICAvLyBzdHJhaWdodCB1cCBsaWUgdGhhdCB3ZSBkZWxldGVkIHRoZSBwcm9wZXJ0eSBzbyB0aGF0IGl0IGRvZXNuJ3RcbiAgICAgIC8vIHRocm93IGFuIGVycm9yIGluIHN0cmljdCBtb2RlXG4gICAgICBkZWxldGVQcm9wZXJ0eTogKCkgPT4gdHJ1ZVxuICAgIH0pO1xuICAgIHRoaXMucHJvdmlkZXIgPSBwcm94aWVkSW5QYWdlUHJvdmlkZXI7XG4gICAgdGhpcy5jb21tdW5pY2F0aW9uUHJvdmlkZXIgPSBwcm94aWVkQ29tbXVuaWNhdGlvblByb3ZpZGVyO1xuICAgIGF3YWl0IFByb21pc2UuYWxsKFtpblBhZ2VQcm92aWRlci5faW5pdGlhbGl6ZVN0YXRlKCksIGNvbW11bmljYXRpb25Qcm92aWRlci5faW5pdGlhbGl6ZVN0YXRlKF9vYmplY3RTcHJlYWQoX29iamVjdFNwcmVhZCh7fSwgcHJvdmlkZXJQYXJhbXMpLCB7fSwge1xuICAgICAgZGFwcFN0b3JhZ2VLZXk6IHRoaXMuZGFwcFN0b3JhZ2VLZXksXG4gICAgICB0b3J1c0FsZXJ0Q29udGFpbmVyOiB0aGlzLnRvcnVzQWxlcnRDb250YWluZXIsXG4gICAgICB0b3J1c0lmcmFtZTogdGhpcy50b3J1c0lmcmFtZVxuICAgIH0pKV0pO1xuICAgIGxvZy5kZWJ1ZyhcIlRvcnVzIC0gaW5qZWN0ZWQgcHJvdmlkZXJcIik7XG4gIH1cbn1cblxuZXhwb3J0IHsgQlVUVE9OX1BPU0lUSU9OLCBMT0dJTl9QUk9WSURFUiwgUEFZTUVOVF9QUk9WSURFUiwgVE9SVVNfQlVJTERfRU5WLCBUb3J1c0luUGFnZVByb3ZpZGVyLCBUb3J1cyBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1zb2xhbmFFbWJlZC5lc20uanMubWFwXG4iXSwibmFtZXMiOlsiX2RlZmluZVByb3BlcnR5IiwiUHVibGljS2V5IiwiY3JlYXRlTG9nZ2VyTWlkZGxld2FyZSIsIkNPTU1VTklDQVRJT05fSlJQQ19NRVRIT0RTIiwiQ09NTVVOSUNBVElPTl9OT1RJRklDQVRJT05TIiwiUFJPVklERVJfSlJQQ19NRVRIT0RTIiwiUFJPVklERVJfTk9USUZJQ0FUSU9OUyIsInNldEFQSUtleSIsIlNhZmVFdmVudEVtaXR0ZXIiLCJPYmplY3RNdWx0aXBsZXgiLCJjcmVhdGVTdHJlYW1NaWRkbGV3YXJlIiwiSlJQQ0VuZ2luZSIsImNyZWF0ZUlkUmVtYXBNaWRkbGV3YXJlIiwiZ2V0UnBjUHJvbWlzZUNhbGxiYWNrIiwiQmFzZVBvc3RNZXNzYWdlU3RyZWFtIiwiZXRoRXJyb3JzIiwiRXRoZXJldW1ScGNFcnJvciIsImR1cGxleCIsInB1bXAiLCJsb2dsZXZlbCIsImRlcXVhbCIsInZlcnNpb24iLCJtZXNzYWdlcyIsImVycm9ycyIsImRpc2Nvbm5lY3RlZCIsInBlcm1hbmVudGx5RGlzY29ubmVjdGVkIiwidW5zdXBwb3J0ZWRTeW5jIiwibWV0aG9kIiwiaW52YWxpZER1cGxleFN0cmVhbSIsImludmFsaWRPcHRpb25zIiwibWF4RXZlbnRMaXN0ZW5lcnMiLCJpbnZhbGlkUmVxdWVzdEFyZ3MiLCJpbnZhbGlkUmVxdWVzdE1ldGhvZCIsImludmFsaWRSZXF1ZXN0UGFyYW1zIiwiaW52YWxpZExvZ2dlck9iamVjdCIsImludmFsaWRMb2dnZXJNZXRob2QiLCJpbmZvIiwiY29ubmVjdGVkIiwiY2hhaW5JZCIsIndhcm5pbmdzIiwiUEFZTUVOVF9QUk9WSURFUiIsIk1PT05QQVkiLCJXWVJFIiwiUkFNUE5FVFdPUksiLCJYQU5QT09MIiwiTUVSQ1VSWU8iLCJUUkFOU0FLIiwiVE9SVVNfQlVJTERfRU5WIiwiUFJPRFVDVElPTiIsIkRFVkVMT1BNRU5UIiwiVEVTVElORyIsIkJVVFRPTl9QT1NJVElPTiIsIkJPVFRPTV9MRUZUIiwiVE9QX0xFRlQiLCJCT1RUT01fUklHSFQiLCJUT1BfUklHSFQiLCJMT0dJTl9QUk9WSURFUiIsIkdPT0dMRSIsIkZBQ0VCT09LIiwiUkVERElUIiwiRElTQ09SRCIsIlRXSVRDSCIsIkFQUExFIiwiTElORSIsIkdJVEhVQiIsIktBS0FPIiwiTElOS0VESU4iLCJUV0lUVEVSIiwiV0VJQk8iLCJXRUNIQVQiLCJFTUFJTF9QQVNTV09SRExFU1MiLCJ0cmFuc2xhdGlvbnMiLCJlbiIsImVtYmVkIiwiY29udGludWUiLCJhY3Rpb25SZXF1aXJlZCIsInBlbmRpbmdBY3Rpb24iLCJjb29raWVzUmVxdWlyZWQiLCJlbmFibGVDb29raWVzIiwiY2xpY2tIZXJlIiwiZGUiLCJqYSIsImtvIiwiemgiLCJjb25maWd1cmF0aW9uIiwic3VwcG9ydGVkVmVyaWZpZXJMaXN0IiwiYXBpIiwicHJvZFRvcnVzVXJsIiwibG9jYWxTdG9yYWdlS2V5UHJlZml4IiwibG9nIiwiZ2V0TG9nZ2VyIiwiY3JlYXRlRXJyb3JNaWRkbGV3YXJlIiwicmVxIiwicmVzIiwibmV4dCIsImVycm9yIiwicnBjIiwiaW52YWxpZFJlcXVlc3QiLCJtZXNzYWdlIiwiZGF0YSIsImRvbmUiLCJsb2dTdHJlYW1EaXNjb25uZWN0V2FybmluZyIsInJlbW90ZUxhYmVsIiwiZW1pdHRlciIsIndhcm5pbmdNc2ciLCJzdGFjayIsIndhcm4iLCJsaXN0ZW5lckNvdW50IiwiZW1pdCIsImdldFdpbmRvd0lkIiwiTWF0aCIsInJhbmRvbSIsInRvU3RyaW5nIiwic2xpY2UiLCJnZXRUb3J1c1VybCIsImJ1aWxkRW52IiwidG9ydXNVcmwiLCJsb2dMZXZlbCIsImdldFVzZXJMYW5ndWFnZSIsInVzZXJMYW5ndWFnZSIsIndpbmRvdyIsIm5hdmlnYXRvciIsImxhbmd1YWdlIiwidXNlckxhbmd1YWdlcyIsInNwbGl0IiwiT2JqZWN0IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiRkVBVFVSRVNfUFJPVklERVJfQ0hBTkdFX1dJTkRPVyIsImhlaWdodCIsIndpZHRoIiwiRkVBVFVSRVNfREVGQVVMVF9XQUxMRVRfV0lORE9XIiwiRkVBVFVSRVNfREVGQVVMVF9QT1BVUF9XSU5ET1ciLCJGRUFUVVJFU19DT05GSVJNX1dJTkRPVyIsInN0b3JhZ2VBdmFpbGFibGUiLCJ0eXBlIiwic3RvcmFnZSIsIngiLCJzZXRJdGVtIiwicmVtb3ZlSXRlbSIsImUiLCJjb2RlIiwibmFtZSIsImxlbmd0aCIsImdldFBvcHVwRmVhdHVyZXMiLCJfcmVmIiwidyIsImgiLCJkdWFsU2NyZWVuTGVmdCIsInNjcmVlbkxlZnQiLCJ1bmRlZmluZWQiLCJzY3JlZW5YIiwiZHVhbFNjcmVlblRvcCIsInNjcmVlblRvcCIsInNjcmVlblkiLCJpbm5lcldpZHRoIiwiZG9jdW1lbnQiLCJkb2N1bWVudEVsZW1lbnQiLCJjbGllbnRXaWR0aCIsInNjcmVlbiIsImlubmVySGVpZ2h0IiwiY2xpZW50SGVpZ2h0Iiwic3lzdGVtWm9vbSIsImxlZnQiLCJhYnMiLCJ0b3AiLCJmZWF0dXJlcyIsIkJhc2VQcm92aWRlciIsImNvbnN0cnVjdG9yIiwiY29ubmVjdGlvblN0cmVhbSIsImpzb25ScGNTdHJlYW1OYW1lIiwiRXJyb3IiLCJpc1RvcnVzIiwic2V0TWF4TGlzdGVuZXJzIiwiX2hhbmRsZUNvbm5lY3QiLCJiaW5kIiwiX2hhbmRsZURpc2Nvbm5lY3QiLCJfaGFuZGxlU3RyZWFtRGlzY29ubmVjdCIsIl9ycGNSZXF1ZXN0IiwiX2luaXRpYWxpemVTdGF0ZSIsInJlcXVlc3QiLCJzZW5kQXN5bmMiLCJtdXgiLCJpZ25vcmVTdHJlYW0iLCJqc29uUnBjQ29ubmVjdGlvbiIsInN0cmVhbSIsImNyZWF0ZVN0cmVhbSIsInJwY0VuZ2luZSIsInB1c2giLCJvcmlnaW4iLCJsb2NhdGlvbiIsIm1pZGRsZXdhcmUiLCJfcnBjRW5naW5lIiwianNvblJwY0Nvbm5lY3Rpb25FdmVudHMiLCJldmVudHMiLCJhcmdzIiwiQXJyYXkiLCJpc0FycmF5IiwicGFyYW1zIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJzZW5kIiwicGF5bG9hZCIsImNhbGxiYWNrIiwic3RyZWFtTmFtZSIsImhhbmRsZUV2ZW50IiwiaGFuZGxlIiwiZXZlbnROYW1lIiwiaGFuZGxlciIsIl9sZW4iLCJhcmd1bWVudHMiLCJoYW5kbGVyQXJncyIsIl9rZXkiLCJoYW5kbGVyV3JhcHBlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZG9jdW1lbnRSZWFkeSIsInJlYWR5U3RhdGUiLCJodG1sVG9FbGVtZW50IiwiaHRtbCIsInRlbXBsYXRlIiwiY3JlYXRlRWxlbWVudCIsInRyaW1tZWRIdG1sIiwidHJpbSIsImlubmVySFRNTCIsImNvbnRlbnQiLCJmaXJzdENoaWxkIiwiaXNMZWdhY3lUcmFuc2FjdGlvbkluc3RhbmNlIiwidHJhbnNhY3Rpb24iLCJQb3B1cEhhbmRsZXIiLCJ1cmwiLCJ0YXJnZXQiLCJ3aW5kb3dUaW1lciIsImlDbG9zZWRXaW5kb3ciLCJfc2V0dXBUaW1lciIsIk51bWJlciIsInNldEludGVydmFsIiwiY2xvc2VkIiwiY2xlYXJJbnRlcnZhbCIsIm9wZW4iLCJocmVmIiwiZm9jdXMiLCJjbG9zZSIsInJlZGlyZWN0IiwibG9jYXRpb25SZXBsYWNlT25SZWRpcmVjdCIsInJlcGxhY2UiLCJvd25LZXlzJDIiLCJvYmplY3QiLCJlbnVtZXJhYmxlT25seSIsImtleXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZW51bWVyYWJsZSIsImFwcGx5IiwiX29iamVjdFNwcmVhZCQyIiwiaSIsInNvdXJjZSIsImZvckVhY2giLCJrZXkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlZmluZVByb3BlcnR5IiwiVG9ydXNDb21tdW5pY2F0aW9uUHJvdmlkZXIiLCJfc3RhdGUiLCJfZGVmYXVsdFN0YXRlIiwiZGFwcFN0b3JhZ2VLZXkiLCJsYW5ndWFnZVRyYW5zbGF0aW9ucyIsImVtYmVkVHJhbnNsYXRpb25zIiwid2luZG93UmVmcyIsIm9uIiwiaXNDb25uZWN0ZWQiLCJub3RpZmljYXRpb25IYW5kbGVyIiwiSUZSQU1FX1NUQVRVUyIsImlzRnVsbFNjcmVlbiIsInJpZCIsIl9kaXNwbGF5SWZyYW1lIiwiaXNGdWxsIiwiQ1JFQVRFX1dJTkRPVyIsIndpbmRvd0lkIiwiX2NyZWF0ZVBvcHVwQmxvY2tBbGVydCIsIkNMT1NFX1dJTkRPVyIsIl9oYW5kbGVDbG9zZVdpbmRvdyIsIlVTRVJfTE9HR0VEX0lOIiwiY3VycmVudExvZ2luUHJvdmlkZXIiLCJpc0xvZ2dlZEluIiwiVVNFUl9MT0dHRURfT1VUIiwiaXNJRnJhbWVGdWxsU2NyZWVuIiwidG9ydXNBbGVydENvbnRhaW5lciIsInRvcnVzSWZyYW1lIiwiR0VUX1BST1ZJREVSX1NUQVRFIiwiaW5pdGlhbGl6ZWQiLCJfaGFuZGxlV2luZG93IiwiZmluYWxVcmwiLCJVUkwiLCJoYXNoIiwiaGFuZGxlZFdpbmRvdyIsIk9QRU5FRF9XSU5ET1ciLCJvbmNlIiwiQ0xPU0VEX1dJTkRPVyIsInN0eWxlIiwiZGlzcGxheSIsInRvcnVzV2lkZ2V0VmlzaWJpbGl0eSIsImJ1dHRvblBvc2l0aW9uIiwicmlnaHQiLCJib3R0b20iLCJhc3NpZ24iLCJoaWRlVG9ydXNCdXR0b24iLCJzaG93VG9ydXNCdXR0b24iLCJjYiIsIl9wYXlsb2FkIiwianNvbnJwYyIsInRyeVdpbmRvd0hhbmRsZSIsImRlYnVnIiwiaXNSZWNvdmVyYWJsZSIsImVycm9yTWVzc2FnZSIsImlzUGVybWFuZW50bHlEaXNjb25uZWN0ZWQiLCJsb2dvVXJsIiwiZ2V0TG9nb1VybCIsInRvcnVzQWxlcnQiLCJzdWNjZXNzQWxlcnQiLCJidG5Db250YWluZXIiLCJhcHBlbmRDaGlsZCIsImJpbmRPbkxvYWQiLCJyZW1vdmUiLCJjaGlsZHJlbiIsImF0dGFjaE9uTG9hZCIsImhhc0VtaXR0ZWRDb25uZWN0aW9uIiwib3duS2V5cyQxIiwiX29iamVjdFNwcmVhZCQxIiwiVG9ydXNJblBhZ2VQcm92aWRlciIsInNlbGVjdGVkQWRkcmVzcyIsIl9oYW5kbGVBY2NvdW50c0NoYW5nZWQiLCJfaGFuZGxlQ2hhaW5DaGFuZ2VkIiwiX2hhbmRsZVVubG9ja1N0YXRlQ2hhbmdlZCIsImpzb25ScGNOb3RpZmljYXRpb25IYW5kbGVyIiwiQUNDT1VOVFNfQ0hBTkdFRCIsIlVOTE9DS19TVEFURV9DSEFOR0VEIiwiQ0hBSU5fQ0hBTkdFRCIsImFjY291bnRzIiwiaXNVbmxvY2tlZCIsImlzSW50ZXJuYWwiLCJlcnIiLCJyZXN1bHQiLCJpc0V0aEFjY291bnRzIiwiZmluYWxBY2NvdW50cyIsImFjY291bnQiLCJpbWdFeGlzdHMiLCJpbWciLCJvbmxvYWQiLCJvbmVycm9yIiwic3JjIiwiZ2V0U2l0ZU5hbWUiLCJzaXRlTmFtZSIsInF1ZXJ5U2VsZWN0b3IiLCJtZXRhVGl0bGUiLCJ0aXRsZSIsImhvc3RuYW1lIiwiZ2V0U2l0ZUljb24iLCJpY29uIiwiZnJvbSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmaW5kIiwiX2ljb24iLCJCb29sZWFuIiwiZ2V0U2l0ZU1ldGFkYXRhIiwib3duS2V5cyIsIl9vYmplY3RTcHJlYWQiLCJQUk9WSURFUl9VTlNBRkVfTUVUSE9EUyIsIkNPTU1VTklDQVRJT05fVU5TQUZFX01FVEhPRFMiLCJTRVRfUFJPVklERVIiLCJpc0xvY2FsU3RvcmFnZUF2YWlsYWJsZSIsInByZUxvYWRJZnJhbWUiLCJ0b3J1c0lmcmFtZUh0bWwiLCJjcm9zc09yaWdpbiIsInJlbCIsInJlbExpc3QiLCJzdXBwb3J0cyIsImhlYWQiLCJUb3J1cyIsIm1vZGFsWkluZGV4IiwiaXNJbml0aWFsaXplZCIsInJlcXVlc3RlZExvZ2luUHJvdmlkZXIiLCJhbGVydFpJbmRleCIsImNvbW11bmljYXRpb25Qcm92aWRlciIsImluaXQiLCJlbmFibGVMb2dnaW5nIiwibmV0d29yayIsInVzZUxvY2FsU3RvcmFnZSIsImFwaUtleSIsImV4dHJhUGFyYW1zIiwid2hpdGVMYWJlbCIsImVuYWJsZUFsbCIsInNldERlZmF1bHRMZXZlbCIsImRpc2FibGVBbGwiLCJoYW5kbGVEYXBwU3RvcmFnZUtleSIsInRvcnVzSWZyYW1lVXJsIiwicGF0aG5hbWUiLCJlbmRzV2l0aCIsImhhc2hQYXJhbXMiLCJVUkxTZWFyY2hQYXJhbXMiLCJhcHBlbmQiLCJzdHlsZUxpbmsiLCJoYW5kbGVTZXR1cCIsImJvZHkiLCJkYXBwTWV0YWRhdGEiLCJjb250ZW50V2luZG93IiwicG9zdE1lc3NhZ2UiLCJfc2V0dXBXZWIzIiwidG9wdXBIaWRlIiwiaXNUb3B1cEhpZGRlbiIsInRvcnVzIiwibG9naW4iLCJsb2dpblByb3ZpZGVyIiwicHJvdmlkZXIiLCJsb2dpbl9oaW50IiwibG9naW5XaXRoUHJpdmF0ZUtleSIsImxvZ2luUGFyYW1zIiwicHJpdmF0ZUtleSIsInVzZXJJbmZvIiwic3VjY2VzcyIsImxvZ291dCIsIkxPR09VVCIsImNsZWFuVXAiLCJjbGVhckluaXQiLCJpc0VsZW1lbnQiLCJlbGVtZW50IiwiRWxlbWVudCIsIkRvY3VtZW50IiwiY29udGFpbnMiLCJzZXRQcm92aWRlciIsInNob3dXYWxsZXQiLCJwYXRoIiwiaW5zdGFuY2VJZCIsIldBTExFVF9JTlNUQU5DRV9JRCIsImZpbmFsUGF0aCIsInNlYXJjaFBhcmFtcyIsIndhbGxldFdpbmRvdyIsImdldFVzZXJJbmZvIiwidXNlckluZm9SZXNwb25zZSIsIlVTRVJfSU5GTyIsImluaXRpYXRlVG9wdXAiLCJ0b3B1cFJlc3BvbnNlIiwiVE9QVVAiLCJnZXRBY2NvdW50cyIsInJlc3BvbnNlIiwic2VuZFRyYW5zYWN0aW9uIiwiaXNMZWdhY3lUcmFuc2FjdGlvbiIsInNlcmlhbGl6ZSIsInJlcXVpcmVBbGxTaWduYXR1cmVzIiwiQnVmZmVyIiwic2lnbkFuZFNlbmRUcmFuc2FjdGlvbiIsIm9wdGlvbnMiLCJzaWduYXR1cmUiLCJzaWduVHJhbnNhY3Rpb24iLCJzZXJpYWxpemVNZXNzYWdlIiwibWVzc2FnZU9ubHkiLCJwYXJzZWQiLCJKU09OIiwicGFyc2UiLCJwdWJsaWNLZXkiLCJhZGRTaWduYXR1cmUiLCJzaWduQWxsVHJhbnNhY3Rpb25zIiwidHJhbnNhY3Rpb25zIiwiZW5jb2RlZE1lc3NhZ2UiLCJtYXAiLCJ0eCIsInJlc3BvbnNlcyIsInNpZ25hdHVyZXMiLCJpdGVtIiwiaWR4Iiwic2lnbk1lc3NhZ2UiLCJnZXRHYXNsZXNzUHVibGljS2V5IiwibG9jYWxTdG9yYWdlS2V5Iiwic3RvcmVkS2V5IiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImdlbmVyYXRlZEtleSIsInByb3ZpZGVyUGFyYW1zIiwicHJvdmlkZXJTdHJlYW0iLCJ0YXJnZXRXaW5kb3ciLCJjb21tdW5pY2F0aW9uU3RyZWFtIiwiaW5QYWdlUHJvdmlkZXIiLCJpbmNsdWRlcyIsImRldGVjdEFjY291bnRSZXF1ZXN0UHJvdG90eXBlTW9kaWZpZXIiLCJtIiwib3JpZ2luYWxNZXRob2QiLCJzZWxmIiwicHJvdmlkZXJGdW5jIiwidGhlbiIsImNhdGNoIiwicHJveGllZEluUGFnZVByb3ZpZGVyIiwiUHJveHkiLCJkZWxldGVQcm9wZXJ0eSIsInByb3hpZWRDb21tdW5pY2F0aW9uUHJvdmlkZXIiLCJhbGwiLCJkZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@toruslabs/solana-embed/dist/solanaEmbed.esm.js\n");

/***/ })

};
;