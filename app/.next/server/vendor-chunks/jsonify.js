"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsonify";
exports.ids = ["vendor-chunks/jsonify"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsonify/index.js":
/*!***************************************!*\
  !*** ./node_modules/jsonify/index.js ***!
  \***************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nexports.parse = __webpack_require__(/*! ./lib/parse */ \"(ssr)/./node_modules/jsonify/lib/parse.js\");\nexports.stringify = __webpack_require__(/*! ./lib/stringify */ \"(ssr)/./node_modules/jsonify/lib/stringify.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanNvbmlmeS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxtR0FBd0I7QUFDeEJBLCtHQUE0QiIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9qc29uaWZ5L2luZGV4LmpzP2M3ZmQiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5leHBvcnRzLnBhcnNlID0gcmVxdWlyZSgnLi9saWIvcGFyc2UnKTtcbmV4cG9ydHMuc3RyaW5naWZ5ID0gcmVxdWlyZSgnLi9saWIvc3RyaW5naWZ5Jyk7XG4iXSwibmFtZXMiOlsiZXhwb3J0cyIsInBhcnNlIiwicmVxdWlyZSIsInN0cmluZ2lmeSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonify/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonify/lib/parse.js":
/*!*******************************************!*\
  !*** ./node_modules/jsonify/lib/parse.js ***!
  \*******************************************/
/***/ ((module) => {

eval("\nvar at; // The index of the current character\nvar ch; // The current character\nvar escapee = {\n    '\"': '\"',\n    \"\\\\\": \"\\\\\",\n    \"/\": \"/\",\n    b: \"\\b\",\n    f: \"\\f\",\n    n: \"\\n\",\n    r: \"\\r\",\n    t: \"\t\"\n};\nvar text;\n// Call error when something is wrong.\nfunction error(m) {\n    throw {\n        name: \"SyntaxError\",\n        message: m,\n        at: at,\n        text: text\n    };\n}\nfunction next(c) {\n    // If a c parameter is provided, verify that it matches the current character.\n    if (c && c !== ch) {\n        error(\"Expected '\" + c + \"' instead of '\" + ch + \"'\");\n    }\n    // Get the next character. When there are no more characters, return the empty string.\n    ch = text.charAt(at);\n    at += 1;\n    return ch;\n}\nfunction number() {\n    // Parse a number value.\n    var num;\n    var str = \"\";\n    if (ch === \"-\") {\n        str = \"-\";\n        next(\"-\");\n    }\n    while(ch >= \"0\" && ch <= \"9\"){\n        str += ch;\n        next();\n    }\n    if (ch === \".\") {\n        str += \".\";\n        while(next() && ch >= \"0\" && ch <= \"9\"){\n            str += ch;\n        }\n    }\n    if (ch === \"e\" || ch === \"E\") {\n        str += ch;\n        next();\n        if (ch === \"-\" || ch === \"+\") {\n            str += ch;\n            next();\n        }\n        while(ch >= \"0\" && ch <= \"9\"){\n            str += ch;\n            next();\n        }\n    }\n    num = Number(str);\n    if (!isFinite(num)) {\n        error(\"Bad number\");\n    }\n    return num;\n}\nfunction string() {\n    // Parse a string value.\n    var hex;\n    var i;\n    var str = \"\";\n    var uffff;\n    // When parsing for string values, we must look for \" and \\ characters.\n    if (ch === '\"') {\n        while(next()){\n            if (ch === '\"') {\n                next();\n                return str;\n            } else if (ch === \"\\\\\") {\n                next();\n                if (ch === \"u\") {\n                    uffff = 0;\n                    for(i = 0; i < 4; i += 1){\n                        hex = parseInt(next(), 16);\n                        if (!isFinite(hex)) {\n                            break;\n                        }\n                        uffff = uffff * 16 + hex;\n                    }\n                    str += String.fromCharCode(uffff);\n                } else if (typeof escapee[ch] === \"string\") {\n                    str += escapee[ch];\n                } else {\n                    break;\n                }\n            } else {\n                str += ch;\n            }\n        }\n    }\n    error(\"Bad string\");\n}\n// Skip whitespace.\nfunction white() {\n    while(ch && ch <= \" \"){\n        next();\n    }\n}\n// true, false, or null.\nfunction word() {\n    switch(ch){\n        case \"t\":\n            next(\"t\");\n            next(\"r\");\n            next(\"u\");\n            next(\"e\");\n            return true;\n        case \"f\":\n            next(\"f\");\n            next(\"a\");\n            next(\"l\");\n            next(\"s\");\n            next(\"e\");\n            return false;\n        case \"n\":\n            next(\"n\");\n            next(\"u\");\n            next(\"l\");\n            next(\"l\");\n            return null;\n        default:\n            error(\"Unexpected '\" + ch + \"'\");\n    }\n}\n// Parse an array value.\nfunction array() {\n    var arr = [];\n    if (ch === \"[\") {\n        next(\"[\");\n        white();\n        if (ch === \"]\") {\n            next(\"]\");\n            return arr; // empty array\n        }\n        while(ch){\n            arr.push(value()); // eslint-disable-line no-use-before-define\n            white();\n            if (ch === \"]\") {\n                next(\"]\");\n                return arr;\n            }\n            next(\",\");\n            white();\n        }\n    }\n    error(\"Bad array\");\n}\n// Parse an object value.\nfunction object() {\n    var key;\n    var obj = {};\n    if (ch === \"{\") {\n        next(\"{\");\n        white();\n        if (ch === \"}\") {\n            next(\"}\");\n            return obj; // empty object\n        }\n        while(ch){\n            key = string();\n            white();\n            next(\":\");\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                error('Duplicate key \"' + key + '\"');\n            }\n            obj[key] = value(); // eslint-disable-line no-use-before-define\n            white();\n            if (ch === \"}\") {\n                next(\"}\");\n                return obj;\n            }\n            next(\",\");\n            white();\n        }\n    }\n    error(\"Bad object\");\n}\n// Parse a JSON value. It could be an object, an array, a string, a number, or a word.\nfunction value() {\n    white();\n    switch(ch){\n        case \"{\":\n            return object();\n        case \"[\":\n            return array();\n        case '\"':\n            return string();\n        case \"-\":\n            return number();\n        default:\n            return ch >= \"0\" && ch <= \"9\" ? number() : word();\n    }\n}\n// Return the json_parse function. It will have access to all of the above functions and variables.\nmodule.exports = function(source, reviver) {\n    var result;\n    text = source;\n    at = 0;\n    ch = \" \";\n    result = value();\n    white();\n    if (ch) {\n        error(\"Syntax error\");\n    }\n    // If there is a reviver function, we recursively walk the new structure,\n    // passing each name/value pair to the reviver function for possible\n    // transformation, starting with a temporary root object that holds the result\n    // in an empty key. If there is not a reviver function, we simply return the\n    // result.\n    return typeof reviver === \"function\" ? function walk(holder, key) {\n        var k;\n        var v;\n        var val = holder[key];\n        if (val && typeof val === \"object\") {\n            for(k in value){\n                if (Object.prototype.hasOwnProperty.call(val, k)) {\n                    v = walk(val, k);\n                    if (typeof v === \"undefined\") {\n                        delete val[k];\n                    } else {\n                        val[k] = v;\n                    }\n                }\n            }\n        }\n        return reviver.call(holder, key, val);\n    }({\n        \"\": result\n    }, \"\") : result;\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonify/lib/parse.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsonify/lib/stringify.js":
/*!***********************************************!*\
  !*** ./node_modules/jsonify/lib/stringify.js ***!
  \***********************************************/
/***/ ((module) => {

eval("\nvar escapable = /[\\\\\"\\x00-\\x1f\\x7f-\\x9f\\u00ad\\u0600-\\u0604\\u070f\\u17b4\\u17b5\\u200c-\\u200f\\u2028-\\u202f\\u2060-\\u206f\\ufeff\\ufff0-\\uffff]/g;\nvar gap;\nvar indent;\nvar meta = {\n    \"\\b\": \"\\\\b\",\n    \"\t\": \"\\\\t\",\n    \"\\n\": \"\\\\n\",\n    \"\\f\": \"\\\\f\",\n    \"\\r\": \"\\\\r\",\n    '\"': '\\\\\"',\n    \"\\\\\": \"\\\\\\\\\"\n};\nvar rep;\nfunction quote(string) {\n    // If the string contains no control characters, no quote characters, and no\n    // backslash characters, then we can safely slap some quotes around it.\n    // Otherwise we must also replace the offending characters with safe escape sequences.\n    escapable.lastIndex = 0;\n    return escapable.test(string) ? '\"' + string.replace(escapable, function(a) {\n        var c = meta[a];\n        return typeof c === \"string\" ? c : \"\\\\u\" + (\"0000\" + a.charCodeAt(0).toString(16)).slice(-4);\n    }) + '\"' : '\"' + string + '\"';\n}\nfunction str(key, holder) {\n    // Produce a string from holder[key].\n    var i; // The loop counter.\n    var k; // The member key.\n    var v; // The member value.\n    var length;\n    var mind = gap;\n    var partial;\n    var value = holder[key];\n    // If the value has a toJSON method, call it to obtain a replacement value.\n    if (value && typeof value === \"object\" && typeof value.toJSON === \"function\") {\n        value = value.toJSON(key);\n    }\n    // If we were called with a replacer function, then call the replacer to obtain a replacement value.\n    if (typeof rep === \"function\") {\n        value = rep.call(holder, key, value);\n    }\n    // What happens next depends on the value's type.\n    switch(typeof value){\n        case \"string\":\n            return quote(value);\n        case \"number\":\n            // JSON numbers must be finite. Encode non-finite numbers as null.\n            return isFinite(value) ? String(value) : \"null\";\n        case \"boolean\":\n        case \"null\":\n            // If the value is a boolean or null, convert it to a string. Note:\n            // typeof null does not produce 'null'. The case is included here in\n            // the remote chance that this gets fixed someday.\n            return String(value);\n        case \"object\":\n            if (!value) {\n                return \"null\";\n            }\n            gap += indent;\n            partial = [];\n            // Array.isArray\n            if (Object.prototype.toString.apply(value) === \"[object Array]\") {\n                length = value.length;\n                for(i = 0; i < length; i += 1){\n                    partial[i] = str(i, value) || \"null\";\n                }\n                // Join all of the elements together, separated with commas, and wrap them in brackets.\n                v = partial.length === 0 ? \"[]\" : gap ? \"[\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"]\" : \"[\" + partial.join(\",\") + \"]\";\n                gap = mind;\n                return v;\n            }\n            // If the replacer is an array, use it to select the members to be stringified.\n            if (rep && typeof rep === \"object\") {\n                length = rep.length;\n                for(i = 0; i < length; i += 1){\n                    k = rep[i];\n                    if (typeof k === \"string\") {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? \": \" : \":\") + v);\n                        }\n                    }\n                }\n            } else {\n                // Otherwise, iterate through all of the keys in the object.\n                for(k in value){\n                    if (Object.prototype.hasOwnProperty.call(value, k)) {\n                        v = str(k, value);\n                        if (v) {\n                            partial.push(quote(k) + (gap ? \": \" : \":\") + v);\n                        }\n                    }\n                }\n            }\n            // Join all of the member texts together, separated with commas, and wrap them in braces.\n            v = partial.length === 0 ? \"{}\" : gap ? \"{\\n\" + gap + partial.join(\",\\n\" + gap) + \"\\n\" + mind + \"}\" : \"{\" + partial.join(\",\") + \"}\";\n            gap = mind;\n            return v;\n        default:\n    }\n}\nmodule.exports = function(value, replacer, space) {\n    var i;\n    gap = \"\";\n    indent = \"\";\n    // If the space parameter is a number, make an indent string containing that many spaces.\n    if (typeof space === \"number\") {\n        for(i = 0; i < space; i += 1){\n            indent += \" \";\n        }\n    } else if (typeof space === \"string\") {\n        // If the space parameter is a string, it will be used as the indent string.\n        indent = space;\n    }\n    // If there is a replacer, it must be a function or an array. Otherwise, throw an error.\n    rep = replacer;\n    if (replacer && typeof replacer !== \"function\" && (typeof replacer !== \"object\" || typeof replacer.length !== \"number\")) {\n        throw new Error(\"JSON.stringify\");\n    }\n    // Make a fake root object containing our value under the key of ''.\n    // Return the result of stringifying the value.\n    return str(\"\", {\n        \"\": value\n    });\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsonify/lib/stringify.js\n");

/***/ })

};
;