"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@ethereumjs";
exports.ids = ["vendor-chunks/@ethereumjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@ethereumjs/rlp/dist/index.js":
/*!****************************************************!*\
  !*** ./node_modules/@ethereumjs/rlp/dist/index.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RLP = exports.utils = exports.decode = exports.encode = void 0;\n/**\n * RLP Encoding based on https://ethereum.org/en/developers/docs/data-structures-and-encoding/rlp/\n * This function takes in data, converts it to Uint8Array if not,\n * and adds a length for recursion.\n * @param input Will be converted to Uint8Array\n * @returns Uint8Array of encoded data\n **/ function encode(input) {\n    if (Array.isArray(input)) {\n        const output = [];\n        let outputLength = 0;\n        for(let i = 0; i < input.length; i++){\n            const encoded = encode(input[i]);\n            output.push(encoded);\n            outputLength += encoded.length;\n        }\n        return concatBytes(encodeLength(outputLength, 192), ...output);\n    }\n    const inputBuf = toBytes(input);\n    if (inputBuf.length === 1 && inputBuf[0] < 128) {\n        return inputBuf;\n    }\n    return concatBytes(encodeLength(inputBuf.length, 128), inputBuf);\n}\nexports.encode = encode;\n/**\n * Slices a Uint8Array, throws if the slice goes out-of-bounds of the Uint8Array.\n * E.g. `safeSlice(hexToBytes('aa'), 1, 2)` will throw.\n * @param input\n * @param start\n * @param end\n */ function safeSlice(input, start, end) {\n    if (end > input.length) {\n        throw new Error(\"invalid RLP (safeSlice): end slice of Uint8Array out-of-bounds\");\n    }\n    return input.slice(start, end);\n}\n/**\n * Parse integers. Check if there is no leading zeros\n * @param v The value to parse\n */ function decodeLength(v) {\n    if (v[0] === 0) {\n        throw new Error(\"invalid RLP: extra zeros\");\n    }\n    return parseHexByte(bytesToHex(v));\n}\nfunction encodeLength(len, offset) {\n    if (len < 56) {\n        return Uint8Array.from([\n            len + offset\n        ]);\n    }\n    const hexLength = numberToHex(len);\n    const lLength = hexLength.length / 2;\n    const firstByte = numberToHex(offset + 55 + lLength);\n    return Uint8Array.from(hexToBytes(firstByte + hexLength));\n}\nfunction decode(input, stream = false) {\n    if (typeof input === \"undefined\" || input === null || input.length === 0) {\n        return Uint8Array.from([]);\n    }\n    const inputBytes = toBytes(input);\n    const decoded = _decode(inputBytes);\n    if (stream) {\n        return decoded;\n    }\n    if (decoded.remainder.length !== 0) {\n        throw new Error(\"invalid RLP: remainder must be zero\");\n    }\n    return decoded.data;\n}\nexports.decode = decode;\n/** Decode an input with RLP */ function _decode(input) {\n    let length, llength, data, innerRemainder, d;\n    const decoded = [];\n    const firstByte = input[0];\n    if (firstByte <= 0x7f) {\n        // a single byte whose value is in the [0x00, 0x7f] range, that byte is its own RLP encoding.\n        return {\n            data: input.slice(0, 1),\n            remainder: input.slice(1)\n        };\n    } else if (firstByte <= 0xb7) {\n        // string is 0-55 bytes long. A single byte with value 0x80 plus the length of the string followed by the string\n        // The range of the first byte is [0x80, 0xb7]\n        length = firstByte - 0x7f;\n        // set 0x80 null to 0\n        if (firstByte === 0x80) {\n            data = Uint8Array.from([]);\n        } else {\n            data = safeSlice(input, 1, length);\n        }\n        if (length === 2 && data[0] < 0x80) {\n            throw new Error(\"invalid RLP encoding: invalid prefix, single byte < 0x80 are not prefixed\");\n        }\n        return {\n            data,\n            remainder: input.slice(length)\n        };\n    } else if (firstByte <= 0xbf) {\n        // string is greater than 55 bytes long. A single byte with the value (0xb7 plus the length of the length),\n        // followed by the length, followed by the string\n        llength = firstByte - 0xb6;\n        if (input.length - 1 < llength) {\n            throw new Error(\"invalid RLP: not enough bytes for string length\");\n        }\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length <= 55) {\n            throw new Error(\"invalid RLP: expected string length to be greater than 55\");\n        }\n        data = safeSlice(input, llength, length + llength);\n        return {\n            data,\n            remainder: input.slice(length + llength)\n        };\n    } else if (firstByte <= 0xf7) {\n        // a list between 0-55 bytes long\n        length = firstByte - 0xbf;\n        innerRemainder = safeSlice(input, 1, length);\n        while(innerRemainder.length){\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(length)\n        };\n    } else {\n        // a list over 55 bytes long\n        llength = firstByte - 0xf6;\n        length = decodeLength(safeSlice(input, 1, llength));\n        if (length < 56) {\n            throw new Error(\"invalid RLP: encoded list too short\");\n        }\n        const totalLength = llength + length;\n        if (totalLength > input.length) {\n            throw new Error(\"invalid RLP: total length is larger than the data\");\n        }\n        innerRemainder = safeSlice(input, llength, totalLength);\n        while(innerRemainder.length){\n            d = _decode(innerRemainder);\n            decoded.push(d.data);\n            innerRemainder = d.remainder;\n        }\n        return {\n            data: decoded,\n            remainder: input.slice(totalLength)\n        };\n    }\n}\nconst cachedHexes = Array.from({\n    length: 256\n}, (_v, i)=>i.toString(16).padStart(2, \"0\"));\nfunction bytesToHex(uint8a) {\n    // Pre-caching chars with `cachedHexes` speeds this up 6x\n    let hex = \"\";\n    for(let i = 0; i < uint8a.length; i++){\n        hex += cachedHexes[uint8a[i]];\n    }\n    return hex;\n}\nfunction parseHexByte(hexByte) {\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte)) throw new Error(\"Invalid byte sequence\");\n    return byte;\n}\n// Caching slows it down 2-3x\nfunction hexToBytes(hex) {\n    if (typeof hex !== \"string\") {\n        throw new TypeError(\"hexToBytes: expected string, got \" + typeof hex);\n    }\n    if (hex.length % 2) throw new Error(\"hexToBytes: received invalid unpadded hex\");\n    const array = new Uint8Array(hex.length / 2);\n    for(let i = 0; i < array.length; i++){\n        const j = i * 2;\n        array[i] = parseHexByte(hex.slice(j, j + 2));\n    }\n    return array;\n}\n/** Concatenates two Uint8Arrays into one. */ function concatBytes(...arrays) {\n    if (arrays.length === 1) return arrays[0];\n    const length = arrays.reduce((a, arr)=>a + arr.length, 0);\n    const result = new Uint8Array(length);\n    for(let i = 0, pad = 0; i < arrays.length; i++){\n        const arr = arrays[i];\n        result.set(arr, pad);\n        pad += arr.length;\n    }\n    return result;\n}\nfunction utf8ToBytes(utf) {\n    return new TextEncoder().encode(utf);\n}\n/** Transform an integer into its hexadecimal value */ function numberToHex(integer) {\n    if (integer < 0) {\n        throw new Error(\"Invalid integer as argument, must be unsigned!\");\n    }\n    const hex = integer.toString(16);\n    return hex.length % 2 ? `0${hex}` : hex;\n}\n/** Pad a string to be even */ function padToEven(a) {\n    return a.length % 2 ? `0${a}` : a;\n}\n/** Check if a string is prefixed by 0x */ function isHexPrefixed(str) {\n    return str.length >= 2 && str[0] === \"0\" && str[1] === \"x\";\n}\n/** Removes 0x from a given String */ function stripHexPrefix(str) {\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    return isHexPrefixed(str) ? str.slice(2) : str;\n}\n/** Transform anything into a Uint8Array */ function toBytes(v) {\n    if (v instanceof Uint8Array) {\n        return v;\n    }\n    if (typeof v === \"string\") {\n        if (isHexPrefixed(v)) {\n            return hexToBytes(padToEven(stripHexPrefix(v)));\n        }\n        return utf8ToBytes(v);\n    }\n    if (typeof v === \"number\" || typeof v === \"bigint\") {\n        if (!v) {\n            return Uint8Array.from([]);\n        }\n        return hexToBytes(numberToHex(v));\n    }\n    if (v === null || v === undefined) {\n        return Uint8Array.from([]);\n    }\n    throw new Error(\"toBytes: received unsupported type \" + typeof v);\n}\nexports.utils = {\n    bytesToHex,\n    concatBytes,\n    hexToBytes,\n    utf8ToBytes\n};\nexports.RLP = {\n    encode,\n    decode\n}; //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/rlp/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/account.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/account.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.accountBodyToRLP = exports.accountBodyToSlim = exports.accountBodyFromSlim = exports.isZeroAddress = exports.zeroAddress = exports.importPublic = exports.privateToAddress = exports.privateToPublic = exports.publicToAddress = exports.pubToAddress = exports.isValidPublic = exports.isValidPrivate = exports.generateAddress2 = exports.generateAddress = exports.isValidChecksumAddress = exports.toChecksumAddress = exports.isValidAddress = exports.Account = void 0;\nconst rlp_1 = __webpack_require__(/*! @ethereumjs/rlp */ \"(ssr)/./node_modules/@ethereumjs/rlp/dist/index.js\");\nconst keccak_1 = __webpack_require__(/*! ethereum-cryptography/keccak */ \"(ssr)/./node_modules/ethereum-cryptography/keccak.js\");\nconst secp256k1_1 = __webpack_require__(/*! ethereum-cryptography/secp256k1 */ \"(ssr)/./node_modules/ethereum-cryptography/secp256k1.js\");\nconst utils_1 = __webpack_require__(/*! ethereum-cryptography/utils */ \"(ssr)/./node_modules/ethereum-cryptography/utils.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@ethereumjs/util/dist/bytes.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@ethereumjs/util/dist/constants.js\");\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/@ethereumjs/util/dist/helpers.js\");\nconst internal_1 = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/@ethereumjs/util/dist/internal.js\");\nconst _0n = BigInt(0);\nclass Account {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating an Account from varying data types.\n     */ constructor(nonce = _0n, balance = _0n, storageRoot = constants_1.KECCAK256_RLP, codeHash = constants_1.KECCAK256_NULL){\n        this.nonce = nonce;\n        this.balance = balance;\n        this.storageRoot = storageRoot;\n        this.codeHash = codeHash;\n        this._validate();\n    }\n    static fromAccountData(accountData) {\n        const { nonce, balance, storageRoot, codeHash } = accountData;\n        return new Account(nonce !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(nonce)) : undefined, balance !== undefined ? (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(balance)) : undefined, storageRoot !== undefined ? (0, bytes_1.toBuffer)(storageRoot) : undefined, codeHash !== undefined ? (0, bytes_1.toBuffer)(codeHash) : undefined);\n    }\n    static fromRlpSerializedAccount(serialized) {\n        const values = (0, bytes_1.arrToBufArr)(rlp_1.RLP.decode(Uint8Array.from(serialized)));\n        if (!Array.isArray(values)) {\n            throw new Error(\"Invalid serialized account input. Must be array\");\n        }\n        return this.fromValuesArray(values);\n    }\n    static fromValuesArray(values) {\n        const [nonce, balance, storageRoot, codeHash] = values;\n        return new Account((0, bytes_1.bufferToBigInt)(nonce), (0, bytes_1.bufferToBigInt)(balance), storageRoot, codeHash);\n    }\n    _validate() {\n        if (this.nonce < _0n) {\n            throw new Error(\"nonce must be greater than zero\");\n        }\n        if (this.balance < _0n) {\n            throw new Error(\"balance must be greater than zero\");\n        }\n        if (this.storageRoot.length !== 32) {\n            throw new Error(\"storageRoot must have a length of 32\");\n        }\n        if (this.codeHash.length !== 32) {\n            throw new Error(\"codeHash must have a length of 32\");\n        }\n    }\n    /**\n     * Returns a Buffer Array of the raw Buffers for the account, in order.\n     */ raw() {\n        return [\n            (0, bytes_1.bigIntToUnpaddedBuffer)(this.nonce),\n            (0, bytes_1.bigIntToUnpaddedBuffer)(this.balance),\n            this.storageRoot,\n            this.codeHash\n        ];\n    }\n    /**\n     * Returns the RLP serialization of the account as a `Buffer`.\n     */ serialize() {\n        return Buffer.from(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)(this.raw())));\n    }\n    /**\n     * Returns a `Boolean` determining if the account is a contract.\n     */ isContract() {\n        return !this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n    /**\n     * Returns a `Boolean` determining if the account is empty complying to the definition of\n     * account emptiness in [EIP-161](https://eips.ethereum.org/EIPS/eip-161):\n     * \"An account is considered empty when it has no code and zero nonce and zero balance.\"\n     */ isEmpty() {\n        return this.balance === _0n && this.nonce === _0n && this.codeHash.equals(constants_1.KECCAK256_NULL);\n    }\n}\nexports.Account = Account;\n/**\n * Checks if the address is a valid. Accepts checksummed addresses too.\n */ const isValidAddress = function(hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    } catch (e) {\n        return false;\n    }\n    return /^0x[0-9a-fA-F]{40}$/.test(hexAddress);\n};\nexports.isValidAddress = isValidAddress;\n/**\n * Returns a checksummed address.\n *\n * If an eip1191ChainId is provided, the chainId will be included in the checksum calculation. This\n * has the effect of checksummed addresses for one chain having invalid checksums for others.\n * For more details see [EIP-1191](https://eips.ethereum.org/EIPS/eip-1191).\n *\n * WARNING: Checksums with and without the chainId will differ and the EIP-1191 checksum is not\n * backwards compatible to the original widely adopted checksum format standard introduced in\n * [EIP-55](https://eips.ethereum.org/EIPS/eip-55), so this will break in existing applications.\n * Usage of this EIP is therefore discouraged unless you have a very targeted use case.\n */ const toChecksumAddress = function(hexAddress, eip1191ChainId) {\n    (0, helpers_1.assertIsHexString)(hexAddress);\n    const address = (0, internal_1.stripHexPrefix)(hexAddress).toLowerCase();\n    let prefix = \"\";\n    if (eip1191ChainId !== undefined) {\n        const chainId = (0, bytes_1.bufferToBigInt)((0, bytes_1.toBuffer)(eip1191ChainId));\n        prefix = chainId.toString() + \"0x\";\n    }\n    const buf = Buffer.from(prefix + address, \"utf8\");\n    const hash = (0, utils_1.bytesToHex)((0, keccak_1.keccak256)(buf));\n    let ret = \"0x\";\n    for(let i = 0; i < address.length; i++){\n        if (parseInt(hash[i], 16) >= 8) {\n            ret += address[i].toUpperCase();\n        } else {\n            ret += address[i];\n        }\n    }\n    return ret;\n};\nexports.toChecksumAddress = toChecksumAddress;\n/**\n * Checks if the address is a valid checksummed address.\n *\n * See toChecksumAddress' documentation for details about the eip1191ChainId parameter.\n */ const isValidChecksumAddress = function(hexAddress, eip1191ChainId) {\n    return (0, exports.isValidAddress)(hexAddress) && (0, exports.toChecksumAddress)(hexAddress, eip1191ChainId) === hexAddress;\n};\nexports.isValidChecksumAddress = isValidChecksumAddress;\n/**\n * Generates an address of a newly created contract.\n * @param from The address which is creating this new address\n * @param nonce The nonce of the from account\n */ const generateAddress = function(from, nonce) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(nonce);\n    if ((0, bytes_1.bufferToBigInt)(nonce) === BigInt(0)) {\n        // in RLP we want to encode null in the case of zero nonce\n        // read the RLP documentation for an answer if you dare\n        return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([\n            from,\n            null\n        ])))).slice(-20);\n    }\n    // Only take the lower 160bits of the hash\n    return Buffer.from((0, keccak_1.keccak256)(rlp_1.RLP.encode((0, bytes_1.bufArrToArr)([\n        from,\n        nonce\n    ])))).slice(-20);\n};\nexports.generateAddress = generateAddress;\n/**\n * Generates an address for a contract created using CREATE2.\n * @param from The address which is creating this new address\n * @param salt A salt\n * @param initCode The init code of the contract being created\n */ const generateAddress2 = function(from, salt, initCode) {\n    (0, helpers_1.assertIsBuffer)(from);\n    (0, helpers_1.assertIsBuffer)(salt);\n    (0, helpers_1.assertIsBuffer)(initCode);\n    if (from.length !== 20) {\n        throw new Error(\"Expected from to be of length 20\");\n    }\n    if (salt.length !== 32) {\n        throw new Error(\"Expected salt to be of length 32\");\n    }\n    const address = (0, keccak_1.keccak256)(Buffer.concat([\n        Buffer.from(\"ff\", \"hex\"),\n        from,\n        salt,\n        (0, keccak_1.keccak256)(initCode)\n    ]));\n    return (0, bytes_1.toBuffer)(address).slice(-20);\n};\nexports.generateAddress2 = generateAddress2;\n/**\n * Checks if the private key satisfies the rules of the curve secp256k1.\n */ const isValidPrivate = function(privateKey) {\n    return secp256k1_1.secp256k1.utils.isValidPrivateKey(privateKey);\n};\nexports.isValidPrivate = isValidPrivate;\n/**\n * Checks if the public key satisfies the rules of the curve secp256k1\n * and the requirements of Ethereum.\n * @param publicKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ const isValidPublic = function(publicKey, sanitize = false) {\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length === 64) {\n        // Convert to SEC1 for secp256k1\n        // Automatically checks whether point is on curve\n        try {\n            secp256k1_1.secp256k1.ProjectivePoint.fromHex(Buffer.concat([\n                Buffer.from([\n                    4\n                ]),\n                publicKey\n            ]));\n            return true;\n        } catch (e) {\n            return false;\n        }\n    }\n    if (!sanitize) {\n        return false;\n    }\n    try {\n        secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey);\n        return true;\n    } catch (e) {\n        return false;\n    }\n};\nexports.isValidPublic = isValidPublic;\n/**\n * Returns the ethereum address of a given public key.\n * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n * @param sanitize Accept public keys in other formats\n */ const pubToAddress = function(pubKey, sanitize = false) {\n    (0, helpers_1.assertIsBuffer)(pubKey);\n    if (sanitize && pubKey.length !== 64) {\n        pubKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1));\n    }\n    if (pubKey.length !== 64) {\n        throw new Error(\"Expected pubKey to be of length 64\");\n    }\n    // Only take the lower 160bits of the hash\n    return Buffer.from((0, keccak_1.keccak256)(pubKey)).slice(-20);\n};\nexports.pubToAddress = pubToAddress;\nexports.publicToAddress = exports.pubToAddress;\n/**\n * Returns the ethereum public key of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ const privateToPublic = function(privateKey) {\n    (0, helpers_1.assertIsBuffer)(privateKey);\n    // skip the type flag and use the X, Y points\n    return Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromPrivateKey(privateKey).toRawBytes(false).slice(1));\n};\nexports.privateToPublic = privateToPublic;\n/**\n * Returns the ethereum address of a given private key.\n * @param privateKey A private key must be 256 bits wide\n */ const privateToAddress = function(privateKey) {\n    return (0, exports.publicToAddress)((0, exports.privateToPublic)(privateKey));\n};\nexports.privateToAddress = privateToAddress;\n/**\n * Converts a public key to the Ethereum format.\n */ const importPublic = function(publicKey) {\n    (0, helpers_1.assertIsBuffer)(publicKey);\n    if (publicKey.length !== 64) {\n        publicKey = Buffer.from(secp256k1_1.secp256k1.ProjectivePoint.fromHex(publicKey).toRawBytes(false).slice(1));\n    }\n    return publicKey;\n};\nexports.importPublic = importPublic;\n/**\n * Returns the zero address.\n */ const zeroAddress = function() {\n    const addressLength = 20;\n    const addr = (0, bytes_1.zeros)(addressLength);\n    return (0, bytes_1.bufferToHex)(addr);\n};\nexports.zeroAddress = zeroAddress;\n/**\n * Checks if a given address is the zero address.\n */ const isZeroAddress = function(hexAddress) {\n    try {\n        (0, helpers_1.assertIsString)(hexAddress);\n    } catch (e) {\n        return false;\n    }\n    const zeroAddr = (0, exports.zeroAddress)();\n    return zeroAddr === hexAddress;\n};\nexports.isZeroAddress = isZeroAddress;\nfunction accountBodyFromSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0, bytes_1.arrToBufArr)(storageRoot).length === 0 ? constants_1.KECCAK256_RLP : storageRoot,\n        (0, bytes_1.arrToBufArr)(codeHash).length === 0 ? constants_1.KECCAK256_NULL : codeHash\n    ];\n}\nexports.accountBodyFromSlim = accountBodyFromSlim;\nconst emptyUint8Arr = new Uint8Array(0);\nfunction accountBodyToSlim(body) {\n    const [nonce, balance, storageRoot, codeHash] = body;\n    return [\n        nonce,\n        balance,\n        (0, bytes_1.arrToBufArr)(storageRoot).equals(constants_1.KECCAK256_RLP) ? emptyUint8Arr : storageRoot,\n        (0, bytes_1.arrToBufArr)(codeHash).equals(constants_1.KECCAK256_NULL) ? emptyUint8Arr : codeHash\n    ];\n}\nexports.accountBodyToSlim = accountBodyToSlim;\n/**\n * Converts a slim account (per snap protocol spec) to the RLP encoded version of the account\n * @param body Array of 4 Buffer-like items to represent the account\n * @returns RLP encoded version of the account\n */ function accountBodyToRLP(body, couldBeSlim = true) {\n    const accountBody = couldBeSlim ? accountBodyFromSlim(body) : body;\n    return (0, bytes_1.arrToBufArr)(rlp_1.RLP.encode(accountBody));\n}\nexports.accountBodyToRLP = accountBodyToRLP; //# sourceMappingURL=account.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/account.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/address.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/address.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Address = void 0;\nconst account_1 = __webpack_require__(/*! ./account */ \"(ssr)/./node_modules/@ethereumjs/util/dist/account.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@ethereumjs/util/dist/bytes.js\");\n/**\n * Handling and generating Ethereum addresses\n */ class Address {\n    constructor(buf){\n        if (buf.length !== 20) {\n            throw new Error(\"Invalid address length\");\n        }\n        this.buf = buf;\n    }\n    /**\n     * Returns the zero address.\n     */ static zero() {\n        return new Address((0, bytes_1.zeros)(20));\n    }\n    /**\n     * Returns an Address object from a hex-encoded string.\n     * @param str - Hex-encoded address\n     */ static fromString(str) {\n        if (!(0, account_1.isValidAddress)(str)) {\n            throw new Error(\"Invalid address\");\n        }\n        return new Address((0, bytes_1.toBuffer)(str));\n    }\n    /**\n     * Returns an address for a given public key.\n     * @param pubKey The two points of an uncompressed key\n     */ static fromPublicKey(pubKey) {\n        if (!Buffer.isBuffer(pubKey)) {\n            throw new Error(\"Public key should be Buffer\");\n        }\n        const buf = (0, account_1.pubToAddress)(pubKey);\n        return new Address(buf);\n    }\n    /**\n     * Returns an address for a given private key.\n     * @param privateKey A private key must be 256 bits wide\n     */ static fromPrivateKey(privateKey) {\n        if (!Buffer.isBuffer(privateKey)) {\n            throw new Error(\"Private key should be Buffer\");\n        }\n        const buf = (0, account_1.privateToAddress)(privateKey);\n        return new Address(buf);\n    }\n    /**\n     * Generates an address for a newly created contract.\n     * @param from The address which is creating this new address\n     * @param nonce The nonce of the from account\n     */ static generate(from, nonce) {\n        if (typeof nonce !== \"bigint\") {\n            throw new Error(\"Expected nonce to be a bigint\");\n        }\n        return new Address((0, account_1.generateAddress)(from.buf, (0, bytes_1.bigIntToBuffer)(nonce)));\n    }\n    /**\n     * Generates an address for a contract created using CREATE2.\n     * @param from The address which is creating this new address\n     * @param salt A salt\n     * @param initCode The init code of the contract being created\n     */ static generate2(from, salt, initCode) {\n        if (!Buffer.isBuffer(salt)) {\n            throw new Error(\"Expected salt to be a Buffer\");\n        }\n        if (!Buffer.isBuffer(initCode)) {\n            throw new Error(\"Expected initCode to be a Buffer\");\n        }\n        return new Address((0, account_1.generateAddress2)(from.buf, salt, initCode));\n    }\n    /**\n     * Is address equal to another.\n     */ equals(address) {\n        return this.buf.equals(address.buf);\n    }\n    /**\n     * Is address zero.\n     */ isZero() {\n        return this.equals(Address.zero());\n    }\n    /**\n     * True if address is in the address range defined\n     * by EIP-1352\n     */ isPrecompileOrSystemAddress() {\n        const address = (0, bytes_1.bufferToBigInt)(this.buf);\n        const rangeMin = BigInt(0);\n        const rangeMax = BigInt(\"0xffff\");\n        return address >= rangeMin && address <= rangeMax;\n    }\n    /**\n     * Returns hex encoding of address.\n     */ toString() {\n        return \"0x\" + this.buf.toString(\"hex\");\n    }\n    /**\n     * Returns Buffer representation of address.\n     */ toBuffer() {\n        return Buffer.from(this.buf);\n    }\n}\nexports.Address = Address; //# sourceMappingURL=address.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/address.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/asyncEventEmitter.js":
/*!*****************************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/asyncEventEmitter.js ***!
  \*****************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\n/**\n * Ported to Typescript from original implementation below:\n * https://github.com/ahultgren/async-eventemitter -- MIT licensed\n *\n * Type Definitions based on work by: patarapolw <https://github.com/patarapolw> -- MIT licensed\n * that was contributed to Definitely Typed below:\n * https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/async-eventemitter\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.AsyncEventEmitter = void 0;\nconst events_1 = __webpack_require__(/*! events */ \"events\");\nasync function runInSeries(context, tasks, data) {\n    let error;\n    for await (const task of tasks){\n        try {\n            if (task.length < 2) {\n                //sync\n                task.call(context, data);\n            } else {\n                await new Promise((resolve, reject)=>{\n                    task.call(context, data, (error)=>{\n                        if (error) {\n                            reject(error);\n                        } else {\n                            resolve();\n                        }\n                    });\n                });\n            }\n        } catch (e) {\n            error = e;\n        }\n    }\n    if (error) {\n        throw error;\n    }\n}\nclass AsyncEventEmitter extends events_1.EventEmitter {\n    emit(event, ...args) {\n        let [data, callback] = args;\n        const self = this;\n        let listeners = self._events[event] ?? [];\n        // Optional data argument\n        if (callback === undefined && typeof data === \"function\") {\n            callback = data;\n            data = undefined;\n        }\n        // Special treatment of internal newListener and removeListener events\n        if (event === \"newListener\" || event === \"removeListener\") {\n            data = {\n                event: data,\n                fn: callback\n            };\n            callback = undefined;\n        }\n        // A single listener is just a function not an array...\n        listeners = Array.isArray(listeners) ? listeners : [\n            listeners\n        ];\n        runInSeries(self, listeners.slice(), data).then(callback).catch(callback);\n        return self.listenerCount(event) > 0;\n    }\n    once(event, listener) {\n        const self = this;\n        let g;\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        // Hack to support set arity\n        if (listener.length >= 2) {\n            g = function(e, next) {\n                self.removeListener(event, g);\n                void listener(e, next);\n            };\n        } else {\n            g = function(e) {\n                self.removeListener(event, g);\n                void listener(e, g);\n            };\n        }\n        self.on(event, g);\n        return self;\n    }\n    first(event, listener) {\n        let listeners = this._events[event] ?? [];\n        // Contract\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [\n                listeners\n            ];\n        }\n        listeners.unshift(listener);\n        return this;\n    }\n    before(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener);\n    }\n    after(event, target, listener) {\n        return this.beforeOrAfter(event, target, listener, \"after\");\n    }\n    beforeOrAfter(event, target, listener, beforeOrAfter) {\n        let listeners = this._events[event] ?? [];\n        let i;\n        let index;\n        const add = beforeOrAfter === \"after\" ? 1 : 0;\n        // Contract\n        if (typeof listener !== \"function\") {\n            throw new TypeError(\"listener must be a function\");\n        }\n        if (typeof target !== \"function\") {\n            throw new TypeError(\"target must be a function\");\n        }\n        // Listeners are not always an array\n        if (!Array.isArray(listeners)) {\n            ;\n            this._events[event] = listeners = [\n                listeners\n            ];\n        }\n        index = listeners.length;\n        for(i = listeners.length; i--;){\n            if (listeners[i] === target) {\n                index = i + add;\n                break;\n            }\n        }\n        listeners.splice(index, 0, listener);\n        return this;\n    }\n    on(event, listener) {\n        return super.on(event, listener);\n    }\n    addListener(event, listener) {\n        return super.addListener(event, listener);\n    }\n    prependListener(event, listener) {\n        return super.prependListener(event, listener);\n    }\n    prependOnceListener(event, listener) {\n        return super.prependOnceListener(event, listener);\n    }\n    removeAllListeners(event) {\n        return super.removeAllListeners(event);\n    }\n    removeListener(event, listener) {\n        return super.removeListener(event, listener);\n    }\n    eventNames() {\n        return super.eventNames();\n    }\n    listeners(event) {\n        return super.listeners(event);\n    }\n    listenerCount(event) {\n        return super.listenerCount(event);\n    }\n    getMaxListeners() {\n        return super.getMaxListeners();\n    }\n    setMaxListeners(maxListeners) {\n        return super.setMaxListeners(maxListeners);\n    }\n}\nexports.AsyncEventEmitter = AsyncEventEmitter; //# sourceMappingURL=asyncEventEmitter.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/asyncEventEmitter.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/bytes.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/bytes.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.intToUnpaddedBuffer = exports.bigIntToUnpaddedBuffer = exports.bigIntToHex = exports.bufArrToArr = exports.arrToBufArr = exports.validateNoLeadingZeroes = exports.baToJSON = exports.toUtf8 = exports.short = exports.addHexPrefix = exports.toUnsigned = exports.fromSigned = exports.bufferToInt = exports.bigIntToBuffer = exports.bufferToBigInt = exports.bufferToHex = exports.toBuffer = exports.unpadHexString = exports.unpadArray = exports.unpadBuffer = exports.setLengthRight = exports.setLengthLeft = exports.zeros = exports.intToBuffer = exports.intToHex = void 0;\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/@ethereumjs/util/dist/helpers.js\");\nconst internal_1 = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/@ethereumjs/util/dist/internal.js\");\n/**\n * Converts a `Number` into a hex `String`\n * @param {Number} i\n * @return {String}\n */ const intToHex = function(i) {\n    if (!Number.isSafeInteger(i) || i < 0) {\n        throw new Error(`Received an invalid integer type: ${i}`);\n    }\n    return `0x${i.toString(16)}`;\n};\nexports.intToHex = intToHex;\n/**\n * Converts an `Number` to a `Buffer`\n * @param {Number} i\n * @return {Buffer}\n */ const intToBuffer = function(i) {\n    const hex = (0, exports.intToHex)(i);\n    return Buffer.from((0, internal_1.padToEven)(hex.slice(2)), \"hex\");\n};\nexports.intToBuffer = intToBuffer;\n/**\n * Returns a buffer filled with 0s.\n * @param bytes the number of bytes the buffer should be\n */ const zeros = function(bytes) {\n    return Buffer.allocUnsafe(bytes).fill(0);\n};\nexports.zeros = zeros;\n/**\n * Pads a `Buffer` with zeros till it has `length` bytes.\n * Truncates the beginning or end of input if its length exceeds `length`.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @param right whether to start padding form the left or right\n * @return (Buffer)\n */ const setLength = function(msg, length, right) {\n    const buf = (0, exports.zeros)(length);\n    if (right) {\n        if (msg.length < length) {\n            msg.copy(buf);\n            return buf;\n        }\n        return msg.slice(0, length);\n    } else {\n        if (msg.length < length) {\n            msg.copy(buf, length - msg.length);\n            return buf;\n        }\n        return msg.slice(-length);\n    }\n};\n/**\n * Left Pads a `Buffer` with leading zeros till it has `length` bytes.\n * Or it truncates the beginning if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */ const setLengthLeft = function(msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, false);\n};\nexports.setLengthLeft = setLengthLeft;\n/**\n * Right Pads a `Buffer` with trailing zeros till it has `length` bytes.\n * it truncates the end if it exceeds.\n * @param msg the value to pad (Buffer)\n * @param length the number of bytes the output should be\n * @return (Buffer)\n */ const setLengthRight = function(msg, length) {\n    (0, helpers_1.assertIsBuffer)(msg);\n    return setLength(msg, length, true);\n};\nexports.setLengthRight = setLengthRight;\n/**\n * Trims leading zeros from a `Buffer`, `String` or `Number[]`.\n * @param a (Buffer|Array|String)\n * @return (Buffer|Array|String)\n */ const stripZeros = function(a) {\n    let first = a[0];\n    while(a.length > 0 && first.toString() === \"0\"){\n        a = a.slice(1);\n        first = a[0];\n    }\n    return a;\n};\n/**\n * Trims leading zeros from a `Buffer`.\n * @param a (Buffer)\n * @return (Buffer)\n */ const unpadBuffer = function(a) {\n    (0, helpers_1.assertIsBuffer)(a);\n    return stripZeros(a);\n};\nexports.unpadBuffer = unpadBuffer;\n/**\n * Trims leading zeros from an `Array` (of numbers).\n * @param a (number[])\n * @return (number[])\n */ const unpadArray = function(a) {\n    (0, helpers_1.assertIsArray)(a);\n    return stripZeros(a);\n};\nexports.unpadArray = unpadArray;\n/**\n * Trims leading zeros from a hex-prefixed `String`.\n * @param a (String)\n * @return (String)\n */ const unpadHexString = function(a) {\n    (0, helpers_1.assertIsHexString)(a);\n    a = (0, internal_1.stripHexPrefix)(a);\n    return \"0x\" + stripZeros(a);\n};\nexports.unpadHexString = unpadHexString;\n/**\n * Attempts to turn a value into a `Buffer`.\n * Inputs supported: `Buffer`, `String` (hex-prefixed), `Number`, null/undefined, `BigInt` and other objects\n * with a `toArray()` or `toBuffer()` method.\n * @param v the value\n */ const toBuffer = function(v) {\n    if (v === null || v === undefined) {\n        return Buffer.allocUnsafe(0);\n    }\n    if (Buffer.isBuffer(v)) {\n        return Buffer.from(v);\n    }\n    if (Array.isArray(v) || v instanceof Uint8Array) {\n        return Buffer.from(v);\n    }\n    if (typeof v === \"string\") {\n        if (!(0, internal_1.isHexString)(v)) {\n            throw new Error(`Cannot convert string to buffer. toBuffer only supports 0x-prefixed hex strings and this string was given: ${v}`);\n        }\n        return Buffer.from((0, internal_1.padToEven)((0, internal_1.stripHexPrefix)(v)), \"hex\");\n    }\n    if (typeof v === \"number\") {\n        return (0, exports.intToBuffer)(v);\n    }\n    if (typeof v === \"bigint\") {\n        if (v < BigInt(0)) {\n            throw new Error(`Cannot convert negative bigint to buffer. Given: ${v}`);\n        }\n        let n = v.toString(16);\n        if (n.length % 2) n = \"0\" + n;\n        return Buffer.from(n, \"hex\");\n    }\n    if (v.toArray) {\n        // converts a BN to a Buffer\n        return Buffer.from(v.toArray());\n    }\n    if (v.toBuffer) {\n        return Buffer.from(v.toBuffer());\n    }\n    throw new Error(\"invalid type\");\n};\nexports.toBuffer = toBuffer;\n/**\n * Converts a `Buffer` into a `0x`-prefixed hex `String`.\n * @param buf `Buffer` object to convert\n */ const bufferToHex = function(buf) {\n    buf = (0, exports.toBuffer)(buf);\n    return \"0x\" + buf.toString(\"hex\");\n};\nexports.bufferToHex = bufferToHex;\n/**\n * Converts a {@link Buffer} to a {@link bigint}\n */ function bufferToBigInt(buf) {\n    const hex = (0, exports.bufferToHex)(buf);\n    if (hex === \"0x\") {\n        return BigInt(0);\n    }\n    return BigInt(hex);\n}\nexports.bufferToBigInt = bufferToBigInt;\n/**\n * Converts a {@link bigint} to a {@link Buffer}\n */ function bigIntToBuffer(num) {\n    return (0, exports.toBuffer)(\"0x\" + num.toString(16));\n}\nexports.bigIntToBuffer = bigIntToBuffer;\n/**\n * Converts a `Buffer` to a `Number`.\n * @param buf `Buffer` object to convert\n * @throws If the input number exceeds 53 bits.\n */ const bufferToInt = function(buf) {\n    const res = Number(bufferToBigInt(buf));\n    if (!Number.isSafeInteger(res)) throw new Error(\"Number exceeds 53 bits\");\n    return res;\n};\nexports.bufferToInt = bufferToInt;\n/**\n * Interprets a `Buffer` as a signed integer and returns a `BigInt`. Assumes 256-bit numbers.\n * @param num Signed integer value\n */ const fromSigned = function(num) {\n    return BigInt.asIntN(256, bufferToBigInt(num));\n};\nexports.fromSigned = fromSigned;\n/**\n * Converts a `BigInt` to an unsigned integer and returns it as a `Buffer`. Assumes 256-bit numbers.\n * @param num\n */ const toUnsigned = function(num) {\n    return bigIntToBuffer(BigInt.asUintN(256, num));\n};\nexports.toUnsigned = toUnsigned;\n/**\n * Adds \"0x\" to a given `String` if it does not already start with \"0x\".\n */ const addHexPrefix = function(str) {\n    if (typeof str !== \"string\") {\n        return str;\n    }\n    return (0, internal_1.isHexPrefixed)(str) ? str : \"0x\" + str;\n};\nexports.addHexPrefix = addHexPrefix;\n/**\n * Shortens a string  or buffer's hex string representation to maxLength (default 50).\n *\n * Examples:\n *\n * Input:  '657468657265756d000000000000000000000000000000000000000000000000'\n * Output: '657468657265756d0000000000000000000000000000000000…'\n */ function short(buffer, maxLength = 50) {\n    const bufferStr = Buffer.isBuffer(buffer) ? buffer.toString(\"hex\") : buffer;\n    if (bufferStr.length <= maxLength) {\n        return bufferStr;\n    }\n    return bufferStr.slice(0, maxLength) + \"…\";\n}\nexports.short = short;\n/**\n * Returns the utf8 string representation from a hex string.\n *\n * Examples:\n *\n * Input 1: '657468657265756d000000000000000000000000000000000000000000000000'\n * Input 2: '657468657265756d'\n * Input 3: '000000000000000000000000000000000000000000000000657468657265756d'\n *\n * Output (all 3 input variants): 'ethereum'\n *\n * Note that this method is not intended to be used with hex strings\n * representing quantities in both big endian or little endian notation.\n *\n * @param string Hex string, should be `0x` prefixed\n * @return Utf8 string\n */ const toUtf8 = function(hex) {\n    const zerosRegexp = /^(00)+|(00)+$/g;\n    hex = (0, internal_1.stripHexPrefix)(hex);\n    if (hex.length % 2 !== 0) {\n        throw new Error(\"Invalid non-even hex string input for toUtf8() provided\");\n    }\n    const bufferVal = Buffer.from(hex.replace(zerosRegexp, \"\"), \"hex\");\n    return bufferVal.toString(\"utf8\");\n};\nexports.toUtf8 = toUtf8;\n/**\n * Converts a `Buffer` or `Array` to JSON.\n * @param ba (Buffer|Array)\n * @return (Array|String|null)\n */ const baToJSON = function(ba) {\n    if (Buffer.isBuffer(ba)) {\n        return `0x${ba.toString(\"hex\")}`;\n    } else if (ba instanceof Array) {\n        const array = [];\n        for(let i = 0; i < ba.length; i++){\n            array.push((0, exports.baToJSON)(ba[i]));\n        }\n        return array;\n    }\n};\nexports.baToJSON = baToJSON;\n/**\n * Checks provided Buffers for leading zeroes and throws if found.\n *\n * Examples:\n *\n * Valid values: 0x1, 0x, 0x01, 0x1234\n * Invalid values: 0x0, 0x00, 0x001, 0x0001\n *\n * Note: This method is useful for validating that RLP encoded integers comply with the rule that all\n * integer values encoded to RLP must be in the most compact form and contain no leading zero bytes\n * @param values An object containing string keys and Buffer values\n * @throws if any provided value is found to have leading zero bytes\n */ const validateNoLeadingZeroes = function(values) {\n    for (const [k, v] of Object.entries(values)){\n        if (v !== undefined && v.length > 0 && v[0] === 0) {\n            throw new Error(`${k} cannot have leading zeroes, received: ${v.toString(\"hex\")}`);\n        }\n    }\n};\nexports.validateNoLeadingZeroes = validateNoLeadingZeroes;\nfunction arrToBufArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Buffer.from(arr);\n    }\n    return arr.map((a)=>arrToBufArr(a));\n}\nexports.arrToBufArr = arrToBufArr;\nfunction bufArrToArr(arr) {\n    if (!Array.isArray(arr)) {\n        return Uint8Array.from(arr ?? []);\n    }\n    return arr.map((a)=>bufArrToArr(a));\n}\nexports.bufArrToArr = bufArrToArr;\n/**\n * Converts a {@link bigint} to a `0x` prefixed hex string\n */ const bigIntToHex = (num)=>{\n    return \"0x\" + num.toString(16);\n};\nexports.bigIntToHex = bigIntToHex;\n/**\n * Convert value from bigint to an unpadded Buffer\n * (useful for RLP transport)\n * @param value value to convert\n */ function bigIntToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)(bigIntToBuffer(value));\n}\nexports.bigIntToUnpaddedBuffer = bigIntToUnpaddedBuffer;\nfunction intToUnpaddedBuffer(value) {\n    return (0, exports.unpadBuffer)((0, exports.intToBuffer)(value));\n}\nexports.intToUnpaddedBuffer = intToUnpaddedBuffer; //# sourceMappingURL=bytes.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/bytes.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/constants.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/constants.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.MAX_WITHDRAWALS_PER_PAYLOAD = exports.RLP_EMPTY_STRING = exports.KECCAK256_RLP = exports.KECCAK256_RLP_S = exports.KECCAK256_RLP_ARRAY = exports.KECCAK256_RLP_ARRAY_S = exports.KECCAK256_NULL = exports.KECCAK256_NULL_S = exports.TWO_POW256 = exports.SECP256K1_ORDER_DIV_2 = exports.SECP256K1_ORDER = exports.MAX_INTEGER_BIGINT = exports.MAX_INTEGER = exports.MAX_UINT64 = void 0;\nconst buffer_1 = __webpack_require__(/*! buffer */ \"buffer\");\nconst secp256k1_1 = __webpack_require__(/*! ethereum-cryptography/secp256k1 */ \"(ssr)/./node_modules/ethereum-cryptography/secp256k1.js\");\n/**\n * 2^64-1\n */ exports.MAX_UINT64 = BigInt(\"0xffffffffffffffff\");\n/**\n * The max integer that the evm can handle (2^256-1)\n */ exports.MAX_INTEGER = BigInt(\"0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\");\n/**\n * The max integer that the evm can handle (2^256-1) as a bigint\n * 2^256-1 equals to 340282366920938463463374607431768211455\n * We use literal value instead of calculated value for compatibility issue.\n */ exports.MAX_INTEGER_BIGINT = BigInt(\"115792089237316195423570985008687907853269984665640564039457584007913129639935\");\nexports.SECP256K1_ORDER = secp256k1_1.secp256k1.CURVE.n;\nexports.SECP256K1_ORDER_DIV_2 = secp256k1_1.secp256k1.CURVE.n / BigInt(2);\n/**\n * 2^256\n */ exports.TWO_POW256 = BigInt(\"0x10000000000000000000000000000000000000000000000000000000000000000\");\n/**\n * Keccak-256 hash of null\n */ exports.KECCAK256_NULL_S = \"c5d2460186f7233c927e7db2dcc703c0e500b653ca82273b7bfad8045d85a470\";\n/**\n * Keccak-256 hash of null\n */ exports.KECCAK256_NULL = buffer_1.Buffer.from(exports.KECCAK256_NULL_S, \"hex\");\n/**\n * Keccak-256 of an RLP of an empty array\n */ exports.KECCAK256_RLP_ARRAY_S = \"1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347\";\n/**\n * Keccak-256 of an RLP of an empty array\n */ exports.KECCAK256_RLP_ARRAY = buffer_1.Buffer.from(exports.KECCAK256_RLP_ARRAY_S, \"hex\");\n/**\n * Keccak-256 hash of the RLP of null\n */ exports.KECCAK256_RLP_S = \"56e81f171bcc55a6ff8345e692c0f86e5b48e01b996cadc001622fb5e363b421\";\n/**\n * Keccak-256 hash of the RLP of null\n */ exports.KECCAK256_RLP = buffer_1.Buffer.from(exports.KECCAK256_RLP_S, \"hex\");\n/**\n *  RLP encoded empty string\n */ exports.RLP_EMPTY_STRING = buffer_1.Buffer.from([\n    0x80\n]);\nexports.MAX_WITHDRAWALS_PER_PAYLOAD = 16; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUNiQSw4Q0FBNkM7SUFBRUcsT0FBTztBQUFLLENBQUMsRUFBQztBQUM3REQsbUNBQW1DLEdBQUdBLHdCQUF3QixHQUFHQSxxQkFBcUIsR0FBR0EsdUJBQXVCLEdBQUdBLDJCQUEyQixHQUFHQSw2QkFBNkIsR0FBR0Esc0JBQXNCLEdBQUdBLHdCQUF3QixHQUFHQSxrQkFBa0IsR0FBR0EsNkJBQTZCLEdBQUdBLHVCQUF1QixHQUFHQSwwQkFBMEIsR0FBR0EsbUJBQW1CLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDalksTUFBTWdCLFdBQVdDLG1CQUFPQSxDQUFDLHNCQUFRO0FBQ2pDLE1BQU1DLGNBQWNELG1CQUFPQSxDQUFDLGdHQUFpQztBQUM3RDs7Q0FFQyxHQUNEakIsa0JBQWtCLEdBQUdtQixPQUFPO0FBQzVCOztDQUVDLEdBQ0RuQixtQkFBbUIsR0FBR21CLE9BQU87QUFDN0I7Ozs7Q0FJQyxHQUNEbkIsMEJBQTBCLEdBQUdtQixPQUFPO0FBQ3BDbkIsdUJBQXVCLEdBQUdrQixZQUFZRSxTQUFTLENBQUNDLEtBQUssQ0FBQ0MsQ0FBQztBQUN2RHRCLDZCQUE2QixHQUFHa0IsWUFBWUUsU0FBUyxDQUFDQyxLQUFLLENBQUNDLENBQUMsR0FBR0gsT0FBTztBQUN2RTs7Q0FFQyxHQUNEbkIsa0JBQWtCLEdBQUdtQixPQUFPO0FBQzVCOztDQUVDLEdBQ0RuQix3QkFBd0IsR0FBRztBQUMzQjs7Q0FFQyxHQUNEQSxzQkFBc0IsR0FBR2dCLFNBQVNPLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDeEIsUUFBUVMsZ0JBQWdCLEVBQUU7QUFDeEU7O0NBRUMsR0FDRFQsNkJBQTZCLEdBQUc7QUFDaEM7O0NBRUMsR0FDREEsMkJBQTJCLEdBQUdnQixTQUFTTyxNQUFNLENBQUNDLElBQUksQ0FBQ3hCLFFBQVFPLHFCQUFxQixFQUFFO0FBQ2xGOztDQUVDLEdBQ0RQLHVCQUF1QixHQUFHO0FBQzFCOztDQUVDLEdBQ0RBLHFCQUFxQixHQUFHZ0IsU0FBU08sTUFBTSxDQUFDQyxJQUFJLENBQUN4QixRQUFRSyxlQUFlLEVBQUU7QUFDdEU7O0NBRUMsR0FDREwsd0JBQXdCLEdBQUdnQixTQUFTTyxNQUFNLENBQUNDLElBQUksQ0FBQztJQUFDO0NBQUs7QUFDdER4QixtQ0FBbUMsR0FBRyxJQUN0QyxxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2NvbnN0YW50cy5qcz83YmQxIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5NQVhfV0lUSERSQVdBTFNfUEVSX1BBWUxPQUQgPSBleHBvcnRzLlJMUF9FTVBUWV9TVFJJTkcgPSBleHBvcnRzLktFQ0NBSzI1Nl9STFAgPSBleHBvcnRzLktFQ0NBSzI1Nl9STFBfUyA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWSA9IGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gZXhwb3J0cy5LRUNDQUsyNTZfTlVMTCA9IGV4cG9ydHMuS0VDQ0FLMjU2X05VTExfUyA9IGV4cG9ydHMuVFdPX1BPVzI1NiA9IGV4cG9ydHMuU0VDUDI1NksxX09SREVSX0RJVl8yID0gZXhwb3J0cy5TRUNQMjU2SzFfT1JERVIgPSBleHBvcnRzLk1BWF9JTlRFR0VSX0JJR0lOVCA9IGV4cG9ydHMuTUFYX0lOVEVHRVIgPSBleHBvcnRzLk1BWF9VSU5UNjQgPSB2b2lkIDA7XG5jb25zdCBidWZmZXJfMSA9IHJlcXVpcmUoXCJidWZmZXJcIik7XG5jb25zdCBzZWNwMjU2azFfMSA9IHJlcXVpcmUoXCJldGhlcmV1bS1jcnlwdG9ncmFwaHkvc2VjcDI1NmsxXCIpO1xuLyoqXG4gKiAyXjY0LTFcbiAqL1xuZXhwb3J0cy5NQVhfVUlOVDY0ID0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmYnKTtcbi8qKlxuICogVGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhlIGV2bSBjYW4gaGFuZGxlICgyXjI1Ni0xKVxuICovXG5leHBvcnRzLk1BWF9JTlRFR0VSID0gQmlnSW50KCcweGZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmZmYnKTtcbi8qKlxuICogVGhlIG1heCBpbnRlZ2VyIHRoYXQgdGhlIGV2bSBjYW4gaGFuZGxlICgyXjI1Ni0xKSBhcyBhIGJpZ2ludFxuICogMl4yNTYtMSBlcXVhbHMgdG8gMzQwMjgyMzY2OTIwOTM4NDYzNDYzMzc0NjA3NDMxNzY4MjExNDU1XG4gKiBXZSB1c2UgbGl0ZXJhbCB2YWx1ZSBpbnN0ZWFkIG9mIGNhbGN1bGF0ZWQgdmFsdWUgZm9yIGNvbXBhdGliaWxpdHkgaXNzdWUuXG4gKi9cbmV4cG9ydHMuTUFYX0lOVEVHRVJfQklHSU5UID0gQmlnSW50KCcxMTU3OTIwODkyMzczMTYxOTU0MjM1NzA5ODUwMDg2ODc5MDc4NTMyNjk5ODQ2NjU2NDA1NjQwMzk0NTc1ODQwMDc5MTMxMjk2Mzk5MzUnKTtcbmV4cG9ydHMuU0VDUDI1NksxX09SREVSID0gc2VjcDI1NmsxXzEuc2VjcDI1NmsxLkNVUlZFLm47XG5leHBvcnRzLlNFQ1AyNTZLMV9PUkRFUl9ESVZfMiA9IHNlY3AyNTZrMV8xLnNlY3AyNTZrMS5DVVJWRS5uIC8gQmlnSW50KDIpO1xuLyoqXG4gKiAyXjI1NlxuICovXG5leHBvcnRzLlRXT19QT1cyNTYgPSBCaWdJbnQoJzB4MTAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAnKTtcbi8qKlxuICogS2VjY2FrLTI1NiBoYXNoIG9mIG51bGxcbiAqL1xuZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TID0gJ2M1ZDI0NjAxODZmNzIzM2M5MjdlN2RiMmRjYzcwM2MwZTUwMGI2NTNjYTgyMjczYjdiZmFkODA0NWQ4NWE0NzAnO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgbnVsbFxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9OVUxMID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oZXhwb3J0cy5LRUNDQUsyNTZfTlVMTF9TLCAnaGV4Jyk7XG4vKipcbiAqIEtlY2Nhay0yNTYgb2YgYW4gUkxQIG9mIGFuIGVtcHR5IGFycmF5XG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9BUlJBWV9TID0gJzFkY2M0ZGU4ZGVjNzVkN2FhYjg1YjU2N2I2Y2NkNDFhZDMxMjQ1MWI5NDhhNzQxM2YwYTE0MmZkNDBkNDkzNDcnO1xuLyoqXG4gKiBLZWNjYWstMjU2IG9mIGFuIFJMUCBvZiBhbiBlbXB0eSBhcnJheVxuICovXG5leHBvcnRzLktFQ0NBSzI1Nl9STFBfQVJSQVkgPSBidWZmZXJfMS5CdWZmZXIuZnJvbShleHBvcnRzLktFQ0NBSzI1Nl9STFBfQVJSQVlfUywgJ2hleCcpO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIFJMUCBvZiBudWxsXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TID0gJzU2ZTgxZjE3MWJjYzU1YTZmZjgzNDVlNjkyYzBmODZlNWI0OGUwMWI5OTZjYWRjMDAxNjIyZmI1ZTM2M2I0MjEnO1xuLyoqXG4gKiBLZWNjYWstMjU2IGhhc2ggb2YgdGhlIFJMUCBvZiBudWxsXG4gKi9cbmV4cG9ydHMuS0VDQ0FLMjU2X1JMUCA9IGJ1ZmZlcl8xLkJ1ZmZlci5mcm9tKGV4cG9ydHMuS0VDQ0FLMjU2X1JMUF9TLCAnaGV4Jyk7XG4vKipcbiAqICBSTFAgZW5jb2RlZCBlbXB0eSBzdHJpbmdcbiAqL1xuZXhwb3J0cy5STFBfRU1QVFlfU1RSSU5HID0gYnVmZmVyXzEuQnVmZmVyLmZyb20oWzB4ODBdKTtcbmV4cG9ydHMuTUFYX1dJVEhEUkFXQUxTX1BFUl9QQVlMT0FEID0gMTY7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTUFYX1dJVEhEUkFXQUxTX1BFUl9QQVlMT0FEIiwiUkxQX0VNUFRZX1NUUklORyIsIktFQ0NBSzI1Nl9STFAiLCJLRUNDQUsyNTZfUkxQX1MiLCJLRUNDQUsyNTZfUkxQX0FSUkFZIiwiS0VDQ0FLMjU2X1JMUF9BUlJBWV9TIiwiS0VDQ0FLMjU2X05VTEwiLCJLRUNDQUsyNTZfTlVMTF9TIiwiVFdPX1BPVzI1NiIsIlNFQ1AyNTZLMV9PUkRFUl9ESVZfMiIsIlNFQ1AyNTZLMV9PUkRFUiIsIk1BWF9JTlRFR0VSX0JJR0lOVCIsIk1BWF9JTlRFR0VSIiwiTUFYX1VJTlQ2NCIsImJ1ZmZlcl8xIiwicmVxdWlyZSIsInNlY3AyNTZrMV8xIiwiQmlnSW50Iiwic2VjcDI1NmsxIiwiQ1VSVkUiLCJuIiwiQnVmZmVyIiwiZnJvbSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/constants.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/encoding.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/encoding.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.compactBytesToNibbles = exports.bytesToNibbles = exports.nibblesToCompactBytes = exports.nibblesToBytes = exports.hasTerminator = void 0;\n// Reference: https://ethereum.org/en/developers/docs/data-structures-and-encoding/patricia-merkle-trie/\n/**\n *\n * @param s byte sequence\n * @returns boolean indicating if input hex nibble sequence has terminator indicating leaf-node\n *          terminator is represented with 16 because a nibble ranges from 0 - 15(f)\n */ const hasTerminator = (nibbles)=>{\n    return nibbles.length > 0 && nibbles[nibbles.length - 1] === 16;\n};\nexports.hasTerminator = hasTerminator;\nconst nibblesToBytes = (nibbles, bytes)=>{\n    for(let bi = 0, ni = 0; ni < nibbles.length; bi += 1, ni += 2){\n        bytes[bi] = nibbles[ni] << 4 | nibbles[ni + 1];\n    }\n};\nexports.nibblesToBytes = nibblesToBytes;\nconst nibblesToCompactBytes = (nibbles)=>{\n    let terminator = 0;\n    if ((0, exports.hasTerminator)(nibbles)) {\n        terminator = 1;\n        // Remove the terminator from the sequence\n        nibbles = nibbles.subarray(0, nibbles.length - 1);\n    }\n    const buf = new Uint8Array(nibbles.length / 2 + 1);\n    // Shift the terminator info into the first nibble of buf[0]\n    buf[0] = terminator << 5;\n    // If odd length, then add that flag into the first nibble and put the odd nibble to\n    // second part of buf[0] which otherwise will be left padded with a 0\n    if ((nibbles.length & 1) === 1) {\n        buf[0] |= 1 << 4;\n        buf[0] |= nibbles[0];\n        nibbles = nibbles.subarray(1);\n    }\n    // create bytes out of the rest even nibbles\n    (0, exports.nibblesToBytes)(nibbles, buf.subarray(1));\n    return buf;\n};\nexports.nibblesToCompactBytes = nibblesToCompactBytes;\nconst bytesToNibbles = (str)=>{\n    const l = str.length * 2 + 1;\n    const nibbles = new Uint8Array(l);\n    for(let i = 0; i < str.length; i++){\n        const b = str[i];\n        nibbles[i * 2] = b / 16;\n        nibbles[i * 2 + 1] = b % 16;\n    }\n    // This will get removed from calling function if the first nibble\n    // indicates that terminator is not present\n    nibbles[l - 1] = 16;\n    return nibbles;\n};\nexports.bytesToNibbles = bytesToNibbles;\nconst compactBytesToNibbles = (compact)=>{\n    if (compact.length === 0) {\n        return compact;\n    }\n    let base = (0, exports.bytesToNibbles)(compact);\n    // delete terminator flag if terminator flag was not in first nibble\n    if (base[0] < 2) {\n        base = base.subarray(0, base.length - 1);\n    }\n    // chop the terminator nibble and the even padding (if there is one)\n    // i.e.  chop 2 left nibbles when even else 1 when odd\n    const chop = 2 - (base[0] & 1);\n    return base.subarray(chop);\n};\nexports.compactBytesToNibbles = compactBytesToNibbles; /**\n * A test helper to generates compact path for a subset of key bytes\n *\n * TODO: Commenting the code for now as this seems to be helper function\n * (from geth codebase )\n *\n */  //\n //\n // export const getPathTo = (tillBytes: number, key: Buffer) => {\n //   const hexNibbles = bytesToNibbles(key).subarray(0, tillBytes)\n //   // Remove the terminator if its there, although it would be there only if tillBytes >= key.length\n //   // This seems to be a test helper to generate paths so correctness of this isn't necessary\n //   hexNibbles[hexNibbles.length - 1] = 0\n //   const compactBytes = nibblesToCompactBytes(hexNibbles)\n //   return [Buffer.from(compactBytes)]\n // }\n //# sourceMappingURL=encoding.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/encoding.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/helpers.js":
/*!*******************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/helpers.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.assertIsString = exports.assertIsArray = exports.assertIsBuffer = exports.assertIsHexString = void 0;\nconst internal_1 = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/@ethereumjs/util/dist/internal.js\");\n/**\n * Throws if a string is not hex prefixed\n * @param {string} input string to check hex prefix of\n */ const assertIsHexString = function(input) {\n    if (!(0, internal_1.isHexString)(input)) {\n        const msg = `This method only supports 0x-prefixed hex strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsHexString = assertIsHexString;\n/**\n * Throws if input is not a buffer\n * @param {Buffer} input value to check\n */ const assertIsBuffer = function(input) {\n    if (!Buffer.isBuffer(input)) {\n        const msg = `This method only supports Buffer but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsBuffer = assertIsBuffer;\n/**\n * Throws if input is not an array\n * @param {number[]} input value to check\n */ const assertIsArray = function(input) {\n    if (!Array.isArray(input)) {\n        const msg = `This method only supports number arrays but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsArray = assertIsArray;\n/**\n * Throws if input is not a string\n * @param {string} input value to check\n */ const assertIsString = function(input) {\n    if (typeof input !== \"string\") {\n        const msg = `This method only supports strings but input was: ${input}`;\n        throw new Error(msg);\n    }\n};\nexports.assertIsString = assertIsString; //# sourceMappingURL=helpers.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2hlbHBlcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELHNCQUFzQixHQUFHQSxxQkFBcUIsR0FBR0Esc0JBQXNCLEdBQUdBLHlCQUF5QixHQUFHLEtBQUs7QUFDM0csTUFBTU0sYUFBYUMsbUJBQU9BLENBQUMsMEVBQVk7QUFDdkM7OztDQUdDLEdBQ0QsTUFBTUYsb0JBQW9CLFNBQVVHLEtBQUs7SUFDckMsSUFBSSxDQUFDLENBQUMsR0FBR0YsV0FBV0csV0FBVyxFQUFFRCxRQUFRO1FBQ3JDLE1BQU1FLE1BQU0sQ0FBQyxpRUFBaUUsRUFBRUYsTUFBTSxDQUFDO1FBQ3ZGLE1BQU0sSUFBSUcsTUFBTUQ7SUFDcEI7QUFDSjtBQUNBVix5QkFBeUIsR0FBR0s7QUFDNUI7OztDQUdDLEdBQ0QsTUFBTUQsaUJBQWlCLFNBQVVJLEtBQUs7SUFDbEMsSUFBSSxDQUFDSSxPQUFPQyxRQUFRLENBQUNMLFFBQVE7UUFDekIsTUFBTUUsTUFBTSxDQUFDLGdEQUFnRCxFQUFFRixNQUFNLENBQUM7UUFDdEUsTUFBTSxJQUFJRyxNQUFNRDtJQUNwQjtBQUNKO0FBQ0FWLHNCQUFzQixHQUFHSTtBQUN6Qjs7O0NBR0MsR0FDRCxNQUFNRCxnQkFBZ0IsU0FBVUssS0FBSztJQUNqQyxJQUFJLENBQUNNLE1BQU1DLE9BQU8sQ0FBQ1AsUUFBUTtRQUN2QixNQUFNRSxNQUFNLENBQUMsdURBQXVELEVBQUVGLE1BQU0sQ0FBQztRQUM3RSxNQUFNLElBQUlHLE1BQU1EO0lBQ3BCO0FBQ0o7QUFDQVYscUJBQXFCLEdBQUdHO0FBQ3hCOzs7Q0FHQyxHQUNELE1BQU1ELGlCQUFpQixTQUFVTSxLQUFLO0lBQ2xDLElBQUksT0FBT0EsVUFBVSxVQUFVO1FBQzNCLE1BQU1FLE1BQU0sQ0FBQyxpREFBaUQsRUFBRUYsTUFBTSxDQUFDO1FBQ3ZFLE1BQU0sSUFBSUcsTUFBTUQ7SUFDcEI7QUFDSjtBQUNBVixzQkFBc0IsR0FBR0UsZ0JBQ3pCLG1DQUFtQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvaGVscGVycy5qcz85MWRjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5hc3NlcnRJc1N0cmluZyA9IGV4cG9ydHMuYXNzZXJ0SXNBcnJheSA9IGV4cG9ydHMuYXNzZXJ0SXNCdWZmZXIgPSBleHBvcnRzLmFzc2VydElzSGV4U3RyaW5nID0gdm9pZCAwO1xuY29uc3QgaW50ZXJuYWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsXCIpO1xuLyoqXG4gKiBUaHJvd3MgaWYgYSBzdHJpbmcgaXMgbm90IGhleCBwcmVmaXhlZFxuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IHN0cmluZyB0byBjaGVjayBoZXggcHJlZml4IG9mXG4gKi9cbmNvbnN0IGFzc2VydElzSGV4U3RyaW5nID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCEoMCwgaW50ZXJuYWxfMS5pc0hleFN0cmluZykoaW5wdXQpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIDB4LXByZWZpeGVkIGhleCBzdHJpbmdzIGJ1dCBpbnB1dCB3YXM6ICR7aW5wdXR9YDtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKG1zZyk7XG4gICAgfVxufTtcbmV4cG9ydHMuYXNzZXJ0SXNIZXhTdHJpbmcgPSBhc3NlcnRJc0hleFN0cmluZztcbi8qKlxuICogVGhyb3dzIGlmIGlucHV0IGlzIG5vdCBhIGJ1ZmZlclxuICogQHBhcmFtIHtCdWZmZXJ9IGlucHV0IHZhbHVlIHRvIGNoZWNrXG4gKi9cbmNvbnN0IGFzc2VydElzQnVmZmVyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKCFCdWZmZXIuaXNCdWZmZXIoaW5wdXQpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIEJ1ZmZlciBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG5leHBvcnRzLmFzc2VydElzQnVmZmVyID0gYXNzZXJ0SXNCdWZmZXI7XG4vKipcbiAqIFRocm93cyBpZiBpbnB1dCBpcyBub3QgYW4gYXJyYXlcbiAqIEBwYXJhbSB7bnVtYmVyW119IGlucHV0IHZhbHVlIHRvIGNoZWNrXG4gKi9cbmNvbnN0IGFzc2VydElzQXJyYXkgPSBmdW5jdGlvbiAoaW5wdXQpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoaW5wdXQpKSB7XG4gICAgICAgIGNvbnN0IG1zZyA9IGBUaGlzIG1ldGhvZCBvbmx5IHN1cHBvcnRzIG51bWJlciBhcnJheXMgYnV0IGlucHV0IHdhczogJHtpbnB1dH1gO1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobXNnKTtcbiAgICB9XG59O1xuZXhwb3J0cy5hc3NlcnRJc0FycmF5ID0gYXNzZXJ0SXNBcnJheTtcbi8qKlxuICogVGhyb3dzIGlmIGlucHV0IGlzIG5vdCBhIHN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IGlucHV0IHZhbHVlIHRvIGNoZWNrXG4gKi9cbmNvbnN0IGFzc2VydElzU3RyaW5nID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgbXNnID0gYFRoaXMgbWV0aG9kIG9ubHkgc3VwcG9ydHMgc3RyaW5ncyBidXQgaW5wdXQgd2FzOiAke2lucHV0fWA7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgIH1cbn07XG5leHBvcnRzLmFzc2VydElzU3RyaW5nID0gYXNzZXJ0SXNTdHJpbmc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1oZWxwZXJzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImFzc2VydElzU3RyaW5nIiwiYXNzZXJ0SXNBcnJheSIsImFzc2VydElzQnVmZmVyIiwiYXNzZXJ0SXNIZXhTdHJpbmciLCJpbnRlcm5hbF8xIiwicmVxdWlyZSIsImlucHV0IiwiaXNIZXhTdHJpbmciLCJtc2ciLCJFcnJvciIsIkJ1ZmZlciIsImlzQnVmZmVyIiwiQXJyYXkiLCJpc0FycmF5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/helpers.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, exports, __webpack_require__) {

eval("\nvar __createBinding = this && this.__createBinding || (Object.create ? function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n        desc = {\n            enumerable: true,\n            get: function() {\n                return m[k];\n            }\n        };\n    }\n    Object.defineProperty(o, k2, desc);\n} : function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n});\nvar __exportStar = this && this.__exportStar || function(m, exports1) {\n    for(var p in m)if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports1, p)) __createBinding(exports1, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toAscii = exports.stripHexPrefix = exports.padToEven = exports.isHexString = exports.isHexPrefixed = exports.getKeys = exports.getBinarySize = exports.fromUtf8 = exports.fromAscii = exports.arrayContainsArray = void 0;\n/**\n * Constants\n */ __exportStar(__webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@ethereumjs/util/dist/constants.js\"), exports);\n/**\n * Units helpers\n */ __exportStar(__webpack_require__(/*! ./units */ \"(ssr)/./node_modules/@ethereumjs/util/dist/units.js\"), exports);\n/**\n * Account class and helper functions\n */ __exportStar(__webpack_require__(/*! ./account */ \"(ssr)/./node_modules/@ethereumjs/util/dist/account.js\"), exports);\n/**\n * Address type\n */ __exportStar(__webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@ethereumjs/util/dist/address.js\"), exports);\n/**\n * Withdrawal type\n */ __exportStar(__webpack_require__(/*! ./withdrawal */ \"(ssr)/./node_modules/@ethereumjs/util/dist/withdrawal.js\"), exports);\n/**\n * ECDSA signature\n */ __exportStar(__webpack_require__(/*! ./signature */ \"(ssr)/./node_modules/@ethereumjs/util/dist/signature.js\"), exports);\n/**\n * Utilities for manipulating Buffers, byte arrays, etc.\n */ __exportStar(__webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@ethereumjs/util/dist/bytes.js\"), exports);\n/**\n * Helpful TypeScript types\n */ __exportStar(__webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@ethereumjs/util/dist/types.js\"), exports);\n/**\n * Helper function for working with compact encoding\n */ __exportStar(__webpack_require__(/*! ./encoding */ \"(ssr)/./node_modules/@ethereumjs/util/dist/encoding.js\"), exports);\n/**\n * Export ethjs-util methods\n */ __exportStar(__webpack_require__(/*! ./asyncEventEmitter */ \"(ssr)/./node_modules/@ethereumjs/util/dist/asyncEventEmitter.js\"), exports);\nvar internal_1 = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/@ethereumjs/util/dist/internal.js\");\nObject.defineProperty(exports, \"arrayContainsArray\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.arrayContainsArray;\n    }\n}));\nObject.defineProperty(exports, \"fromAscii\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.fromAscii;\n    }\n}));\nObject.defineProperty(exports, \"fromUtf8\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.fromUtf8;\n    }\n}));\nObject.defineProperty(exports, \"getBinarySize\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.getBinarySize;\n    }\n}));\nObject.defineProperty(exports, \"getKeys\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.getKeys;\n    }\n}));\nObject.defineProperty(exports, \"isHexPrefixed\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.isHexPrefixed;\n    }\n}));\nObject.defineProperty(exports, \"isHexString\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.isHexString;\n    }\n}));\nObject.defineProperty(exports, \"padToEven\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.padToEven;\n    }\n}));\nObject.defineProperty(exports, \"stripHexPrefix\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.stripHexPrefix;\n    }\n}));\nObject.defineProperty(exports, \"toAscii\", ({\n    enumerable: true,\n    get: function() {\n        return internal_1.toAscii;\n    }\n}));\n__exportStar(__webpack_require__(/*! ./lock */ \"(ssr)/./node_modules/@ethereumjs/util/dist/lock.js\"), exports);\n__exportStar(__webpack_require__(/*! ./provider */ \"(ssr)/./node_modules/@ethereumjs/util/dist/provider.js\"), exports); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/internal.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/internal.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n/*\nThe MIT License\n\nCopyright (c) 2016 Nick Dodson. nickdodson.com\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE\n */ Object.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isHexString = exports.getKeys = exports.fromAscii = exports.fromUtf8 = exports.toAscii = exports.arrayContainsArray = exports.getBinarySize = exports.padToEven = exports.stripHexPrefix = exports.isHexPrefixed = void 0;\n/**\n * Returns a `Boolean` on whether or not the a `String` starts with '0x'\n * @param str the string input value\n * @return a boolean if it is or is not hex prefixed\n * @throws if the str input is not a string\n */ function isHexPrefixed(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(`[isHexPrefixed] input must be type 'string', received type ${typeof str}`);\n    }\n    return str[0] === \"0\" && str[1] === \"x\";\n}\nexports.isHexPrefixed = isHexPrefixed;\n/**\n * Removes '0x' from a given `String` if present\n * @param str the string value\n * @returns the string without 0x prefix\n */ const stripHexPrefix = (str)=>{\n    if (typeof str !== \"string\") throw new Error(`[stripHexPrefix] input must be type 'string', received ${typeof str}`);\n    return isHexPrefixed(str) ? str.slice(2) : str;\n};\nexports.stripHexPrefix = stripHexPrefix;\n/**\n * Pads a `String` to have an even length\n * @param value\n * @return output\n */ function padToEven(value) {\n    let a = value;\n    if (typeof a !== \"string\") {\n        throw new Error(`[padToEven] value must be type 'string', received ${typeof a}`);\n    }\n    if (a.length % 2) a = `0${a}`;\n    return a;\n}\nexports.padToEven = padToEven;\n/**\n * Get the binary size of a string\n * @param str\n * @returns the number of bytes contained within the string\n */ function getBinarySize(str) {\n    if (typeof str !== \"string\") {\n        throw new Error(`[getBinarySize] method requires input type 'string', received ${typeof str}`);\n    }\n    return Buffer.byteLength(str, \"utf8\");\n}\nexports.getBinarySize = getBinarySize;\n/**\n * Returns TRUE if the first specified array contains all elements\n * from the second one. FALSE otherwise.\n *\n * @param superset\n * @param subset\n *\n */ function arrayContainsArray(superset, subset, some) {\n    if (Array.isArray(superset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'superset' to be an array, got type '${typeof superset}'`);\n    }\n    if (Array.isArray(subset) !== true) {\n        throw new Error(`[arrayContainsArray] method requires input 'subset' to be an array, got type '${typeof subset}'`);\n    }\n    return subset[some === true ? \"some\" : \"every\"]((value)=>superset.indexOf(value) >= 0);\n}\nexports.arrayContainsArray = arrayContainsArray;\n/**\n * Should be called to get ascii from its hex representation\n *\n * @param string in hex\n * @returns ascii string representation of hex value\n */ function toAscii(hex) {\n    let str = \"\";\n    let i = 0;\n    const l = hex.length;\n    if (hex.substring(0, 2) === \"0x\") i = 2;\n    for(; i < l; i += 2){\n        const code = parseInt(hex.substr(i, 2), 16);\n        str += String.fromCharCode(code);\n    }\n    return str;\n}\nexports.toAscii = toAscii;\n/**\n * Should be called to get hex representation (prefixed by 0x) of utf8 string\n *\n * @param string\n * @param optional padding\n * @returns hex representation of input string\n */ function fromUtf8(stringValue) {\n    const str = Buffer.from(stringValue, \"utf8\");\n    return `0x${padToEven(str.toString(\"hex\")).replace(/^0+|0+$/g, \"\")}`;\n}\nexports.fromUtf8 = fromUtf8;\n/**\n * Should be called to get hex representation (prefixed by 0x) of ascii string\n *\n * @param  string\n * @param  optional padding\n * @returns  hex representation of input string\n */ function fromAscii(stringValue) {\n    let hex = \"\";\n    for(let i = 0; i < stringValue.length; i++){\n        const code = stringValue.charCodeAt(i);\n        const n = code.toString(16);\n        hex += n.length < 2 ? `0${n}` : n;\n    }\n    return `0x${hex}`;\n}\nexports.fromAscii = fromAscii;\n/**\n * Returns the keys from an array of objects.\n * @example\n * ```js\n * getKeys([{a: '1', b: '2'}, {a: '3', b: '4'}], 'a') => ['1', '3']\n *````\n * @param  params\n * @param  key\n * @param  allowEmpty\n * @returns output just a simple array of output keys\n */ function getKeys(params, key, allowEmpty) {\n    if (!Array.isArray(params)) {\n        throw new Error(`[getKeys] method expects input 'params' to be an array, got ${typeof params}`);\n    }\n    if (typeof key !== \"string\") {\n        throw new Error(`[getKeys] method expects input 'key' to be type 'string', got ${typeof params}`);\n    }\n    const result = [];\n    for(let i = 0; i < params.length; i++){\n        let value = params[i][key];\n        if (allowEmpty === true && !value) {\n            value = \"\";\n        } else if (typeof value !== \"string\") {\n            throw new Error(`invalid abi - expected type 'string', received ${typeof value}`);\n        }\n        result.push(value);\n    }\n    return result;\n}\nexports.getKeys = getKeys;\n/**\n * Is the string a hex string.\n *\n * @param  value\n * @param  length\n * @returns  output the string is a hex string\n */ function isHexString(value, length) {\n    if (typeof value !== \"string\" || !value.match(/^0x[0-9A-Fa-f]*$/)) return false;\n    if (typeof length !== \"undefined\" && length > 0 && value.length !== 2 + 2 * length) return false;\n    return true;\n}\nexports.isHexString = isHexString; //# sourceMappingURL=internal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/internal.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/lock.js":
/*!****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/lock.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Lock = void 0;\n// Based on https://github.com/jsoendermann/semaphore-async-await/blob/master/src/Semaphore.ts\nclass Lock {\n    constructor(){\n        this.permits = 1;\n        this.promiseResolverQueue = [];\n    }\n    /**\n     * Returns a promise used to wait for a permit to become available. This method should be awaited on.\n     * @returns  A promise that gets resolved when execution is allowed to proceed.\n     */ async acquire() {\n        if (this.permits > 0) {\n            this.permits -= 1;\n            return Promise.resolve(true);\n        }\n        // If there is no permit available, we return a promise that resolves once the semaphore gets\n        // signaled enough times that permits is equal to one.\n        return new Promise((resolver)=>this.promiseResolverQueue.push(resolver));\n    }\n    /**\n     * Increases the number of permits by one. If there are other functions waiting, one of them will\n     * continue to execute in a future iteration of the event loop.\n     */ release() {\n        this.permits += 1;\n        if (this.permits > 1 && this.promiseResolverQueue.length > 0) {\n            // eslint-disable-next-line no-console\n            console.warn(\"Lock.permits should never be > 0 when there is someone waiting.\");\n        } else if (this.permits === 1 && this.promiseResolverQueue.length > 0) {\n            // If there is someone else waiting, immediately consume the permit that was released\n            // at the beginning of this function and let the waiting function resume.\n            this.permits -= 1;\n            const nextResolver = this.promiseResolverQueue.shift();\n            if (nextResolver) {\n                nextResolver(true);\n            }\n        }\n    }\n}\nexports.Lock = Lock; //# sourceMappingURL=lock.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L2xvY2suanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFDYkEsOENBQTZDO0lBQUVHLE9BQU87QUFBSyxDQUFDLEVBQUM7QUFDN0RELFlBQVksR0FBRyxLQUFLO0FBQ3BCLDhGQUE4RjtBQUM5RixNQUFNRTtJQUNGQyxhQUFjO1FBQ1YsSUFBSSxDQUFDQyxPQUFPLEdBQUc7UUFDZixJQUFJLENBQUNDLG9CQUFvQixHQUFHLEVBQUU7SUFDbEM7SUFDQTs7O0tBR0MsR0FDRCxNQUFNQyxVQUFVO1FBQ1osSUFBSSxJQUFJLENBQUNGLE9BQU8sR0FBRyxHQUFHO1lBQ2xCLElBQUksQ0FBQ0EsT0FBTyxJQUFJO1lBQ2hCLE9BQU9HLFFBQVFDLE9BQU8sQ0FBQztRQUMzQjtRQUNBLDZGQUE2RjtRQUM3RixzREFBc0Q7UUFDdEQsT0FBTyxJQUFJRCxRQUFRLENBQUNFLFdBQWEsSUFBSSxDQUFDSixvQkFBb0IsQ0FBQ0ssSUFBSSxDQUFDRDtJQUNwRTtJQUNBOzs7S0FHQyxHQUNERSxVQUFVO1FBQ04sSUFBSSxDQUFDUCxPQUFPLElBQUk7UUFDaEIsSUFBSSxJQUFJLENBQUNBLE9BQU8sR0FBRyxLQUFLLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNPLE1BQU0sR0FBRyxHQUFHO1lBQzFELHNDQUFzQztZQUN0Q0MsUUFBUUMsSUFBSSxDQUFDO1FBQ2pCLE9BQ0ssSUFBSSxJQUFJLENBQUNWLE9BQU8sS0FBSyxLQUFLLElBQUksQ0FBQ0Msb0JBQW9CLENBQUNPLE1BQU0sR0FBRyxHQUFHO1lBQ2pFLHFGQUFxRjtZQUNyRix5RUFBeUU7WUFDekUsSUFBSSxDQUFDUixPQUFPLElBQUk7WUFDaEIsTUFBTVcsZUFBZSxJQUFJLENBQUNWLG9CQUFvQixDQUFDVyxLQUFLO1lBQ3BELElBQUlELGNBQWM7Z0JBQ2RBLGFBQWE7WUFDakI7UUFDSjtJQUNKO0FBQ0o7QUFDQWYsWUFBWSxHQUFHRSxNQUNmLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvbG9jay5qcz83YmJjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5Mb2NrID0gdm9pZCAwO1xuLy8gQmFzZWQgb24gaHR0cHM6Ly9naXRodWIuY29tL2pzb2VuZGVybWFubi9zZW1hcGhvcmUtYXN5bmMtYXdhaXQvYmxvYi9tYXN0ZXIvc3JjL1NlbWFwaG9yZS50c1xuY2xhc3MgTG9jayB7XG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIHRoaXMucGVybWl0cyA9IDE7XG4gICAgICAgIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUgPSBbXTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIHByb21pc2UgdXNlZCB0byB3YWl0IGZvciBhIHBlcm1pdCB0byBiZWNvbWUgYXZhaWxhYmxlLiBUaGlzIG1ldGhvZCBzaG91bGQgYmUgYXdhaXRlZCBvbi5cbiAgICAgKiBAcmV0dXJucyAgQSBwcm9taXNlIHRoYXQgZ2V0cyByZXNvbHZlZCB3aGVuIGV4ZWN1dGlvbiBpcyBhbGxvd2VkIHRvIHByb2NlZWQuXG4gICAgICovXG4gICAgYXN5bmMgYWNxdWlyZSgpIHtcbiAgICAgICAgaWYgKHRoaXMucGVybWl0cyA+IDApIHtcbiAgICAgICAgICAgIHRoaXMucGVybWl0cyAtPSAxO1xuICAgICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGVyZSBpcyBubyBwZXJtaXQgYXZhaWxhYmxlLCB3ZSByZXR1cm4gYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgb25jZSB0aGUgc2VtYXBob3JlIGdldHNcbiAgICAgICAgLy8gc2lnbmFsZWQgZW5vdWdoIHRpbWVzIHRoYXQgcGVybWl0cyBpcyBlcXVhbCB0byBvbmUuXG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZXIpID0+IHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUucHVzaChyZXNvbHZlcikpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBJbmNyZWFzZXMgdGhlIG51bWJlciBvZiBwZXJtaXRzIGJ5IG9uZS4gSWYgdGhlcmUgYXJlIG90aGVyIGZ1bmN0aW9ucyB3YWl0aW5nLCBvbmUgb2YgdGhlbSB3aWxsXG4gICAgICogY29udGludWUgdG8gZXhlY3V0ZSBpbiBhIGZ1dHVyZSBpdGVyYXRpb24gb2YgdGhlIGV2ZW50IGxvb3AuXG4gICAgICovXG4gICAgcmVsZWFzZSgpIHtcbiAgICAgICAgdGhpcy5wZXJtaXRzICs9IDE7XG4gICAgICAgIGlmICh0aGlzLnBlcm1pdHMgPiAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgICAgIGNvbnNvbGUud2FybignTG9jay5wZXJtaXRzIHNob3VsZCBuZXZlciBiZSA+IDAgd2hlbiB0aGVyZSBpcyBzb21lb25lIHdhaXRpbmcuJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5wZXJtaXRzID09PSAxICYmIHRoaXMucHJvbWlzZVJlc29sdmVyUXVldWUubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgLy8gSWYgdGhlcmUgaXMgc29tZW9uZSBlbHNlIHdhaXRpbmcsIGltbWVkaWF0ZWx5IGNvbnN1bWUgdGhlIHBlcm1pdCB0aGF0IHdhcyByZWxlYXNlZFxuICAgICAgICAgICAgLy8gYXQgdGhlIGJlZ2lubmluZyBvZiB0aGlzIGZ1bmN0aW9uIGFuZCBsZXQgdGhlIHdhaXRpbmcgZnVuY3Rpb24gcmVzdW1lLlxuICAgICAgICAgICAgdGhpcy5wZXJtaXRzIC09IDE7XG4gICAgICAgICAgICBjb25zdCBuZXh0UmVzb2x2ZXIgPSB0aGlzLnByb21pc2VSZXNvbHZlclF1ZXVlLnNoaWZ0KCk7XG4gICAgICAgICAgICBpZiAobmV4dFJlc29sdmVyKSB7XG4gICAgICAgICAgICAgICAgbmV4dFJlc29sdmVyKHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuZXhwb3J0cy5Mb2NrID0gTG9jaztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWxvY2suanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTG9jayIsImNvbnN0cnVjdG9yIiwicGVybWl0cyIsInByb21pc2VSZXNvbHZlclF1ZXVlIiwiYWNxdWlyZSIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVzb2x2ZXIiLCJwdXNoIiwicmVsZWFzZSIsImxlbmd0aCIsImNvbnNvbGUiLCJ3YXJuIiwibmV4dFJlc29sdmVyIiwic2hpZnQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/lock.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/provider.js":
/*!********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/provider.js ***!
  \********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getProvider = exports.fetchFromProvider = void 0;\nconst micro_ftch_1 = __webpack_require__(/*! micro-ftch */ \"(ssr)/./node_modules/micro-ftch/index.js\");\nconst fetchFromProvider = async (url, params)=>{\n    const res = await (0, micro_ftch_1.default)(url, {\n        headers: {\n            \"content-type\": \"application/json\"\n        },\n        type: \"json\",\n        data: {\n            method: params.method,\n            params: params.params,\n            jsonrpc: \"2.0\",\n            id: 1\n        }\n    });\n    return res.result;\n};\nexports.fetchFromProvider = fetchFromProvider;\nconst getProvider = (provider)=>{\n    if (typeof provider === \"string\") {\n        return provider;\n    } else if (provider?.connection?.url !== undefined) {\n        return provider.connection.url;\n    } else {\n        throw new Error(\"Must provide valid provider URL or Web3Provider\");\n    }\n};\nexports.getProvider = getProvider; //# sourceMappingURL=provider.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3Byb3ZpZGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBR0EseUJBQXlCLEdBQUcsS0FBSztBQUN2RCxNQUFNSSxlQUFlQyxtQkFBT0EsQ0FBQyw0REFBWTtBQUN6QyxNQUFNRixvQkFBb0IsT0FBT0csS0FBS0M7SUFDbEMsTUFBTUMsTUFBTSxNQUFNLENBQUMsR0FBR0osYUFBYUssT0FBTyxFQUFFSCxLQUFLO1FBQzdDSSxTQUFTO1lBQ0wsZ0JBQWdCO1FBQ3BCO1FBQ0FDLE1BQU07UUFDTkMsTUFBTTtZQUNGQyxRQUFRTixPQUFPTSxNQUFNO1lBQ3JCTixRQUFRQSxPQUFPQSxNQUFNO1lBQ3JCTyxTQUFTO1lBQ1RDLElBQUk7UUFDUjtJQUNKO0lBQ0EsT0FBT1AsSUFBSVEsTUFBTTtBQUNyQjtBQUNBaEIseUJBQXlCLEdBQUdHO0FBQzVCLE1BQU1ELGNBQWMsQ0FBQ2U7SUFDakIsSUFBSSxPQUFPQSxhQUFhLFVBQVU7UUFDOUIsT0FBT0E7SUFDWCxPQUNLLElBQUlBLFVBQVVDLFlBQVlaLFFBQVFhLFdBQVc7UUFDOUMsT0FBT0YsU0FBU0MsVUFBVSxDQUFDWixHQUFHO0lBQ2xDLE9BQ0s7UUFDRCxNQUFNLElBQUljLE1BQU07SUFDcEI7QUFDSjtBQUNBcEIsbUJBQW1CLEdBQUdFLGFBQ3RCLG9DQUFvQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvcHJvdmlkZXIuanM/ZTI1OCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuZ2V0UHJvdmlkZXIgPSBleHBvcnRzLmZldGNoRnJvbVByb3ZpZGVyID0gdm9pZCAwO1xuY29uc3QgbWljcm9fZnRjaF8xID0gcmVxdWlyZShcIm1pY3JvLWZ0Y2hcIik7XG5jb25zdCBmZXRjaEZyb21Qcm92aWRlciA9IGFzeW5jICh1cmwsIHBhcmFtcykgPT4ge1xuICAgIGNvbnN0IHJlcyA9IGF3YWl0ICgwLCBtaWNyb19mdGNoXzEuZGVmYXVsdCkodXJsLCB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgICdjb250ZW50LXR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6ICdqc29uJyxcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgbWV0aG9kOiBwYXJhbXMubWV0aG9kLFxuICAgICAgICAgICAgcGFyYW1zOiBwYXJhbXMucGFyYW1zLFxuICAgICAgICAgICAganNvbnJwYzogJzIuMCcsXG4gICAgICAgICAgICBpZDogMSxcbiAgICAgICAgfSxcbiAgICB9KTtcbiAgICByZXR1cm4gcmVzLnJlc3VsdDtcbn07XG5leHBvcnRzLmZldGNoRnJvbVByb3ZpZGVyID0gZmV0Y2hGcm9tUHJvdmlkZXI7XG5jb25zdCBnZXRQcm92aWRlciA9IChwcm92aWRlcikgPT4ge1xuICAgIGlmICh0eXBlb2YgcHJvdmlkZXIgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlcjtcbiAgICB9XG4gICAgZWxzZSBpZiAocHJvdmlkZXI/LmNvbm5lY3Rpb24/LnVybCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiBwcm92aWRlci5jb25uZWN0aW9uLnVybDtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTXVzdCBwcm92aWRlIHZhbGlkIHByb3ZpZGVyIFVSTCBvciBXZWIzUHJvdmlkZXInKTtcbiAgICB9XG59O1xuZXhwb3J0cy5nZXRQcm92aWRlciA9IGdldFByb3ZpZGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cHJvdmlkZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0UHJvdmlkZXIiLCJmZXRjaEZyb21Qcm92aWRlciIsIm1pY3JvX2Z0Y2hfMSIsInJlcXVpcmUiLCJ1cmwiLCJwYXJhbXMiLCJyZXMiLCJkZWZhdWx0IiwiaGVhZGVycyIsInR5cGUiLCJkYXRhIiwibWV0aG9kIiwianNvbnJwYyIsImlkIiwicmVzdWx0IiwicHJvdmlkZXIiLCJjb25uZWN0aW9uIiwidW5kZWZpbmVkIiwiRXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/provider.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/signature.js":
/*!*********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/signature.js ***!
  \*********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.hashPersonalMessage = exports.isValidSignature = exports.fromRpcSig = exports.toCompactSig = exports.toRpcSig = exports.ecrecover = exports.ecsign = void 0;\nconst keccak_1 = __webpack_require__(/*! ethereum-cryptography/keccak */ \"(ssr)/./node_modules/ethereum-cryptography/keccak.js\");\nconst secp256k1_1 = __webpack_require__(/*! ethereum-cryptography/secp256k1 */ \"(ssr)/./node_modules/ethereum-cryptography/secp256k1.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@ethereumjs/util/dist/bytes.js\");\nconst constants_1 = __webpack_require__(/*! ./constants */ \"(ssr)/./node_modules/@ethereumjs/util/dist/constants.js\");\nconst helpers_1 = __webpack_require__(/*! ./helpers */ \"(ssr)/./node_modules/@ethereumjs/util/dist/helpers.js\");\n/**\n * Returns the ECDSA signature of a message hash.\n *\n * If `chainId` is provided assume an EIP-155-style signature and calculate the `v` value\n * accordingly, otherwise return a \"static\" `v` just derived from the `recovery` bit\n */ function ecsign(msgHash, privateKey, chainId) {\n    const sig = secp256k1_1.secp256k1.sign(msgHash, privateKey);\n    const buf = sig.toCompactRawBytes();\n    const r = Buffer.from(buf.slice(0, 32));\n    const s = Buffer.from(buf.slice(32, 64));\n    const v = chainId === undefined ? BigInt(sig.recovery + 27) : BigInt(sig.recovery + 35) + BigInt(chainId) * BigInt(2);\n    return {\n        r,\n        s,\n        v\n    };\n}\nexports.ecsign = ecsign;\nfunction calculateSigRecovery(v, chainId) {\n    if (v === BigInt(0) || v === BigInt(1)) return v;\n    if (chainId === undefined) {\n        return v - BigInt(27);\n    }\n    return v - (chainId * BigInt(2) + BigInt(35));\n}\nfunction isValidSigRecovery(recovery) {\n    return recovery === BigInt(0) || recovery === BigInt(1);\n}\n/**\n * ECDSA public key recovery from signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Recovered public key\n */ const ecrecover = function(msgHash, v, r, s, chainId) {\n    const signature = Buffer.concat([\n        (0, bytes_1.setLengthLeft)(r, 32),\n        (0, bytes_1.setLengthLeft)(s, 32)\n    ], 64);\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    const sig = secp256k1_1.secp256k1.Signature.fromCompact(signature).addRecoveryBit(Number(recovery));\n    const senderPubKey = sig.recoverPublicKey(msgHash);\n    return Buffer.from(senderPubKey.toRawBytes(false).slice(1));\n};\nexports.ecrecover = ecrecover;\n/**\n * Convert signature parameters into the format of `eth_sign` RPC method.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */ const toRpcSig = function(v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    // geth (and the RPC eth_sign method) uses the 65 byte format used by Bitcoin\n    return (0, bytes_1.bufferToHex)(Buffer.concat([\n        (0, bytes_1.setLengthLeft)(r, 32),\n        (0, bytes_1.setLengthLeft)(s, 32),\n        (0, bytes_1.toBuffer)(v)\n    ]));\n};\nexports.toRpcSig = toRpcSig;\n/**\n * Convert signature parameters into the format of Compact Signature Representation (EIP-2098).\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @returns Signature\n */ const toCompactSig = function(v, r, s, chainId) {\n    const recovery = calculateSigRecovery(v, chainId);\n    if (!isValidSigRecovery(recovery)) {\n        throw new Error(\"Invalid signature v value\");\n    }\n    let ss = s;\n    if (v > BigInt(28) && v % BigInt(2) === BigInt(1) || v === BigInt(1) || v === BigInt(28)) {\n        ss = Buffer.from(s);\n        ss[0] |= 0x80;\n    }\n    return (0, bytes_1.bufferToHex)(Buffer.concat([\n        (0, bytes_1.setLengthLeft)(r, 32),\n        (0, bytes_1.setLengthLeft)(ss, 32)\n    ]));\n};\nexports.toCompactSig = toCompactSig;\n/**\n * Convert signature format of the `eth_sign` RPC method to signature parameters\n *\n * NOTE: For an extracted `v` value < 27 (see Geth bug https://github.com/ethereum/go-ethereum/issues/2053)\n * `v + 27` is returned for the `v` value\n * NOTE: After EIP1559, `v` could be `0` or `1` but this function assumes\n * it's a signed message (EIP-191 or EIP-712) adding `27` at the end. Remove if needed.\n */ const fromRpcSig = function(sig) {\n    const buf = (0, bytes_1.toBuffer)(sig);\n    let r;\n    let s;\n    let v;\n    if (buf.length >= 65) {\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = (0, bytes_1.bufferToBigInt)(buf.slice(64));\n    } else if (buf.length === 64) {\n        // Compact Signature Representation (https://eips.ethereum.org/EIPS/eip-2098)\n        r = buf.slice(0, 32);\n        s = buf.slice(32, 64);\n        v = BigInt((0, bytes_1.bufferToInt)(buf.slice(32, 33)) >> 7);\n        s[0] &= 0x7f;\n    } else {\n        throw new Error(\"Invalid signature length\");\n    }\n    // support both versions of `eth_sign` responses\n    if (v < 27) {\n        v = v + BigInt(27);\n    }\n    return {\n        v,\n        r,\n        s\n    };\n};\nexports.fromRpcSig = fromRpcSig;\n/**\n * Validate a ECDSA signature.\n * NOTE: Accepts `v === 0 | v === 1` for EIP1559 transactions\n * @param homesteadOrLater Indicates whether this is being used on either the homestead hardfork or a later one\n */ const isValidSignature = function(v, r, s, homesteadOrLater = true, chainId) {\n    if (r.length !== 32 || s.length !== 32) {\n        return false;\n    }\n    if (!isValidSigRecovery(calculateSigRecovery(v, chainId))) {\n        return false;\n    }\n    const rBigInt = (0, bytes_1.bufferToBigInt)(r);\n    const sBigInt = (0, bytes_1.bufferToBigInt)(s);\n    if (rBigInt === BigInt(0) || rBigInt >= constants_1.SECP256K1_ORDER || sBigInt === BigInt(0) || sBigInt >= constants_1.SECP256K1_ORDER) {\n        return false;\n    }\n    if (homesteadOrLater && sBigInt >= constants_1.SECP256K1_ORDER_DIV_2) {\n        return false;\n    }\n    return true;\n};\nexports.isValidSignature = isValidSignature;\n/**\n * Returns the keccak-256 hash of `message`, prefixed with the header used by the `eth_sign` RPC call.\n * The output of this function can be fed into `ecsign` to produce the same signature as the `eth_sign`\n * call for a given `message`, or fed to `ecrecover` along with a signature to recover the public key\n * used to produce the signature.\n */ const hashPersonalMessage = function(message) {\n    (0, helpers_1.assertIsBuffer)(message);\n    const prefix = Buffer.from(`\\u0019Ethereum Signed Message:\\n${message.length}`, \"utf-8\");\n    return Buffer.from((0, keccak_1.keccak256)(Buffer.concat([\n        prefix,\n        message\n    ])));\n};\nexports.hashPersonalMessage = hashPersonalMessage; //# sourceMappingURL=signature.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/signature.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/types.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/types.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toType = exports.TypeOutput = void 0;\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@ethereumjs/util/dist/bytes.js\");\nconst internal_1 = __webpack_require__(/*! ./internal */ \"(ssr)/./node_modules/@ethereumjs/util/dist/internal.js\");\n/**\n * Type output options\n */ var TypeOutput;\n(function(TypeOutput) {\n    TypeOutput[TypeOutput[\"Number\"] = 0] = \"Number\";\n    TypeOutput[TypeOutput[\"BigInt\"] = 1] = \"BigInt\";\n    TypeOutput[TypeOutput[\"Buffer\"] = 2] = \"Buffer\";\n    TypeOutput[TypeOutput[\"PrefixedHexString\"] = 3] = \"PrefixedHexString\";\n})(TypeOutput = exports.TypeOutput || (exports.TypeOutput = {}));\nfunction toType(input, outputType) {\n    if (input === null) {\n        return null;\n    }\n    if (input === undefined) {\n        return undefined;\n    }\n    if (typeof input === \"string\" && !(0, internal_1.isHexString)(input)) {\n        throw new Error(`A string must be provided with a 0x-prefix, given: ${input}`);\n    } else if (typeof input === \"number\" && !Number.isSafeInteger(input)) {\n        throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative input type)\");\n    }\n    const output = (0, bytes_1.toBuffer)(input);\n    switch(outputType){\n        case TypeOutput.Buffer:\n            return output;\n        case TypeOutput.BigInt:\n            return (0, bytes_1.bufferToBigInt)(output);\n        case TypeOutput.Number:\n            {\n                const bigInt = (0, bytes_1.bufferToBigInt)(output);\n                if (bigInt > BigInt(Number.MAX_SAFE_INTEGER)) {\n                    throw new Error(\"The provided number is greater than MAX_SAFE_INTEGER (please use an alternative output type)\");\n                }\n                return Number(bigInt);\n            }\n        case TypeOutput.PrefixedHexString:\n            return (0, bytes_1.bufferToHex)(output);\n        default:\n            throw new Error(\"unknown outputType\");\n    }\n}\nexports.toType = toType; //# sourceMappingURL=types.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3R5cGVzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxjQUFjLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFDM0MsTUFBTUksVUFBVUMsbUJBQU9BLENBQUMsb0VBQVM7QUFDakMsTUFBTUMsYUFBYUQsbUJBQU9BLENBQUMsMEVBQVk7QUFDdkM7O0NBRUMsR0FDRCxJQUFJRjtBQUNILFVBQVVBLFVBQVU7SUFDakJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDdkNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRztBQUN0RCxHQUFHQSxhQUFhSCxRQUFRRyxVQUFVLElBQUtILENBQUFBLGtCQUFrQixHQUFHLENBQUM7QUFDN0QsU0FBU0UsT0FBT0ssS0FBSyxFQUFFQyxVQUFVO0lBQzdCLElBQUlELFVBQVUsTUFBTTtRQUNoQixPQUFPO0lBQ1g7SUFDQSxJQUFJQSxVQUFVRSxXQUFXO1FBQ3JCLE9BQU9BO0lBQ1g7SUFDQSxJQUFJLE9BQU9GLFVBQVUsWUFBWSxDQUFDLENBQUMsR0FBR0QsV0FBV0ksV0FBVyxFQUFFSCxRQUFRO1FBQ2xFLE1BQU0sSUFBSUksTUFBTSxDQUFDLG1EQUFtRCxFQUFFSixNQUFNLENBQUM7SUFDakYsT0FDSyxJQUFJLE9BQU9BLFVBQVUsWUFBWSxDQUFDSyxPQUFPQyxhQUFhLENBQUNOLFFBQVE7UUFDaEUsTUFBTSxJQUFJSSxNQUFNO0lBQ3BCO0lBQ0EsTUFBTUcsU0FBUyxDQUFDLEdBQUdWLFFBQVFXLFFBQVEsRUFBRVI7SUFDckMsT0FBUUM7UUFDSixLQUFLTCxXQUFXYSxNQUFNO1lBQ2xCLE9BQU9GO1FBQ1gsS0FBS1gsV0FBV2MsTUFBTTtZQUNsQixPQUFPLENBQUMsR0FBR2IsUUFBUWMsY0FBYyxFQUFFSjtRQUN2QyxLQUFLWCxXQUFXUyxNQUFNO1lBQUU7Z0JBQ3BCLE1BQU1PLFNBQVMsQ0FBQyxHQUFHZixRQUFRYyxjQUFjLEVBQUVKO2dCQUMzQyxJQUFJSyxTQUFTRixPQUFPTCxPQUFPUSxnQkFBZ0IsR0FBRztvQkFDMUMsTUFBTSxJQUFJVCxNQUFNO2dCQUNwQjtnQkFDQSxPQUFPQyxPQUFPTztZQUNsQjtRQUNBLEtBQUtoQixXQUFXa0IsaUJBQWlCO1lBQzdCLE9BQU8sQ0FBQyxHQUFHakIsUUFBUWtCLFdBQVcsRUFBRVI7UUFDcEM7WUFDSSxNQUFNLElBQUlILE1BQU07SUFDeEI7QUFDSjtBQUNBWCxjQUFjLEdBQUdFLFFBQ2pCLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AZXRoZXJldW1qcy91dGlsL2Rpc3QvdHlwZXMuanM/NjEzNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudG9UeXBlID0gZXhwb3J0cy5UeXBlT3V0cHV0ID0gdm9pZCAwO1xuY29uc3QgYnl0ZXNfMSA9IHJlcXVpcmUoXCIuL2J5dGVzXCIpO1xuY29uc3QgaW50ZXJuYWxfMSA9IHJlcXVpcmUoXCIuL2ludGVybmFsXCIpO1xuLyoqXG4gKiBUeXBlIG91dHB1dCBvcHRpb25zXG4gKi9cbnZhciBUeXBlT3V0cHV0O1xuKGZ1bmN0aW9uIChUeXBlT3V0cHV0KSB7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiTnVtYmVyXCJdID0gMF0gPSBcIk51bWJlclwiO1xuICAgIFR5cGVPdXRwdXRbVHlwZU91dHB1dFtcIkJpZ0ludFwiXSA9IDFdID0gXCJCaWdJbnRcIjtcbiAgICBUeXBlT3V0cHV0W1R5cGVPdXRwdXRbXCJCdWZmZXJcIl0gPSAyXSA9IFwiQnVmZmVyXCI7XG4gICAgVHlwZU91dHB1dFtUeXBlT3V0cHV0W1wiUHJlZml4ZWRIZXhTdHJpbmdcIl0gPSAzXSA9IFwiUHJlZml4ZWRIZXhTdHJpbmdcIjtcbn0pKFR5cGVPdXRwdXQgPSBleHBvcnRzLlR5cGVPdXRwdXQgfHwgKGV4cG9ydHMuVHlwZU91dHB1dCA9IHt9KSk7XG5mdW5jdGlvbiB0b1R5cGUoaW5wdXQsIG91dHB1dFR5cGUpIHtcbiAgICBpZiAoaW5wdXQgPT09IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIGlmIChpbnB1dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgaW5wdXQgPT09ICdzdHJpbmcnICYmICEoMCwgaW50ZXJuYWxfMS5pc0hleFN0cmluZykoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBzdHJpbmcgbXVzdCBiZSBwcm92aWRlZCB3aXRoIGEgMHgtcHJlZml4LCBnaXZlbjogJHtpbnB1dH1gKTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyAmJiAhTnVtYmVyLmlzU2FmZUludGVnZXIoaW5wdXQpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIG51bWJlciBpcyBncmVhdGVyIHRoYW4gTUFYX1NBRkVfSU5URUdFUiAocGxlYXNlIHVzZSBhbiBhbHRlcm5hdGl2ZSBpbnB1dCB0eXBlKScpO1xuICAgIH1cbiAgICBjb25zdCBvdXRwdXQgPSAoMCwgYnl0ZXNfMS50b0J1ZmZlcikoaW5wdXQpO1xuICAgIHN3aXRjaCAob3V0cHV0VHlwZSkge1xuICAgICAgICBjYXNlIFR5cGVPdXRwdXQuQnVmZmVyOlxuICAgICAgICAgICAgcmV0dXJuIG91dHB1dDtcbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0LkJpZ0ludDpcbiAgICAgICAgICAgIHJldHVybiAoMCwgYnl0ZXNfMS5idWZmZXJUb0JpZ0ludCkob3V0cHV0KTtcbiAgICAgICAgY2FzZSBUeXBlT3V0cHV0Lk51bWJlcjoge1xuICAgICAgICAgICAgY29uc3QgYmlnSW50ID0gKDAsIGJ5dGVzXzEuYnVmZmVyVG9CaWdJbnQpKG91dHB1dCk7XG4gICAgICAgICAgICBpZiAoYmlnSW50ID4gQmlnSW50KE51bWJlci5NQVhfU0FGRV9JTlRFR0VSKSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignVGhlIHByb3ZpZGVkIG51bWJlciBpcyBncmVhdGVyIHRoYW4gTUFYX1NBRkVfSU5URUdFUiAocGxlYXNlIHVzZSBhbiBhbHRlcm5hdGl2ZSBvdXRwdXQgdHlwZSknKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBOdW1iZXIoYmlnSW50KTtcbiAgICAgICAgfVxuICAgICAgICBjYXNlIFR5cGVPdXRwdXQuUHJlZml4ZWRIZXhTdHJpbmc6XG4gICAgICAgICAgICByZXR1cm4gKDAsIGJ5dGVzXzEuYnVmZmVyVG9IZXgpKG91dHB1dCk7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ3Vua25vd24gb3V0cHV0VHlwZScpO1xuICAgIH1cbn1cbmV4cG9ydHMudG9UeXBlID0gdG9UeXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dHlwZXMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidG9UeXBlIiwiVHlwZU91dHB1dCIsImJ5dGVzXzEiLCJyZXF1aXJlIiwiaW50ZXJuYWxfMSIsImlucHV0Iiwib3V0cHV0VHlwZSIsInVuZGVmaW5lZCIsImlzSGV4U3RyaW5nIiwiRXJyb3IiLCJOdW1iZXIiLCJpc1NhZmVJbnRlZ2VyIiwib3V0cHV0IiwidG9CdWZmZXIiLCJCdWZmZXIiLCJCaWdJbnQiLCJidWZmZXJUb0JpZ0ludCIsImJpZ0ludCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJQcmVmaXhlZEhleFN0cmluZyIsImJ1ZmZlclRvSGV4Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/types.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/units.js":
/*!*****************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/units.js ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GWEI_TO_WEI = void 0;\n/** Easy conversion from Gwei to wei */ exports.GWEI_TO_WEI = BigInt(1000000000); //# sourceMappingURL=units.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQGV0aGVyZXVtanMvdXRpbC9kaXN0L3VuaXRzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBQ2JBLDhDQUE2QztJQUFFRyxPQUFPO0FBQUssQ0FBQyxFQUFDO0FBQzdERCxtQkFBbUIsR0FBRyxLQUFLO0FBQzNCLHFDQUFxQyxHQUNyQ0EsbUJBQW1CLEdBQUdHLE9BQU8sYUFDN0IsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BldGhlcmV1bWpzL3V0aWwvZGlzdC91bml0cy5qcz9kYjg3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5HV0VJX1RPX1dFSSA9IHZvaWQgMDtcbi8qKiBFYXN5IGNvbnZlcnNpb24gZnJvbSBHd2VpIHRvIHdlaSAqL1xuZXhwb3J0cy5HV0VJX1RPX1dFSSA9IEJpZ0ludCgxMDAwMDAwMDAwKTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXVuaXRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdXRUlfVE9fV0VJIiwiQmlnSW50Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/units.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@ethereumjs/util/dist/withdrawal.js":
/*!**********************************************************!*\
  !*** ./node_modules/@ethereumjs/util/dist/withdrawal.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Withdrawal = void 0;\nconst address_1 = __webpack_require__(/*! ./address */ \"(ssr)/./node_modules/@ethereumjs/util/dist/address.js\");\nconst bytes_1 = __webpack_require__(/*! ./bytes */ \"(ssr)/./node_modules/@ethereumjs/util/dist/bytes.js\");\nconst types_1 = __webpack_require__(/*! ./types */ \"(ssr)/./node_modules/@ethereumjs/util/dist/types.js\");\n/**\n * Representation of EIP-4895 withdrawal data\n */ class Withdrawal {\n    /**\n     * This constructor assigns and validates the values.\n     * Use the static factory methods to assist in creating a Withdrawal object from varying data types.\n     * Its amount is in Gwei to match CL representation and for eventual ssz withdrawalsRoot\n     */ constructor(index, validatorIndex, address, /**\n     * withdrawal amount in Gwei to match the CL repesentation and eventually ssz withdrawalsRoot\n     */ amount){\n        this.index = index;\n        this.validatorIndex = validatorIndex;\n        this.address = address;\n        this.amount = amount;\n    }\n    static fromWithdrawalData(withdrawalData) {\n        const { index: indexData, validatorIndex: validatorIndexData, address: addressData, amount: amountData } = withdrawalData;\n        const index = (0, types_1.toType)(indexData, types_1.TypeOutput.BigInt);\n        const validatorIndex = (0, types_1.toType)(validatorIndexData, types_1.TypeOutput.BigInt);\n        const address = new address_1.Address((0, types_1.toType)(addressData, types_1.TypeOutput.Buffer));\n        const amount = (0, types_1.toType)(amountData, types_1.TypeOutput.BigInt);\n        return new Withdrawal(index, validatorIndex, address, amount);\n    }\n    static fromValuesArray(withdrawalArray) {\n        if (withdrawalArray.length !== 4) {\n            throw Error(`Invalid withdrawalArray length expected=4 actual=${withdrawalArray.length}`);\n        }\n        const [index, validatorIndex, address, amount] = withdrawalArray;\n        return Withdrawal.fromWithdrawalData({\n            index,\n            validatorIndex,\n            address,\n            amount\n        });\n    }\n    /**\n     * Convert a withdrawal to a buffer array\n     * @param withdrawal the withdrawal to convert\n     * @returns buffer array of the withdrawal\n     */ static toBufferArray(withdrawal) {\n        const { index, validatorIndex, address, amount } = withdrawal;\n        const indexBuffer = (0, types_1.toType)(index, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer.alloc(0) : (0, types_1.toType)(index, types_1.TypeOutput.Buffer);\n        const validatorIndexBuffer = (0, types_1.toType)(validatorIndex, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer.alloc(0) : (0, types_1.toType)(validatorIndex, types_1.TypeOutput.Buffer);\n        let addressBuffer;\n        if (address instanceof address_1.Address) {\n            addressBuffer = address.buf;\n        } else {\n            addressBuffer = (0, types_1.toType)(address, types_1.TypeOutput.Buffer);\n        }\n        const amountBuffer = (0, types_1.toType)(amount, types_1.TypeOutput.BigInt) === BigInt(0) ? Buffer.alloc(0) : (0, types_1.toType)(amount, types_1.TypeOutput.Buffer);\n        return [\n            indexBuffer,\n            validatorIndexBuffer,\n            addressBuffer,\n            amountBuffer\n        ];\n    }\n    raw() {\n        return Withdrawal.toBufferArray(this);\n    }\n    toValue() {\n        return {\n            index: this.index,\n            validatorIndex: this.validatorIndex,\n            address: this.address.buf,\n            amount: this.amount\n        };\n    }\n    toJSON() {\n        return {\n            index: (0, bytes_1.bigIntToHex)(this.index),\n            validatorIndex: (0, bytes_1.bigIntToHex)(this.validatorIndex),\n            address: \"0x\" + this.address.buf.toString(\"hex\"),\n            amount: (0, bytes_1.bigIntToHex)(this.amount)\n        };\n    }\n}\nexports.Withdrawal = Withdrawal; //# sourceMappingURL=withdrawal.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@ethereumjs/util/dist/withdrawal.js\n");

/***/ })

};
;